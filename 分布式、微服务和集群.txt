介绍：

集群：
	集群是把一个系统复制多个，放在不同的机器中，再通过一个统一的调度中心去调用，比如nginx的负载均衡，用户以为
调用的是一个服务器，其实有可能每次访问都会调用不同的服务器，集群可以提升服务器的负载能力

分布式：
	把一个应用拆分成多个应用，放到不同的机器上，不同的机器执行不同的业务，分布式是为了分布机器的压力，可以提升
服务器的性能

微服务：
	把一个应用按照功能拆分成很多份，每个功能都是一个服务，多个微服务可以放在一个机器上，每个服务之间通过接口调
用，微服务是为了解耦合，把大型的应用分成一个个小服务，小服务之间线程隔离，相互独立，微服务的开发更加容易，只需要关
注本服务的功能就可以了，因此系统的迭代速度更快；不过因为功能太分散了，因此运维的复杂度也会更大，并且服务越多通信的
成本也越高，性能也就越低

特点与区别：

集群：使用多个一样的程序，再用一个同一的的调度中心访问，提高系统的负载能力

分布式：把一个应用分成多个，放到不同的机器上面，分散系统压力，提高每台机器的性能

微服务：把一个应用分成多个，可以放在同一个机器上，不过至少相互线程隔离，可以解耦合，缺点是因为应用的增加导致维护难
度提升和整体性能下降

总结：
	微服务架构一般都是分布式架构，分布式架构不一定是微服务架构，在spring cloud中，拆分不同的服务之后，每种服务
还可以由多个应用提供，也就是对每个服务都进行集群，分布式架构的描述看起来也很容易集群。
	因此一般的压力集群就能解决并且是最方便的，基本不用改代码；分布式比较麻烦，需要拆分不同的应用，并且互相调用
，微服务最麻烦，需要按照业务拆分成一个个服务
	这三个架构也经常一起使用，spring cloud本身就是一个微服务整合框架，并且每个服务可以由多个应用提供，微服务本
身就属于分布式，因此可见spring cloud同时整合了微服务、集群、分布式


二阶段提交：
	1、参与者进入事务就给协调者发送一个事务id，如果调用其它服务，则共用同一事务id，代表同一组
	2、协调者询问所有参与者是否可提交或回滚
	3、参与者回复协调者提交或回滚，有任一回滚则该组所有参与者都回滚
	4、若全部参与者确认提交，协调者向所有参与者发送执行提交命令，所有参与者都进行提交
	
    参与者回滚或提交完毕都会向协调者告知执行完成，每一个步骤都应该有可靠的持久化日志进行记录

    协调者什么时候向参与者确认是否可提交的疑惑：
        如果某个服务调用另一服务，被调者执行较慢，协调者会在什么时候进行提交/回滚确认，它怎么知道后面是    否还有新的参与者
        产生这种情况一般是前面的服务在提交之前调用其它服务，只要协调者在这个服务的事务没有确认提交或回滚     之前一直接受新的事务加入就可以了，因为这个服务如果确认了，说明调用流程都走完了，后面的调用链肯定也      结束了，并且这期间可加入超时回滚机制





