
Mysql：

    传统的MySQL主从复制结构：

    MySQL异步复制：
        一主多从，客户端发送的请求，执行之后写入主库的binlog，主库把binlog日志推送给从库，主库不需要知道从库是否已经把
    数据更新到relay log，主库就直接提交事务。因此可能会出现主从不一致的情况，这种模式牺牲了数据一致性，提升了性能

    MySQL半同步复制：
        一主多从，客户端发送的请求，执行后写入主库的binlog，主库会把binlog推送给所有从库，此时主库需要等待任意一个从库
    把数据更新到relay log成功，并告知主库，主库才会提交事务，这样保证至少有一个从库的数据是安全的，而且延迟也不会太高
    。这种方案MySQL无法自动切换主从，需要借助外力，而且如果从库复制延迟高会导致主库写入性能下降

    MGR(MySQL Group Replication)：
        MySQL自带的插件，从5.7开始支持。MySQL MGR集群是多个MySQL Server节点共同组成的分布式集群，每个Server都有完整的副
    本，它是基于ROW格式的二进制日志文件和GTID特殊
        不过这也是一种主从复制方案，基于Paxos算法

    GTID(Global Transaction ID，全局事务ID)：
        可以简化主从切换以及Failover
        传统的复制模式，当发生故障，需要主从切换，就需要找到binlog和position，然后将从节点指向新的主节点。而有了GTID后
    ，只需知道主节点的IP、端口以及账号密码就行了，MySQL会自动通过GTID找到点进行同步
        特点：
            1、GTID是全局唯一的，不仅在单个库上唯一，而且在整个MySQL集群内也是唯一
            2、GTID由两部分组成：MySQL实例ID与实例的事务序号，如：3E11FA47-71CA-11E1-9E33-C80AA9429562:1
            3、GTID集合的格式：3E11FA47-71CA-11E1-9E33-C80AA9429562:1-3:5:19-21，代表该实例上第1到3、第5，第19-21个事务
            4、GTID是全局唯一的，因此可以快速确定事务是在哪个事务上进行提交的
            5、GTID是连续的，可以保证数据的0丢失

    故障转移：
        解决了节点之间的数据复制，接下来就是解决怎么进行故障转移了

    1、MyCat：
        MyCat提供了分库分表、读写分离、故障转移等功能

    2、MHA：
        MHA是一套MySQL故障切换方案，它用来保证数据库在宕机后10-30S内完成故障切换，可避免主从一致性的问题

        以上两种方案都只是把从切换成主，切换后需要自己去手动恢复主从架构，也就是将集群内除了被切换成主的机器，其它的都
    作为它的从库



Redis：

Redis的Sentinel高可用方案：

    首先必须至少有一个主与一个从，关于数据一致性，Redis的master可以配置至少有多少个slave是处于状态时master才是可写的：
min-replicas-to-write 3，代表只有3个或以上dslave连接到master，master才可写
    然后就是Redis Sentinel，Sentinel使用了Raft分布式强一致性协议来保证节点的一致性，这个协议采取了少数服从多数的原则，
因此如果想要sentinel高可用，就至少要有3台进行集群。Sentinel以一定频率向所有的master、slave、sentnel发送PING命令，以期待
对方返回一个PONG响应，如果对方超过own-after-milliseconds配置的时间未响应，对方就会进入主观下线
    然后Sentinel就可以监控Redis主从的状态，当主节点挂了之后，通过判断从节点的断开连接时长、优先级(配置文件里设置
replica-priority 100，越小优先级越高)、从节点的偏移量、进程id等信息选出一个从节点，这些选举条件是前面的如果一直就判断
后面的条件，最终选好后就将从节点晋升为主节点，然后将其余从节点的主节点切换为新的主节点，如果此时旧的主节点连接上来，它
就会成为一个从节点
    哨兵的主观下线与客观下线：主观：单个哨兵认为Redis节点挂了，客观：多数哨兵都认为某个节点挂了

    Raft算法简单易懂的动画版：http://thesecretlivesofdata.com/raft/

    客户端实现：
        1、客户端从所有的sentinel连接列表里挨个尝试连接，直到连接成功任意一个sentinel为止，然后将连接成功的Sentinel放到
    地址列表开头，以便下次进行连接
        2、通过指令从Sentinel获取主节点的地址：SENTINEL SENTINEL GET-MASTER-ADDR-BY-NAME master-name，其中master-name是
    在启动Sentinel时自己定义的主节点名称
        3、如果这个主节点名称存在，Sentinel会返回一个ip:port信息，否则返回一个空
        4、连接到sentinel返回的地址
        5、通过：role命令判断连接的是否真的主节点，该命令第一行会返回master、slave、sentinel三个值的任意一个，代表当前
    节点的角色，如果是master就可以代表是主节点
        6、接下来客户端应该订阅sentinel事件，例如switch-master事件，它会在故障转移后主节点切换后进行发布，它会通知主节
    点的名称，新的主节点ip端口，旧的主节点ip端口，此时客户端就可以重新通过role命令判断后，将旧的连接池销毁，并使用新的
    连接池。具体事件列表参考：https://redis.io/docs/manual/sentinel/#pubsub-messages
        7、如果想做读写分离，可以通过：SENTINEL REPLICAS master-name指令获取指定主节点的副本信息，Sentinel命令列表参考 
    ：https://redis.io/docs/manual/sentinel/#sentinel-commands


Redis的集群高可用方案：
    将集群分到多个节点组，每个节点组都有自己的主从节点，请求的数据会进行分槽，槽的数量可以自己分配，比如有3个节点组
，有16384个槽，那么第一个节点负责key hash值的0~5000，第二个节点复负责5001~10000，第三个节点负责10001~16383。通过不
同的节点负责不同的槽，以此达成数据分片
    假设客户端将key发给的节点不对应其负责的槽，它会返回：(error) MOVED 13724 127.0.0.1:7293，告知客户端应该发给哪个
节点。客户端自己应该维护一份slot和node的对应关系，先计算key的目标节点再发送命令，可以通过：cluster keyslot key来计
算当前key属于哪个slot

    Redis集群的高可用：
        Redis集群的高可用不再依赖于Sentinel，当集群里的某个节点组的master挂了，该节点组的slave就会尝试进行Failover，以
    期成为新的master，它会将自己记录的集群currentEpoch+1，并广播给其他节点组，其他节点组只有master才会响应它，当slave
    收到过半master的ack后，它将成为新的master
    因此Redis Cluster中，master节点代替了Sentinel的作用，索引如果想要保证Redis集群的高可用，就必须至少要有6个节点：
    3个主节点防止节点选举出现脑裂，每个主节点又要一个从节点进行数据冗余

        Redis集群中的事件，比如新节点加入、slot迁移、节点宕机、slave选举称为master，都是通过gossip协议来传播的，也叫流
    行病协议、流言算法、疫情传播算法等等。它的思路是每个节点都会根据一定的规律跟其余节点进行消息传播，最终将消息传播遍
    整个集群。比如每次都传播给相邻的节点，相邻的节点又传播给相邻的节点(排除传消息给自己的节点)，持续下去总会传遍整个集
    群



    Redis的3种高可用方案：
        1、主从复制：可实现读写分离，是高可用的前提
        2、哨兵机制：通过Sentinel实现master选举
        3、集群机制：集群内部机制实现高可用，实现数据分片


    























