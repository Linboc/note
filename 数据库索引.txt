
索引结构：

不同的索引方式只是代表了不同的搜素方式，并不代表功能

聚集索引、聚类索引、簇集索引（多个称号）:clustered index

	类似于一本书，目录是有序的，被检索的数据也是有序的
	1号：12(下标)
	2号：21
	3号：33
	前面的编号（索引）是有序的，数据的排列规则是跟目录一致的

每个表只能有一个聚集索引,为什么只能有一个？
因为表的数据以一种顺序排列在磁盘中，那种顺序就是根据聚集索引决定的，因此只能有一个聚集索引

非聚集索引、非聚类索引、非簇集索引:nonclustered index

	类似于一本书，目录是有序的，被检索的数据是无序的，例如：
	1号：23(下标)
	2号：5
	3号：11
	前面的编号（索引）是有序的，可是数据的具体位置是无序的

不同索引结构使用的时机：

如果数据非常少		：	那么索引就没有使用的必要

如果数据是有序的	：	两种都可以使用
如果需要的是某个范围	：	使用聚集索引
很多不同的值		： 	使用非聚集索引

在范围查询中不同索引的查找机制：

聚合索引：
	    找出范围开头和范围结尾的数据，并取出中间的数据，那么如果数据不是有序，
	是否会截取到某些不需要的数据？
	
	聚集索引的数据必然是有序的，因为成为聚集索引的字段会变为用平衡树存储

	数据库的数据是如何存储的，例如要根据时间截取，如果先对时间进行排序，
	再截取就不会出现其他数据，可是否很耗费资源
	
	在成为聚集索引的时候就会在磁盘里进行排序，因此只要一开始排序好，后面每次查询都不用排序了

非聚合索引：

	    非聚集索引，一个表可以有多个，每一个加了非聚集索引的列都会数据都会被复制一份出来，
	用平衡树存储，每个非聚集索引之间互相不关联，因此如果非聚集索引越多，占用的磁盘空间越多；
	    非聚集索引数据的查找方式是：先找到非聚集索引要查找的数据，然后找到那数据的主键，
	再根据主键去找聚集索引，因为实际上的数据并没有排序，只是在复制的数据被排序了，因此它
	还是无序的，所以非聚集索引说是等于建了一个目录也就理解了，如果没有聚集索引怎么办？
	


复合索引 compound index：
	
没加主键的表是无序的，加了主键的表就是加了约束，加了聚集索引的表是有序的，一般使用平衡树的结构存储

主键是不可重复的，而树的元素也是不可重复，如果是用平衡树存储的话，那么如果使用
主键列来进行查找就应该比其他列性能大大提升，数据越多提升越多
因此为什么很多时候不同的表为什么要使用id进行关联，并且互相保存对方的id，查找也
使用id查找，就算是id并不是必须的，也会使用，因为把id设置为聚集索引查找性能会提升

主键并不是聚集索引，sql server中，如果建立了主键，那么会默认为主键加上聚集索引，也可以在创建
时制定为非聚集索引，可见主键跟聚集索引并没有直接联系，并且主键是有唯一性的，而聚集索引的字段
是可重复的

索引为什么会使数据增加时的效率下降？
	因为平衡树每次增加数据都需要重新梳理（平衡）它的结构，因此数据除了增加，还需要整理，
所以增加删除的效率下降了，修改的话如果不是修改主键效率应该是提高吗？

如果聚集索引列的值改变了，那么就需要重新排列，那一条记录的所有值因为是在磁盘里排列的

复合索引：

前三条符合所有索引：
	1、需要加索引的字段，要在where条件中
	2、数据量少的字段不需要加索引
	3、如果where条件中是OR关系，加索引不起作用
	4、符合最左原则

复合索引就是一个索引包含了多个列，可以是聚集和非聚集索引

    一个查询可以只使用复合索引中的某些列，但只能是左侧的部分，类似于电话簿，例如名字是按照拼音排序，
那么首先可以查姓，然后查名，如果只有名，那么按照拼音排序的电话簿将无法快速查询，必须由左到右，
一步步缩小查询范围

    创建复合索引时，选择的列的顺序可以自定义

短索引：
	在使用索引查询的时候，如果查找的字段是字符串，很多情况下只需要前面几个字符就能确定
该字符是唯一的了，这时候可以只检索前面几-字符

索引字段最好设置为 not null：
    如果字段有null值的话，索引不会生效，个别数据库如果字段没有设置为not null,会直接认为有null值，
因为平衡树需要确定位置，而null无法比较

    使用like 匹配的时候，模糊匹配 % 不能在左边，只能让具体的字符在左边 % 在右边

    如果DBMS认为全盘扫描的效率会比使用索引高，这时候也不会使用索引，具体情况有：数据极少，因为
非聚集索引每次找到索引字段的数据后，还要根据该字段的引用找到具体数据，因此如果索引访问的次数多
于全盘扫描，也会使用全盘扫描

以下可能只有oracle存在：

如果使用运算，也会使索引失效：+ - * / 

检索的条件如果是字符串，而写成了整形也会失效

    使用>，<也会使索引失效，因为如果使用了这两个比较符，那么DBMS会认为可能将要查询的数据会是总数据
的大部分，这时候使用全盘扫描效率更高




