存储过程是一组sql语句集，目的是完成特定功能

存储过程也类似函数，用户调用需要指定 存储过程的名字和参数来调用

sql语句是先编译再运行，如果一条语句要执行多次，那么就需要编译多次，而写成存储过程，则只需要编译一次

创建一个最简单的存储过程（sql server）
create procedure 存储过程名
	as
		语句
	go
上面的存储过程没有接收任何参数

系统内置的存储过程：
sp_help	存储过程名	:	显示存储过程的信息
sp_helptext 存储过程名	:	显示存储过程源码
sp_depends 存储过程名	: 	显示与该存储过程相关的数据库对象，例如一些表
sp_stored_procedures 存储过程名 : 显示存储过程列表

可以看出系统存储过程都是sp_开头的，因此自定义的存储过程尽量别用sp_开头，以免混淆

存储过程重命名：
sp_rename 旧名, 新名

存储过程的语句修改：
alter procedure 存储过程名
as
	语句
go

如果不想自己的存储过程代码被别人获取,可以在alter和as间加一行：
with encryption

存储过程的删除：
drop procedure 存储过程名...(可以一次性删除多个)

DML触发器：
	触发器就是制定一个表，和触发条件，可以为delete、update、insert，如果执行了
设置的触发条件，那么该触发器就会被触发（执行触发器的sql），例如删除了一个用户，那么
用触发器把用户的其他信息也删除了，或做相应处理，也可以做验证，或者把删除的信息集中起来

触发器的执行时机：
	使用before 关键字：触发器的执行是在数据的插入.更新或删除之前执行的。
	使用after关键字：触发器的执行是在数据的插入.更新或删除之后执行的。
	触发器可以嵌套执行（触发器的语句触发其他触发器）

	但是嵌套执行是否使用可以自定义

递归触发器：
	直接递归：一个触发器被触发了，触发器所执行的语句又触发了同一个触发器
	间接递归：A触发器触发了B触发器，B触发器又触发了A触发器
	递归触发器是否使用可以自定义

DDL触发器：
	DDL触发器是指直接表级别以上的操作，不再是针对某一条记录
用处（包含挡不限于）：
	可以用来记录数据库的更改记录、防止对数据库的某些修改、在更改时做出响应

要查看触发器的信息所用到的函数跟存储过程一致

如果想看触发器会涉及到哪些表，或者一张表会被哪些触发器所影响，那么可以使用：
	sp_depends '触发器名' or '表名'

触发器可以禁用和启用，禁用时依然会存在，不过只是不会触发

触发器的删除、修改、重命名的语法不过多描述了，需要时在再找



存储过程：把sql集中起来使用，并可以接受参数,只需一次编译，是主动触发
触发器：执行制定语句时生效，是被动触发


















































