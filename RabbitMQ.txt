RabbitMQ是一个消息中间件

消息中间件：
    消息是指在应用中传送的数据，消息可以只包含字符串，JSON等，也可以很复杂，比如内嵌对象
    消息队列简称为MQ。是指利用高效可靠的消息传递机制进行与平台无关的数据交流，并基于数据通信来进行分
布式系统的集成，通过提供消息传递和消息排队模型，它可以在分布式环境下扩展进程间的通信

    消息队列一般有两种传递模式：
	点对点模式：
	    消息生产者发布消息到队列，消息消费者从队列中接受消息
	
	发布/订阅模式：
	    发布/订阅模式定义了如何向一个内容节点发布和订阅消息，这个内容节点称为主题，主题可以认为是消息
	传递的中介，消息发布者将消息发布到某个主题，消息订阅者从主题中订阅消息。主题使得发布者和订阅者互
	相保持独立，不需要接触就可以保证消息的传递，发布/订阅模式在一对多时广播采用

    消息中间件能在不同平台之间通信，它常被用来屏蔽各种平台以及协议之间的特性，其优点在于能够在客户和服务
器之间提供同步和异步的连接，并且在任何时刻都可以将消息进行传送或者存储转发，这也是它比远程过程调用更进步
的原因

    消息中间件的通信方式是异步的，比如应用A将消息发送给应用B，而这时应用B处于不运行状态，那么消息中间件就
会把消息保留起来，知道B应用开始执行并消费消息，这样还防止了应用A因为等待应用B消费消息而出现阻塞，这种方法
适用于对于时间无关或者并行处理的场景

消息中间件的作用：

	解耦：
	    在设计的时候预测将来的什么需求是比较困难的，消息中间件允许独立的扩展中间件两边的处理过程

	冗余(存储)：
	    当数据处理过程失败的时候，消息中间件可以吧数据进行持久化，直到他们被完全处理了，这样避免了数据
	丢失的风险、在一个消息被删除之前，处理系统必须明确地指出该消息已经被处理完成了，从而确保数据被安
	全地保存到使用完毕

	扩展性：
	    因为消息中间件解耦了应用的处理过程，所以提高消息入队和处理的效率是很容易的，只要增加额外的处
	理过程，比如MQ集群，不需要改代码

	削峰：
	    在访问量剧增的情况下，应用仍然要继续可用，但是这样的高并发并不常见，不值得按照这个标准投入资
	源，这是很大的浪费，使用消息中间件能使关键组件支撑突发访问压力，不会因为突发的超负荷请求而崩溃，
	也就是把所有需要处理的数据放到MQ中去，然后真正的处理程序再慢慢处理，只要平时有多余的计算资源，这
	些突然增长的访问总能处理完，这样做的坏处是不能及时处理，只适用于时间要求不严格的地方

	可恢复性：
	    当部分组件失效时，不会影响到整个系统；因为消息中间件是异步执行的，某个处理程序挂掉了，重新加
	入消息中间件后仍然可以在系统恢复后继续处理

	顺序保证：
	    消息中间件可以保证数据一定程度上的顺序

	缓冲：
	    消息中间件通过一个缓冲层来帮助任务高效率地执行，该缓冲层有助于控制和优化数据流经过系统的速度

	异步通信：
	    很多时候不需要立即处理的消息，消息中间件提供了异步处理机制，云溪把消息放入中间件，在之后需要
	的时候再慢慢处理

	RabbitMQ是采用Erlang语言实现的AMQP(高级消息队列协议)的消息中间件，最早起源于金融系统
	
	为了能够让消息在各个消息队列平台互通，JMS(Java Message Service)应运而生。JMS试图通过提供公共的
    Java API的方式隐藏单独MQ产品供应商提供的实际接口，从而跨越了壁垒，解决了互通的问题。Java程序只需要选
    择合适的MQ驱动即可，JMS会打理好其它部分。ActiveMQ就是JMS的一种实现。不过这种方式很脆弱，暴露出问题，
    使得应用程序变的更加脆弱，所以急需一种新的消息通信标准化方案

	AMQP是应用层协议的一个开放标准，以解决众多消息中间件的需求和拓扑结构问题。它为面向消息的中间件设
    计，基于此协议的客户端与消息中间件可传递消息，而不受产品和开发语言的限制。

	RabbitMQ服务器跟MySQL服务器一样是开机自启动的，它的经常名称是erlsrv.exe，因为它是erlang语言编写的
    ，这个应用下还有个子应用，那个子应用就是RabbitMQ了

	RabbitMQ有个默认用户，用户名和密码都是guest，这个账户限制只能通过本地访问

    添加新用户：
	rabbitmqctl add_user root root
    为root用户设置所有权限：
	rabbitmqctl set_permissions -p / root ".*" ".*" ".*"
    设置root用户为管理员角色：
	rabbitmqctl set_user_tags root administrator

生产者和消费者：
	
    生产者：Producer
	生产者就是投递消息的一方，生产者创建消息，然后发布到RabbitMQ中。消息一般包含两个部分：消息体
    (payload)和标签(Label)。在实际应用中，消息体一般是带有业务逻辑结构的数据，比如JSON字符串或者序列化数
    据，标签用来表述这条消息，比如描述消息属于那个交换器哪个路由键，RabbitMQ发送消息就是根据标签来发送的
    消费者：Consumer
	消费者连接到RabbitMQ服务器，并订阅到队列上，当消费者消费一条消息时，只是消费消息的消息体。在消息
    路由的过程中，消息的标签会丢弃，存入到队列的消息只有消息体，消费者也只会消费到消息体，并不知道生产者
    是谁，也不需要知道

    Broker：消息中间件的服务节点
	对于RabbitMQ来说，一个Broker可以看做一个服务节点，或者服务实例。大多数情况下，Broker也可以看做一
    台RabbitMQ服务器

    RabbitMQ消息生产到消费的流程：
	1、生产者创建好业务数据，可能是序列化数据
	2、指定交换器和路由键，也就是添加标签
	3、将消息发送至Broker
	4、消费者订阅并接收消息
	5、消费者拿到消息转为业务数据，可能经过反序列化

    如果多个消费者同时订阅同一队列，这时候队列中的消息会被平均分摊，既轮询给多个消费者进行处理，并不是每
个消费者都能收到所有的消息

    交换器：Exchange
	生产者投递的消息会先到交换器中，然后交换器将消息路由到一个或多个队列中，如果路由不到，或许会返回
    给生产者，或许会直接丢弃
	RabbitMQ有4种类型的交换器，不同的类型有不同的路由策略
	    fanout：把所有发送到该交换器的消息路由到所有绑定的队列中
	    direct：把消息路由到BindingKey和RoutingKey完全匹配的队列中 
	    topic：RoutingKey可以有多个单词，每个单词用.分开，只要这些单词能被BindingKey的规则匹配就会被
		   路由到对应的队列中，BindingKey可以使用*和#，其中*用于匹配一个单词，#匹配多个单词，同样
		   BindingKey可以使用.来分割单词，比如a.b.c的RoutingKey可以被a.*.c和a.#的BindingKey所匹配
	    headers：headers类型的交换器不依赖R路由键和绑定键来匹配路由消息，而是根据发送的消息内容中的
		     headers属性进行匹配，如果消息的headers完全匹配队列和交换器绑定时指定的键值对，消息会
		     路由到该队列，该类型的性能很差，而且不实用，所以基本不会使用

    路由键：RoutingKey
	生产者将消息发给交换器的时候，一般会指定一个RoutingKey，用来指定这个消息的路由规则，这个RoutingKey
    需要与交换器类型和绑定键(BindingKey)联合使用才能生效。在交换器和绑定建固定的情况下，生产者通过指定
    RoutingKey可以决定消息流向哪里

    绑定键：BindingKey
	RabbitMQ中通过绑定键将交换器与队列关联起来，在绑定的时候一般会指定一个绑定键，RabbitMQ通过绑定键
    将消息路由到正确的队列
    
    当路由键和绑定键相匹配的时候，消息会被路由到对应的队列中，在一个交换器绑定多个队列的时候，这些绑定允
许使用相同的BindingKey，绑定键并不是总是能生效，这依赖于交换器的类型，比如fanout类型的交换器就会无视绑定
键而将消息路由到所有绑定到该交换器的队列中

交换器和队列：

	所有的开发工作基本都在围绕连接和信道进行，一个连接工厂能创建多个连接，一个连接能创建多个信道，但
    是每个信道应该单独存在一个线程中，因为信道是非线程安全的，多线程情况下信道可能会出现通信帧交错

交换器相关方法：
    channel.exchangeDeclare方法：
	交换器声明的相关参数：
	    exchange：交换器名称
	    type：交换器类型
	    durable：是否持久化，决定了RabbitMQ重启后是否还会存在
	    autoDelete：是否自动删除，当这个交换器第一次被其它交换器或队列绑定后，一旦某一时刻没有任何绑
			定它的交换器或队列，这个交换器将会被删除
	    internal：是否内置，内置的交换器客户端无法直接发送消息，只能被其它非内置的交换器进行路由
	    argument：其它一些结构化参数
	这些重载方法都会返回一个Exchange.DeclareOK，客户端在声明一个交换器之后，需要等待服务器返回这个命
    令，如果返回则说明声明成功
	而channel.exchangeDeclareNoWait方法则是不需要服务器返回，这个方法的返回值是void，其它的地方都和普
    通的交换器声明方法差不多，这个方法有一个问题，那就是客户端声明一个交换器后，服务器还未完成交换器的创
    建，客户端就马上使用交换器了，这里会发生异常，因此没有特殊的缘由不推荐使用这个方法
	还有一个channel.exchangeDeclarePassive方法，这个方法主要用来检测交换器是否存在，只需要提供交换器
    名称，如果存在则正常返回，不存在则抛异常

    channel.exchangeDelete方法：
	exchange：要删除的交换器名称
	ifUnused：这个交换器是否只有在没被使用的情况下才会被删除

队列相关方法：
    channel.queueDeclare方法
	如果直接使用channel.queueDeclare(),就会声明一个名称为随机字符的队列，这个队列只在当前应用的同一个
    连接中可用，创建该队列的信道所属的连接下所有的信道都可共用，其它连接无法使用，并且该连接断开时该队列
    会自动删除，这种队列也称为匿名队列，声明队列时有几个参数：
	    queue：队列名
	    durable：是否持久化
	    exclusive：是否排他，排他队列只在连接内可用，连接断开时删除，即使它是持久化的，并且其他连接虽
		       然无法使用这个排他队列，但是依然无法声明相同名称的排他队列
	    autoDelete：是否自动删除，当这个队列第一次被消费者连接后，一旦某一时刻所有消费者都断开连接，
			这个队列才会被删除
	    argument：其它一些结构化参数
    而空参数声明的队列，queue=""、durable=false、exclusive=true、autoDelete=true

	如果声明的交换器或队列已存在，并且新声明的参数与前面已存在的声明参数一样，就什么都不做，并返回成
    功，如果参数不同则抛出异常

	同样，队列也有相似的queueDeclareNoWait、queueDeclarePassive、queueDelete、queueDeleteNoWait等方法
    ，其中queueDeleteNoWait方法有ifUnused和ifEmpty参数，ifUnused参数是队列没被连接时才会删除，ifEmpty是队
    列为空时才会删除
	channel.queuePurge方法用来清空队列的内容

队列绑定：
	channel.queueBind和channel.queueBindNoWait方法：
	    queue：队列名称
	    exchange：交换器名称
	    routingKey：路由键
	    argument：绑定的参数
队列解绑：
	channel.queueUnbind方法的参数和队列绑定基本一致

交换器与交换器绑定：
	channel.exchangeBind和channel.exchangeBindNoWait，参数与队列绑定类似

	交换器与交换器绑定，怎么决定绑定的交换器什么情况下把消息发给被绑定的交换器？所有都发还是根据交换
    器名称当路由键然后根据交换器类型匹配？

交换器与交换器解绑：
	channel.exchangeUnBind参数与队列解绑类似

发布消息：
	channel.basicPublish参数：
	    exchange：交换器名称，如果为空字符串则会发到RabbitMQ默认的交换器中
	    routingKey：路由键
	    props：这个对象可以设置一些属性，比如头信息、内容类型、用户id，消息id，消息超时时间等等
	    body：消息体，byte数组
	    mandatory：是否在消息无法匹配到队列时将消息返回给生产者，如果为false消息会直接丢弃
	    immediate：如果匹配到的队列上没有消费者，就不会将消息存入该队列，如果所有匹配的队列都没有消费
		       者，这条消息将会返回给生产者，这个参数RabbitMQ3.0移除了，理由是影响镜像队列的性能
		       ，增加代码的复杂性，建议采用TTL和DLX替代

	侦听不能被路由到任何队列的消息：channel.addReturnListener

消费消息：
	消费消息分推(Push)模式和拉(Pull)模式，推模式使用Basic.Consume，拉模式使用Basic.Get

    推模式(Consume)：
	推模式可以通过订阅的方式来消费消息，比如通过实现Consumer类或DefaultConsumer类，调用Consumer相关
    API时，不同的订阅采用不同的消费者标签来区分，就算再同一个信道中消费者也需要通过这个标签进行区分

	开始消费：使用channel.basicConsume方法，参数：
	    queueName：要消费的队列名
	    autoAck：是否自动确认消费，如果设置为false，每次接收到消息就要手动去调用basicAck方法确认
	    consumerTag：消费者标签
	    noLocal：是否不将同一个连接中生产的消息传给它的消费者
	    exclusive：是否排他
	    arguments：其它参数
	    callback：接收到消息后回调的对象，也就是Consumer方法的实现类

	客户端最多预先获取的消息数量：channel.basicQos方法，参数：
	    prefetchCount：数量，为0则表示无上限
	    prefetchSize：消费者能接受的总消息容量大小，单位为B，0表示无上限
	    global：为true则计算信道上所有消费者的未处理消息之和，为false则所有消费者各自计算自己的消息
	注意：这个方法对于拉模式(basicGet)无效，如果先设置了global为false，然后再设置true，RabbitMQ会保证
    两者都能生效，也就是单个消费者不能超过false的限制，总的消费者不能超过true的限制
	如果prefetchCount和prefetchSize同时设置了，那么两者会同时生效，也就是消息不能超过两者任意之一的限
    制

	消息确认：channel.basicAck方法，参数：
	    deliveryTag：消息标签，通过回调参数的envelope.getDeliveryTag方法获得
	    multiple：是否确认所有消息

	Consumer常用的重写方法：
	    handleShutdownSignal：当信道或连接关闭时调用
	    handleConsumeOk：会在其他方法之前调用，传入消费者标签
	    handleCancelOk和handleCancel：消费端在显式和隐式取消订阅时调用，显式取消：channel.basicCancel
	，这个方法会先触发handleConsumeOk，然后是handleDelivery，最后是handleCancelOk
	    
    拉模式(Get)：
	通过channel.basicGet方法单条地获取消息，返回一个GetResponese，参数：
	    queueName：队列名
	    autoAck：是否自动确认消费
	GetResponse可以获取到envelope，然后根据这个对象去确认消息

    区别：
	consume会将信道置为接受模式，在这期间RabbitMQ会不断地推送消息给消费者，持续到取消队列订阅为止，当
    然消息的数量还是会受到channel.basicQos的限制
	get会从队列获得单条消息，而不是持续订阅，也就是每次获取都要重新get，get不应该放在一个循环中代替
    consume，因为这样会严重影响RabbitMQ的性能
	如果要实现高吞吐量，消费者应该使用basicConsume方法

消费者的确认与拒绝：

    消息确认：
	为了保证消息从队列可靠地到达消费者，RabbitMQ提供了消息确认机制。消费者在订阅队列时，可以指定autoAck
    参数，如果为true，RabbitMQ会将发送出去的消息置为确认，然后从内存或磁盘中删除，而不管消费者是否真正消
    费到了这条消息，如果为false，RabbitMQ会等待消费者显式地回复确认信号，也就是调用channel.basicAck后将消
    息打上删除标记，然后再从内存或磁盘中删除
	如果autoAck设为false，RabbitMQ服务端中的消息会分成两个部分，一部分是等待投递，一个部分是已投递，
    未确认。如果RabbitMQ服务器一直没收到确认信号，并且该消费者已经断开连接，那么未被确认的消息会重新进入
    队列，等待下一个消费者

    消息拒绝：
	单条消息拒绝可调用channel.basicReject，参数：
	    deliveryTag：消息标签
	    request：是否将消息重新存入队列
	批量拒绝消息可调用channel.basicNack，参数：
	    deliveryTag：消息标签
	    multiple：为true则拒绝编号在deliveryTag之前的所有未被确认的消息，为false则只拒绝multiple
	    request：是否将消息重新存入队列
	消息如果重新排队，可以选择是否重新发给相同的消费者，通过channel.basicRecover，参数：
	    requeue：如果为false则会在消息重新排队的情况下将消息分配给上次相同的消费者，为true则可能会分
		     配给不同的消费者

连接关闭：
    通常在信道或连接关闭的时候会调用：
	channel.close();
	conn.close();
    但是信道的关闭不是必须的，因为在连接关闭的时候，属于它的信道也会自动关闭

    AMQP协议中，Connection和Channel采用同样的方式来管理网络失败、内部错误和显式关闭连接，它们的生命周期：
	Open：开启状态，代表当前对象可用
	Closing：正在关闭，当前对象被显示地调用close方法，这样会产生一个关闭请求，并等待关闭操作完成
	Closed：已关闭状态，当前对象已经接收到所有的内部对象已经关闭的通知，并且自身也关闭了
    conn和channel最终都会成为closed状态，无论是程序正常关闭还是客户端异常或网络异常

    可以通过为信道或连接注册关闭侦听器来监听关闭的连接或信道，相关方法：
	channel或conn.addShutdownListener：注册侦听器
	channel或conn.removeShutdownListener：删除侦听器
    侦听器会在连接或信道进入Closed状态时触发，如果侦听器注册的连接或信道是已关闭状态，那么会马上触发，侦
听器触发会回调一个ShutdownSignalException对象，这个对象的isHardError方法如果为true就是连接因为关闭，如果
为false就是信道关闭，这关系到getReference()方法能获取到连接对象还是信道对象


生产者运行流程：
	1、生产者连接到RabbitMQ Broker，建立一个连接，开启一个信道
	2、生产者声明一个交换器，并设置属性，比如交换器类型、是否持久化等
	3、生产者声明一个队列并设置属性，比如是否排他、是否持久化、是否自动删除等
	4、生产者通过路由键将交换器和队列绑定起来
	5、生产者发送消息至RabbitMQ Broker，其中包含路由键、交换器等信息
	6、交换器根据收到的路由键查找匹配的队列
	7、如果找到，则将从生产者发送过来的消息存入所匹配的队列中
    	8、如果没找到，则根据生产者的配置选择将消息丢弃或者回退给生产者
	9、关闭信道
	10、关闭连接

消费者的运行流程：
	1、消费者连接到RabbitMQ Broker，建立一个连接，开启一个信道
	2、消费者向RabbitMQ Broker请求消费相应队列中的消息，可以设置相应的回调函数，以及做一些准备工作
	3、等待RabbitMQ Broker回应并投递相应队列中的消息，消费者接受消息
	4、消费者确认(ack)接受到的消息
	5、RabbitMQ从队列中删除已经被确认的消息
	6、关闭信道
	7、关闭连接

	注意：如果消费者在一个信道上订阅了一个队列，那么将无法再声明队列，必须先取消订阅，然后将信道置为
    传输模式之后才能声明

Broker：任务代理，或者服务提供方？

AMQP协议：
	
	AMQP协议本身包括三层：
	    Module Layer：协议的最高层，主要定义了一些供客户端调用的命令，客户端可以用这些命令实现自己的
	业务逻辑，例如Queue.Declare声明队列或者Basic.Consume订阅队列
	    Session Layer：协议的中间层，主要将客户端的命令发送给服务器，再将服务器的应答返回给客户端，为
	客户端与服务器之间的通信提供可靠性同步机制和错误处理
	    Transport Layer：协议的最底层，主要传输二进制数据流，提供帧处理、信道复用、错误检测和数据表示

	    AMQP协议是应用层的协议，可以看做一系列结构化命令的集合，每个命令代表一种操作，类似于HTTP中的
	GET、POST、PUT等方法

	    RabbitMQ可以看做是AMQP协议的具体实现

备份交换器(Alternate Exchange)，简称AE：
	如果生产者设置了mandatory参数，那么信息未被路由将会丢失，如果设置了为true，那么需要添加ReturnListener
    的逻辑，生产者的代码将变得复杂。如果不想丢失消息，又不想增加ReruenListener的逻辑，那么可以使用AE，未
    被路由的消息存储在RabbitMQ中，可以在需要的时候再去处理这些消息
	
	可以在声明交换器的时候添加alternate-exchange参数来创建，也可以通过策略的方式实现，两者同时使用那
    么前者会覆盖后者的设置

	声明一个队列时，指定参数的key为alternate-exchange，value为备份交换器的名称，然后如果该队列出现没
    有队列可路由时就会将消息发送给备份交换器，备份交换器会将该消息记录路由给绑定它的队列
	
	如果备份交换器不存在、备份交换器没绑定队列、备份交换器没匹配到任何队列，出现这几个情况都会导致消
    息丢失，如果备份交换器与mandatory同时使用，那么mandatory参数将会失效

过期时间TLL(Time to Live)：
	有两种设置消息TTL的方法：
	    队列设置：
		队列中所有消息都有相同的过期时间，通过添加参数x-message-ttl实现，单位是毫秒
	    消息设置：
		每条消息可以有不同的过期时间，通过在channel.basicPublish的时候添加expiration参数，单位毫秒

	    如果ttl为0，则表示除非消息可以马上投递给消费者，不然会立即丢弃
	    两种一起用：以两者之间较小的数值为准
	    两种方式删除的时机不同：队列设置的TTL由于会超时的都是队列头的，也就是先进去的，所以队列只要从
	队列头往下删除过期消息就好了，遇到第一个不过期的后面肯定都没过期，而消息设置的TTL则是无规则的，如
	果要一个个排查会很麻烦，因此消息设置的会在消费的时候才删除

	消息一旦超过TTL值就会变成死信

	队列的TTL：
	    在声明队列时使用x-expires参数，值是超时时间，单位为毫秒，不过不能为0
	    前提是队列没有任何消费者，也没有被重新声明，并且过期这段时间也没调用过basicGet命令
	    RabbirMQ重启后，持久化的队列过期时间会被重新计算
	    
死信交换器(DLX Dead Letter Exchange)：

    消息一旦变成死信，它能被重新发送到DLX交换器中，绑定到DLX的队列就称为死信队列，消息变成死信的情况：
	1、消息被拒绝，并且request设置为false，也就是不重新加入队列
	2、消息过期
	3、队列达到最大长度

    通过在声明队列的时候设置x-dead-letter-exchange参数来为队列添加DLX，值为交换器名，因为产生死信的几种方
式都是在队列内发生的，因此死信要给队列设置,通过设置x-dead-letter-routing-key来指定路由给死信交换器消息的
路由键

    DLX可以在消息不能被正确消费的情况下分析私信队列中的内容来分析当时的异常情况，鸡儿改善和优化系统

延迟队列：
	AMQP协议或RabbitMQ本身不支持延迟队列，但是可以通过DLX和TTL模拟出延迟队列的功能

	延迟队列通过在第一个交换器中设置队列的过期时间，等队列里的消息过期后消息就会进入死信交换器，死信
    交换器再把延迟的消息路由到相应的队列，队列的过期时间就是延迟时间，可以声明多个队列，每个队列有不同的
    过期时间，这样就可以达到有多种不同延迟时间消息的效果

优先级队列：
	优先级队列可以使队列内的消息具有不同优先级，优先级高的消息会优先被消费，通过在声明队列时设置x-max-priority
   属性可以定义优先级队列，这个属性的值是数字，代表着最高能定义的优先级

	使用优先级队列，通过在发布消息的时候，设置AMQP.BasicProperties.Builder实例的priority方法来设置优
    先级，这个实例可以在发布的时候当做参数传进去，优先级最低为0，优先级最高为队列声明时指定的x-max-priority
    属性

	如果消费速度大于生产速度，并且Broker中没有消息堆积，那么优先级就没有什么意义

实现RPC：
    MQ版RPC的流程：
	1、客户端创建一个匿名的队列(直接声明队列，不加任何参数会自动创建随机队列名)
	2、客户端准备两个参数：replyTo(服务有结果后回调的队列，就是前面创建的匿名队列)、correlationId(标
    记每一个请求的ID，用来区分服务回复的是哪一个请求)
	3、将这个请求发送到服务的队列中
	4、服务处理好请求后将结果根据replyTo发送到指定队列，并带上所处理请求的correlationId
	5、客户端监听它创建的匿名队列，当有消息时，检查correlationId属性，如果与请求匹配，那么就是结果了
	
持久化：

    持久化可以防备在异常情况(重启、关闭、宕机)下的数据丢失，RabbitMQ的持久化分为三个部分：交换器的持久化
、队列的持久化和消息的持久化
	
    交换器的持久化：
	交换器的持久是通过声明队列时将durable参数设置为true，如果交换器不设置为持久，那么在RabbitMQ服务重
    启后，相关的交换器元数据会丢失，但是消息不贵丢失，只是消息不能发送到这个交换器中了，长期使用的交换器
    建议设置为持久化

    队列的持久化：
	队列的持久化是通过在声明队列时将durable参数设置为true，如果队列不设置持久化，那么在RabbitMQ服务重
    启后，相关队列的元数据会丢失，由于消息存储在队列中，队列没了消息当然也会丢失
	队列的持久化能保证其本身的元数据不会丢失，但是并不能保证内部所存储的消息不会丢失

    消息的持久化：
	消息的持久化通过在发布消息时将props参数的deliveryMode属性设置为2即可实现，常用的MessageProperties.PERSISTENT_TEXT_PLAIN
    实际上就是封装了这个属性，并设置为2，如果不设置消息的持久化，重启后消息会丢失

    如果只设置队列的持久化，重启后队列虽然存在，但是队列中的消息会丢失，如果只设置消息的持久化，因为消息
是依附队列存在的，因此队列没有了消息也会丢失，因此单单设置队列或消息的持久化显得毫无意义

    可以将所有的消息都设置为持久化，但是这样会严重影响RabbitMQ的性能，因为写入磁盘的速度比写入内存的速度
慢得多，如果可靠性不高的消息可以不采用持久化处理以提高整体的吞吐量，在设置持久化时应该在可靠性和吞吐量之
间做一个权衡

    将交换器、队列、消息都设置了持久化之后也不能百分比保证数据不丢失
    比如在消费者这边将autoAck设置为true，如果服务器将消息发送给消费者之后就自动确认了，而消费者接受到消息
后来不及处理就宕机了，这样 数据也算丢失，这种情况将autoAck设置为false就行了
    还有，在持久化的消息正确存入RabbitMQ之后，还需要有一段时间才可能存入磁盘中(虽然很短)，RabbitMQ不会为
每条消息都进行同步存盘(调用内核的fsync方法)，可能仅仅保存到操作系统的缓存中而不是物理磁盘中，如果在这段时
间内RabbitMQ服务节点发生了宕机、重启等情况，消息还没来得及存入磁盘，这些消息将会丢失
    这个问题可以通过RabbitMQ的镜像队列机智解决，相当于配置了副本，如果主节点挂掉了，可以自动切换到从节点
，这样有效的保证了高可用，除非整个集群都挂掉了。虽然这样也不能完全保证消息不丢失，但是配置镜像队列的可靠
性会高很多，在实际生产环境中的关键业务队列一半都会设置镜像队列
    还将可以在发送端引入事务机制或者发送方确认机制来保证消息已经正确发送并存储至RabbitMQ中，前提是保证调
用channel.basicPublish方法时交换器能将消息正确路由到相应的队列中

生产者确认：
    使用RabbitMQ的时候，消息的生产者通常不知道消息有没有正确地到达服务器，RabbitMQ针对这个问题提供了两种
解决方式：
	1、通过事务机制实现，相关方法：
	    channel.txSelect：将当前信道设置成事务模式
	    channel.txCommit：事务提交
	    channel.txRollback：事务回滚	
	txSelect开启事务之后，如果txCommit能提交成功，则消息一定到达了RabbitMQ中，因为提交成功是一定需要
    服务器回应的，如果在提交之前由于异常崩溃了，可以使用txRollback方法回滚，RabbitMQ的事务机制与大多数数
    据库中的事务不是同一个概念，这里的事务只是确保消息能正确地发送至RabbitMQ，事务机制会严重降低RabbitMQ
    的消息吞吐量，因为事务机制在发送一条消息后使发送端阻塞，以等待RabbitMQ的回应

	2、通过发送方确认机制实现，相关方法：
	    channel.confirmSelect：将信道设置为confirm模式
	    channel.waitForConfirms：等待RabbitMQ确认后返回，为true就是成功，重载的方法有timeout参数
	    channel.waitForConfirmsOrDie：等待RabbitMQ确认或失败后返回，失败会抛异常，重载的方法有timeout参数
	    channel.addConfirmListener：异步confirm方法，添加侦听器，实现成功和失败的方法让服务器回调
	    channel.getNextPublishSeqNo：返回一个由信道自己维护的下一次发布消息时将会带上的标签
	    生产者将信道设置成confirm(确认)模式，在该信道上发送的每一条消息都会被指派一个唯一的ID(从1开始
	)，一旦消息被投递到所匹配的队列后，RabbitMQ就会发送一个Basic.Ack(确认)给生产者，这个Ack包含生产者
	指派的那个ID，这使得生产者知道哪条消息已经正确到达了目的地，如果消息和队列是持久化的，那么Ack会在
	写入磁盘后发出。如果RabbitMQ设置了channel.basicAck中的multiple参数，则表示当前这个序号之前的所有
	消息都已经处理了
	    发送方确认机制的好处是，生产者发送一条消息后，可以马上发送第二条，服务器反馈用异步的方式来处
	理
	    如果RabbitMQ因为内部的错误导致消息丢失，就会发送一条Basic.Nack命令，生产者可以在回调方法中处
	理该命令
	
    发送方确认机制的两种处理方式：
	1、批量confirm：
	    通过channel.waitForConfirms方法，每发送一批消息后调用一次，等待服务器确认返回，如果返回true，
	就说明成功了，如果返回false或者抛异常，那么刚才发送的消息就需要重发一遍了，也就是每次消息都要缓存
	，实际上waitForConfirms方法也是通过异步的方式处理的，通过一个SortedSet<Long>集合来维护消息序号，
	每次都会判断nextPublishSeqNo属性是否大于0，如果大于就往集合里加，然后+1，初始值是0，confirm就是把
	这个值=1
	    批量confirm如果出现连续的失败，那么效率下降会非常严重，因为每次都要重发大量消息

	2、异步confirm：
	    提供一个回调方法，服务器确认了一条或多条消息后客户端会回调这个方法进行处理
	    通过channel.addConfirmListener方法，实现ConfirmListener类的handleAck和handleNack方法，会分别
	在确认成功和失败时调用这个回调，传入两个参数，分别是delivertTag和multiple，前者是消息的标签，可通
	过channel.getNextPublishSeqNo获取，后者是标识当前标签前面的所有消息的处理结果是否也相同

    注意：
	事务机制和发布确认机制是相斥的，两者不能同时开启，如果开启了其中一个又开启另外一个RabbitMQ就会报
    错
    
消息分发：
	当RabbitMQ有多个消费者时，队列的消息将会以轮询的方式发给消费者，每条消息只会发送给订阅列表中的一
    个消费者。由于机器性能不一样或者任务不同，有些机器负责的任务比较繁重(因为不止负责处理当前这个消息)，
    会造成某些机器任务繁重，而有些任务却进程空闲。因此需要用到channel.basicQos，限制信道上消费者所能保持
    的最大未确认消息数量

消息的顺序性：
	消息的顺序性是无法保证的，因为有很多例外情况，比如消息被拒绝，进而重新进入队列，或者消息在confirm
    模式下发生超时中断等情况后进行补偿发送，又或者延迟队列，这些行为都会使消息的顺序打乱，因此要保证RabbitMQ
    的顺序应该在业务方面进一步处理，比如在消息体类添加全局标识ID来实现

消息传输保障：
    一般的消息中间件消息传输保障分为三个级别：
	At most once：最多传输一次，消息可能会丢失，但绝不会重复传输
	At least once：最少传输一次，消息绝不会丢失，但可能会重复传输
	Exactly once：恰好传输一次，消息肯定会传输一次，且仅传输一次
    最多一次是生产者随意发布，消费者随意消费，当然这样难以避免消息丢失
    最少一次是生产者使用事务机制或发布确认机制，然后用备份交换器，消息队列都持久化，并且消费者不开autoAck
    恰好一次是RabbitMQ目前无法保障的，因为如果在生产的时候或者消息确认的时候发生网络异常，这时候客户端或
服务器就会进行重复生产或不会对消息确认删除，前者造成多次生产后者造成多次消费
    目前大多数主流的消息中间件都没有消息去重机智，也不保障恰好一次。因此去重一般在客户端实现，比如引入全
局ID，借助redis等其他产品进行去重

RabbitMQ管理：
	
	每一个RabbitMQ服务器都能创建虚拟的消息服务器，称之为虚拟主机，简称vhost。
	每一个vhost本质上都是一个独立的小型RabbitMQ服务器，拥有自己独立的交换器、队列以及绑定关系，并且
    有自己独立的权限。vhost就像是虚拟机和物理服务器一样，他们各个实例间提供逻辑上的分离，将同一个RabbitMQ
    中的多个客户区分开，米面了队列和交换器等命名冲突。vhost之间是绝对隔离的，这样既保证了安全性又确保了可
    移植性。如果RabbitMQ达到了一定的规模，可以对业务功能、场景进行区分，并为之分配独立的vhost。

	用户连接服务器的时候必须指定一个vhost。RabbitMQ创建的默认vhost是“/”，这个vhost默认的用户名与密
    码都是guest，为了安全和方便，建议重建一个新用户来访问。

    创建新的vhost：
	rabbitmqctl add_vhost {vhost_name}：用来添加新的vhost，vhost名称为vhost_name所指定参数
	
    查看所有vhost的信息：
	rabbitmqctl list_vhosts [name] [tracing]：查看vhost的相关信息，这两个参数是固定并可选的，加了哪个
    就会显示哪个信息
	
    删除vhost：
	rabbitmqctl delete_vhost {vhost_name}：删除指定的vhost_name，删除vhost之后，其下所有的队列、交换
    器、绑定关系、用户权限、参数和策略等信息都会被删除

	RabbitMQ中，创建一个用户时，用户通常会被指派给至少一个vhost，并且只能访问被指派的vhost内的队列、
    交换器和绑定关系，RabbitMQ中的权限是在vhost级别对用户授权，因此用户只能在对他进行授权了的vhost上访问

    授权：
	rabbitmqctl set_permissions [-p vhost] {user} {conf} {write} {read}：
	    vhost：用户可访问的vhost名称
	    user：为哪个用户授权
	    conf：用户在哪些资源上有可配置权限的正则，也就是队列交换器的删除创建之类
	    write：用户在哪些资源上拥有可写权限的正则，也就是发布消息
	    read：用户在哪些资源上拥有可读权限的正则，也就是读取消息和清空队列
	    某些行为需要同时具备可配置、可读和可写，比如死信交换器和备份交换器的声明
	    示例：rabbitmqctl set_permissions -p vhost2 root "^queue.*" ".*" "./"：让root用户配置vhost2中
	queue开头的资源，并读写任意资源

    清除权限：
	rabbitmqctl clear_permissions [-p vhost] [username]：禁止用户访问某个vhost

    查看权限：
	rabbitmqctl list_permissions [-p vhost]：显示该vhost的权限信息
	rabbitmqctl list_user_permissions {username}：显示用户的权限信息

    rabbitmqctl是用来管理RabbitMQ中间件的命令行工具，它通过连接各个RabbitMQ节点来执行所有操作，标准语法：
	rabbitmqctl [-n node] [-t timeout] [-q] [command] [command options...]
	[-n node]：默认是rabbit@hostname,hostname是主机名，这个主机名指向RABBITMQ_NODENAME参数
	[-q]：开启quiet模式，可以屏蔽一些消息的输出，默认不开启
	[-t timeout]：操作超时时间，单位为秒，只适用于list_xxx类型的命令，默认无穷大
	
    创建用户：
	rabbitmqctl add_user {username} {password}：创建用户名并指定密码

    修改密码：
	rabbitmqctl change_password {username} {newpassword}：修改该用户的密码为指定密码
	
    清除密码：
	rabbitmqctl clear_password {username}：清除完密码之后用户就无法再通过密码登录了

    验证用户：
	rabbitmqctl authenticate_user {username} {password}：验证用户密码是否匹配

    删除用户：
	rabbitmqctl delete_user {username}：删除指定用户

    查看所有用户：
	rabbitmqctl list_users：会显示用户名称和角色

    设置用户角色：
	rabbitmqctl set_user_tags {username} {tags}：为指定用户设置角色，多个角色之间用逗号隔开，每次重新
    设置都会覆盖上次的设置，如果不填写tags，那么角色就会为空

	用户角色分类：
	    none：无任何角色，新建用户都是这个
	    management：可以访问Web管理页面
	    policymaker：包含management的所有权限，并且能管理策略和参数
	    monitoring：包含management的所有权限，并且可以看到所有连接、信道及节点信息
	    administartor：代表最高权限，可以管理所有东西

Web管理：
	
	由于rabbitmqctl工具不太友好，RabbitMQ开发团队开发了RabbitMQ management插件，这个插件同样是Erlang
    语言编写的，并且与RabbitmQ服务运行在同一个Erlang虚拟机中
	RabbitMQ management插件可以提供Web管理界面来管理虚拟主机、用户、队列、交换器、绑定关系、策略、参
    数等，还能监控RabbitMQ服务的状态和数据统计

	RabbitMQ提供了很多插件，默认存放在$RABBITMQ_HOME/plugins目录下，.ez为后缀的文件就是RabbitMQ的插件
    
    插件相关指令：
	rabbitmq-plugins [-n node] [command] [options]：rabbitmq-plugins指令的基本语法

	rabbitmq-plugins enable [plugin-name]：启动指定插件

	rabbitmq-plugins disable [plugin-name]：关闭指定插件

	rabbitmq-plugins list：查看插件的使用情况

	rabbitmq-plugins enable rabbitmq_management：启动Web管理插件，同时还会隐式启动其它相关插件

    在启动Web管理插件后，再重启RabbitMQ服务就能通过localhost:15672来访问Web管理界面了，localhost只能通过
guest用户访问，如果通过指定ip访问，那么登录的用户必须具有非node权限，Web管理界面同样能做到管理用户、队列
、交换器等功能，管理是指增删改查等

    如果出现登录Web管理界面出现没有内容，只有页面头，可以尝试清空浏览器缓存

应用管理：

    用于管理整个rabbitmq服务器，比如停止服务器进程等

	rabbitmqctl stop [pid_file]：停止RabbitMQ的虚拟机和RabbitMQ服务应用，pid_file是通过rabbitmq-server
    命令启动RabbitMQ服务时创建的，默认情况下放于Mnesia目录中，可以通过RABBITMQ_PID_FILE这个环境变量去修改
    存放路径。如果指定了pid_file，就需要等待pid_file里指定的pid进程结束。如果使用rabbitmq-server -detach
    来启动RabbitMQ，则不会生成pid_file文件

	rabbitmqctl shutdown：停止RabbitMQ的虚拟机和服务应用。这个命令会一直阻塞到Erlang虚拟机进程退出。
    如果RabbitMQ没有成功关闭会返回一个非0值。与stop不同的是它不需要指定一个pid_file
    
	rabbitmqctl stop_app：只停止RabbitMQ服务应用，Erlang虚拟机依然保持运行
	
	rabbitmqctl start_app：启动RabbitMQ应用

	rabbitmqctl wait [pid_file]：等pid_file创建好，并且里面代表的进程启动，然后再启动RabbitMQ应用

	rabbitmqctl reset：将RabbitMQ节点重置到最初的状态，将会从集群中删除此节点，从管理数据库中删除所有
    的配置，比如用户、vhost等，删除所有持久化消息，执行这个命令之前必须先停止RabbitMQ应用

	rabbitmqctl force_reset：强制重置RabbitMQ节点，无论当前管理数据库状态和集群配置。一样需要先停止

	rabbitmqctl rotate_logs {suffix}：让RabbitMQ切换一个日志文件，如果指定suffix，RabbitMQ会将原来的
    日志文件追加到文件名为“原日志文件名+suffix”的文件中，然后删除原日志文件，接着创建一个与原日志文件名
    相同的文件，用来记录新的日志。如果原日志文件本来就不存在，就会重新创建。如果不指定suffix，则日志文件
    只会重新打开，而不进行文件轮换
	总的来说就是将旧日志内容切换到新日志里，然后创建新文件存放新日志
	
	rabbitmqctl hipe_compile {directory}：RabbitMQ会用HIPE(high performance Erlang)编译自己的部分代码
    ，保存到{directory}指定的目录中。如果这个目录不存在则会自己创建。并且会删除这个目录中原有的所有.beam
    后缀的文件，这个后缀是Erlang编译后的格式。如果要使用预编译，则需要设置RABBITMQ_SERVER_CODE_PATH这个环
    境变量来指定高性能编译调用的路径

集群相关指令：
	
	这部分等看了第7章集群部分后再补充

服务端状态：

	rabbitmqctl list_queues [-p vhost] [infoItem...]：查看所有队列，如果显示的奇怪可能是因为没有任何队列
	    -p vhost：vhost代表不同的虚拟主机，如果不填这个选项默认为/
	    infoItem：代表要显示的属性，如果不填默认为队列名称和消息个数，可选属性如下：
		name：队列名称
		durable：是否持久化
		auto_delete：是否自动删除
		arguments：队列参数
		policy：队列上的策略名称
		pid：队列关联的Erlang进程的ID
		owner_pid：处理排他队列连接的Erlang进程ID，如果队列是非排他，此值为空
		exclusive_consumer_pid：订阅到此排他队列的消费者相关信道关联的Erlang进程ID，如果队列是非排他，此值为空
		exclusive_consumer_tag：订阅到此排他队列的消费者的consumerTag，如果队列是非排他，此值为空
		messages_ready：准备发送给客户端的消息个数，不包括已发送未被应答的
		messages_unacknowledged：已发送给客户端未被确认的消息个数
		messages：准备发送给客户端和未应答消息的总和，也就是总消息数目，发送完未被应答就暂时不会再次发送
		messages_ready_ram：在内存中messages_ready消息的个数
		messages_unacknowledged_ram：在内存中messages_unacknowledged的个数
		messages_ram：内存中消息的总数
		messages_persistent：队列中持久化消息的个数，非持久化队列是0
		messages_bytes：队列中所有消息大小的总和，不包括消息属性和其它开销
		messages_bytes_ready：准备发送给客户端的消息大小总和
		messages_byes_unacknowledged：发送给客户端未被应答的消息大小总和
		messages_bytes_ram：内存中的messages_bytes
		messages_bytes_persistent：队列中持久化的messages_bytes
		disk_reads：队列启动后从磁盘中读取该队列的消息总次数
		disk_writes：队列启动开始向磁盘队列写消息的总次数
		consumer：消费者数目
		consumer_utilisation：队列中的消息能立刻投递给消费者的比率，介于0和1之间，受网络和Basic.Qos的影响
		memory：与队列相关的Erlang进程所消耗的内存直接数，包括栈、堆和内部结构
		slave_pids：如果队列是镜像的，列出所有slave镜像的pid
		synchronised_slave_pids：如果队列是镜像的，列出所有已经同步的slave镜像的pid
		state：队列状态，正常状态是running，如果队列正常同步数据可能会是syncing，MsgCount状态，如果队列所在
		       节点掉线了，则显示为down

	rabbitmqctl list_exchanges [-p vhost] [infoItem...]：返回交换器的详情，vhost默认为/，
		-p vhost：显示vhost的交换器
		name：交换器的名称
		type：交换器类型
		durable：是否持久化
		auto_dalete：是否自动删除
		internal：是否内置
		arguments：其它结构化参数
		policy：交换器上的策略名称
	
	



















