OAuth2.0：
    简介：
	OAuth是一种授权机制，主要用来颁发令牌(token)，token与密码的区别在于：密码可以被修改，并且长期有效
，密码一般具有完整权限，而token具有时效性，且无法修改，且token有权限范围，只读token比读写token更加安全，
短期之内token是有效的，因此泄露token和泄露密码的后果是一样的

	OAuth的本意是一个应用允许另一个应用在用户授权的情况下访问自己的数据,OAuth 的设计本意更倾向于授权
而非认证（当然授权用户信息就间接实现了认证）

	OAuth有两种角色：客户端和资源所有者，资源所有者同意后，资源服务器可以向客户端颁发令牌，OAuth的核
心就是向第三方应用颁发令牌

    常用概念：
	Authentication：身份认证
	    用于鉴别访问者是否合法用户
	Authorisation：授权
	    用于决定被授权的用户有访问哪些资源的权限

    四种获得令牌的流程：

	不管用哪种授权方式，第三方应用申请令牌之前都必须先到系统备案，说明自己的身份，然后拿到客户端ID和
    客户端密匙(client ID and client secret)，为了防止令牌被滥用，没有备案过的第三方不会拿到令牌

	授权码：
	    最常用也是安全性最高的方式，适用于有厚度按的Web应用。授权码通过前端传送，token则是储存在后端，
	所有与资源服务器的通信都在后端完成，这样前后端分离，可以避免令牌泄露
	    第一步：用户发起请求：/auth/oauth/token?username=yirongts&password=rKu1%2F348LvKp0rsVC06eCA%3D%3D&grant_type=password&scope=server
		分别是用户名、密码和授权范围等信息
	    第二步：后端去校验是否同意授权，如果同意则返回授权码
	    第三步：用户拿到授权码之后再去向服务器用授权码请求token
	    第三步：用户拿到token之后就可以给Web服务器发送请求了，并且在在请求参数或者header里带上token给
		服务器校验
		
	隐藏式：
	    有些Web应用时纯前端应用，没有后端，这时就必须将token存在前端，隐藏式就是允许直接向前端颁发令
	牌。这种方式没有授权码的步骤，所以称为隐藏式，这种方式很不安全，只适用于安全性要求不高的场景，并
	且有效期非常短，通常是会话期间有效，浏览器关了token就失效了
	    第一步：服务器提供一个连接给客户端访问
	    第二部：客户端访问之后服务器就会重定向到指定网址，并附带上令牌作为参数，参数以锚点的方式传输
	，而不是参数，减少了泄露风险

	密码式：
	    第三方网站要求客户端提供账户和密码，然后拿着账户和密码直接向服务器申请授权，服务器在校验过密
	码和账户之后直接返回token,这种方式必须是用户高度信任的应用才能使用
	    第一步：用户在第三方应用输入用户名和密码，然后第三方去Web服务器请求token
	    第二步：Web服务器校验通过之后直接返回token

	凭证式：
	    凭证式适用于没有前端的命令行应用，即在命令行下请求令牌，这种方式给出的令牌是针对第三方应用的
	，可能多个用户共用一个令牌
	    第一步：A应用向B发出请求，附带clientID、ClientSecret、GrantType等信息
	    第二部：B应用验证通过后返回token
	
	令牌拿到之后就可以向颁发令牌的服务器请求数据了，每次请求都必须带有令牌，具体做法是在请求头加上一
    个Authorization字段，令牌就放在这个字段里面，例子：Authorization: Bearer token

	OAuth2.0允许用户自动更新令牌，具体做法是，B网站颁发令牌的时候，一次性颁发两个令牌，一个用于获取数
    据，另一个用于获取新的令牌，只要grant_type=refresh_token，服务器就会在验证通过后颁发新的令牌

	OAuth就是定义了一种token授权的机制，也可以说是一种规范

JWT：
   简介：
	JWT是JSON Web Token的缩写，是一种跨域身份验证的解决方案，OAuth说明了授权需要一个token，而JWT则是
    token的具体实现

	一般服务器身份验证过程如下：
	    1、用户向服务器发送用户名与密码
	    2、服务器验证过后，将生成一个session_id，并将用户相关数据保存在这个session_id关联的会话中
	    3、服务器向用户返回session_id，这个信息会写入到用户的Cookie中
	    4、用户的每个请求都通过在Cookie中取出session_id传给服务器
	    5、服务器通过收到的session_id对比之前保存的session_id集合，确定session_id对应的用户身份
	    在Servlet中这个session_id的名称为JSESSIONID

	这种模式如果使用一个服务器的话完全没有问题，但是如果他是服务器集群或者面向服务的跨域体系架构的话
    ，则需要一个统一的session数据库来保存会话信息，实现全局会话数据共享，这样负载均衡下的每个服务器才能正
    确的验证用户身份

	一种解决方案是通过缓存服务器，比如redis，收到请求后，通过redis请求数据，如果该session_id存在redis
    中，就获取该id对应的数据，这样做的缺点是架构比较费劲，整个验证逻辑层都需要重写，工作量较大，如果redis
    出现问题，整个认证体系都会挂掉

	还有一种就是客户端保存数据，服务器不保存会话数据，JWT就是这种解决方案的代表

	JWT的原则是在服务器身份验证后，生成一个JSON对象，并将其发送给用户，比如{"username":"boc","role":
    "admin","expire":"2019-12-12 12:12:12"}，之后服务器就依赖这个JSON对象对识别用户，为了防止用户篡改数据
    ，服务器在生成对象时添加签名，签名的就是用这个JSON对象进行的，因此JOSN对象如果不一致签名结果也会不一
    致，服务器不会保存任何会话数据，因此服务器变为无状态，使其更容易扩展

	返回的token分两种，分别是access token和refresh token，access token是用来访问资源API的，并且它是有
    时效性的，也就是到时间会过期；而refresh token则是用来刷新token的，也就是如果access token要过期了，就
    可以使用refresh token去获取新的access token。当然refresh token不是必须的，这需要根据请求方式和资源类
    型去决定

	JWT的实际数据：
	    eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VySWQiOiJiMDhmODZhZi0zNWRhLTQ4ZjItOGZhYi1jZWYzOTA0NjYwYmQifQ.-xN_h82PHVTCMA9vdoHrcZxH-x5mb11y1537t3rGzcM
	是这么一长串，前面的两节是可以解析出来的公开数据，因为只是进行了base64URL编码，因此JWT只是保证了
	数据没有被篡改

    JWT的数据结构：
	JWT的数据分为3个部分：

	    JWT头：
		JWT头是一个描述JWT元数据的JSON对象，通常如下所示：
		    {"alg":"HS256","typ":"JWT"}，alg代表签名算法，typ代表令牌类型
	
	    有效载荷：
		有效载荷是JWT的主体部分，也是一个JSON对象，包含需要传递的数据，JWT指定7个默认字段供选择：
		    iss：发行人
		    exp：到期时间
		    sub：主题
		    aud：用户
		    nbf：生效时间，到此之前不可用
		    iat：发布时间
		    jti：JWT ID，用户标识该JWT
		除了这些字段之外，我们还可以自定义字段，如：name:boc，role:admin等
		需要注意的是，JWT默认情况下是未加密的，任何人都可以解读其内容，因此不要存放隐私字段和保密
	    信息

	    签名：
		签名是对上面两部分数据签名，通过指定算法生成，以确保数据不会被篡改
		首先需要指定一个密码(secret)，改密码仅保存在服务器中，并且不能向用户公开，然后用JWT头中指
	    定的签名算法根据以下公式生成签名
		HMACSHA256(base64UrlEncode(header) + base64UrlEncode(payload))
		生成好签名之后，JWT头、有效载荷、签名三个部分用'.'分隔，组成一个字符串，构成整个JWT对象

	客户端接受到服务器返回的JWT，将其存储在Cookie中或localStorage，此后客户端在与服务器交互中都会带
    JWT，如果将其存储在Cookie中就可以自动发送，但是无法跨域，因此一般将它放到HTTP的请求头中的Authorization
    字段中：Authorization: Bearer token
	localStorage是一个本地存储键值对的对象，通过window.localStorage调用，其中setItem、getItem和remove
    Item方法分别用来增、获取和删

	JWT的特点：
	    1、JWT默认不加密，但可以加密，在生成原始令牌后，可以对该令牌进行再次加密
	    2、当JWT不加密时，一些私密数据不适合通过JWT传输
	    3、JWT不仅可以用于认证，还可用于信息交换，比如不需要长期保存的浏览记录等等
	    4、JWT的最大的缺点是服务器不保存会话状态，所以在试用期间不能取消令牌或更新令牌的权限，也就是
		说使用期间令牌将持续有效，这点我感觉技术上可以做到手动失效，不过成本可能较高，每次请求都
		判断是否要失效的那个JWT，有点得不偿失
	    5、JWT本身包含认证信息，一旦泄露任何人都可以获得该令牌的权限，因此有效期不能设置太长
	    6、为了减少盗用和窃取，JWT不建议使用HTTP协议，而是使用加密的HTTPS

SSO：
    简介：
	SSO就是Single sign on的简称，翻译过来就是单点登录，单点登录是一类解决方案的简称，单点登录的作用是
    在一个站点登录了之后，在其它相关站点就不用重复登录了，可以直接访问，在具体实施方面有两种策略可供选择
    ：SAML2.0和OAuth2.0

WebService：

    WebService可以将引用程序转为网络应用程序，使得程序可以向全世界发布，或提供某项功能，基本的WebService
平台是XML+HTTP，WebService使用XML来编解码数据，使用SOAP(Simple Object Access Protocol)简单对象访问协议来
传输数据






