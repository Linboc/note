    打开eclipse提示jvm配置文件错误，在cmd命令打开java命令也是一样，可是环境变量没错，并且手动
进入jdk/bin目录运行java命令也可行，可是在系统目录就是错误，最后使用where java命令发现有多处环
境变量有这个命令，而预期的路径不是排在第一位，把其他路径下的java.exe文件删除了之后可以了

    Tomcat启动错误要先看一下项目里的TomcatJar包是否跟启动的服务器同一版本，如果项目里是8，用7来
启动是会报错的

	spring mvc的数据验证无效，spring mvc本身没有数据校验，因此需要hibernate validate包的支
持，虽然表面上没有使用到，可能底层可能有调用hibernate validate的机制，因此如果没有hibernate va
lidate的包存在的话，验证就无法生效，这时候把hibernate validate包导入就可以生效了，如果报Ljava.
lang.String之类的异常，可能是版本的原因导致

	如果spring出现各种莫名其妙的错误、异常，那么需要注意与它交互的其它框架包与它的版本是否
兼容，如果不兼容的话，Spring的初始化可能会出现各种Bean初始化、创建异常，这个不兼容有可能你把引
用部分的代码删了，它还是会出错，需要在项目中把相关的包删了才会恢复，可能是Spring里有缓存文件，
里面保存了对应的信息，只要有包就会一直保留，因此代码删了也没用

	如果有时候方法明明存在，spring却报方法找不到异常，那么可能是在类路径下有多个相同类，并
且jar包下的路径也相同，因此有可能找到的首选类不是预想中的类

	有时项目莫名其妙的启动报错，因为开发过程中经常会下载新的项目，有可能是有些项目的版本不
一致，导致相互不兼容

	eclispe使用替换，可以查找，替换提示incompatible line delimit错误，因为编辑器只支持字节
级别的操作，换行是/r/n，如果只替换/n就无法执行，因此要/r/n一起替换

	dubbo获取远程服务失败、超时，因为本地没有启动这项服务，所以会自动从网上有这个服务的地方
获取，可能是其他人开的服务，或者135，如果取得是别人自己开的服务，别人在用的话就会被阻塞，这时候
可以在本地下载该项目，并依赖重启，从本地获取服务就不会出现超时了

	D:\app\nginx-1.5.2\conf\domains\eheres.org\server.conf、system-run-bcs-web/src/main/
webapp/configs/project.conf和启动参数的路径，静态文件都是通过nginx通过这三个地方的路径找的，如
果报404可能是这三个路径与实际文件位置不匹配

	有时候项目编译错误，是因为混合依赖了，被它依赖的项目如果找不到，并且远程也找不到，这个
项目也就因为缺少需要的jar包无法编译，比如banyan的office依赖了banyan的client，这时候需要先编译
client，office才能进行编译
	也有可能是依赖包的版本不兼容(调用的方法更新了，因此找不到对应的方法啥的)，这时候update
一下maven，找到报错的包，如果是jar包，就删了再重下，如果是本地的项目就去找最新版本，然后编译本
地项目，如果本地项目不通过，一直重复上面的流程再找原因再解决，直到全部编译成功

	发生load remote config fial zokeeperExption，这里可能是system-run-bcs-web\src\main\
resources\project\props\conf.properties文件的System.lemonconfig.servers不等于192.168.1.135:2181

	编译失败时，如果用eclipse编译无法提供有用的错误信息，那么可以尝试用dos命令编译，因为eclipse
的版本问题，可能会导致一些信息不会出现，而使用dos就能出现详细信息

	有时编译报jvm.cfg的版本异常，并且检查了环境变量等都没错，那么在run config那里还有个jre
可以设置版本，要注意启动的jre版本是否和预期的一致

	那些服务其实就是在spring.xml里面配置的bean，service服务就是由spring创建的对象

	如果有时候改了代码，刷新数据没有改变，这时候应该换个浏览器试一下，再不行就清除所有的缓
存文件

	如果数据取出来和代码逻辑上不一致，并且不能deBug，这时候可能是从MongoDB里面取的数据，那
个不能DeBug的方法会有@EhStreamCache注解，本机缓存对应的库可以再bcs-src-project-props-conf.properties
里找到

	装MySQL时，如果没有data这个文件夹(放数据的)，那么别自己创建一个，因为有一些数据库运行相
关的信息放在这个文件夹里，比如mysql库，运行在MySQL/bin下运行mysqld --initialize-insecure --user=mysql
，会自动创建该文件夹

	要自己找个mysql的连接驱动包放进项目才能启动，一开始maven的依赖里面他并没有加

	mysql的url中的zeroDateTimeBehavior属性guns里面为CONVERT_TO_NULL，实际要求为convertToNull,
把guns\src\main\resources\application.yml中的CONVERT_TO_NULL全部修改为convertToNull就行了

	maven＋eclipse非常坑，有时候加依赖下载了jar包，用的时候报错，包能找到，类也能点进去，可
是一使用非空构造器就编译不通过，可是打开maven依赖包看，jar是存在的，类也存在，可是就是用不了，
可能是某些信息有损坏，这时候就需要把该包的文件夹删掉，然后maven→update project更新jar包
	这次就被坑了，依赖包明明下载成功了，没想到是jar包的问题，一直以为是配置问题，搞到半夜，
后来把包删了再下就好了

	捕获Throwable和Exception的区别，Exception只能捕获声明式异常，对于一些运行时异常是不会捕
获的，比如/0，找不到方法等异常，这时候如果用Exception，那么就会抛到虚拟机，如果用Throwable，就
会成功捕获，然后做自己想要的处理

	ClassNoFountException，NoClassDefFoundError：
	如果加的依赖报了莫名其妙的异常，类找不到，没有类定义啥的，可能是加载的jar包有问题，这
时候就去仓库把包删了，重新下载可能就会好了

	联动之所以不显示获取权限，是因为appid配置不正确，或者接口代理域名没绑定，url回调参数错
误，是因为后台绑定的是m.ry600.xxx,平台跳转的是hydm.ry600.xxx

https://open.weixin.qq.com/connect/oauth2/authorize接口有成功回调，不过平台这边不知道哪里处理出
了问题，无法正确处理回调信息把request.getAuthContext().isSuccess()的返回值判定去掉，就能成功进入网关

	如果ide能正常使用jdk，而使用maven编译的时候报jdr or jre?这个错误，可能是因为没有没有配
置JAVA_HOME，经测试maven可能是把JAVA_HOME的值作为jdk根路径

	关于INSERT时id回写：StockBill只有在id的type为AUTO的时候才会自动回写id，过程是：mysql返
回id，mybatis获取到id，如果执行的时候那个对象有实现KeyGenerator，就会调用它的processorAfter方法
去执行，传入key和相关属性，比如有个Jdbc3KeyGenerator(mybatis).populateKeys(最终注入的方法)就会
反射注入id，这个实现类应该是mybatis plus去创建的，因为如果把TYPE改为INPUT，实现的就是NoKeyGenerator
，TYPE是AUTO的话实现类就是Jdbc3KeyGenerator，根据mybatis plus的TableId变动

	pigx打开很多菜单都是404，页面打开第一次后刷新一直都是在加载中，除非开新的标签，因为配置
菜单的时候前端组件和前端地址没有填写，不能解析，页面会一直在加载中，并且打开菜单会404

	pigx的菜单，父级节点的路径会拼在子级节点的前面，所以父级节点路径前面要加/，否则会一直404

	js有时候打印的值看起来是整形，然后比较其他整形又不相等，这时候只要给转一下Number(value)
就行了，js类型真的混乱

	redis的conn对象，创建和使用最好在同一个线程，否则会出现奇怪的报错，比如超时，连接关闭等

	项目启动修改没生效，先Install一波项目，Eclipse经常不会自动编译项目的，有时候明明修改了，
启动还是无效，大都是因为项目没有重新编译

	maven加了依赖，程序还是找不到包，在IDE里也能正常引用，在仓库那个包也存在，这是因为加了spring-boot-maven-plugin
插件，加了这个插件后，maven就会按照SpringBoot编译插件的方式打包，也就是会打成那种很大的，包含很多jar包的
可执行jar包，而这种jar包对于maven来说是不可解析的，maven只能解析那种单纯包含本项目代码的jar包，因此这个项
目里的代码加了依赖也找不到，因为无法解析。如果需要maven能找到它的代码，那就要把包打成原始的maven jar包，
只需要在spring-boot-maven-plugin插件的标签里面加一个<configuration>，并把它的<classifier>的值设为exec，这
样spring boot插件在打SpringBoot可执行jar包的时候也会一起把原始jar包分离出来，maven就能正常引用了

	avue加了slot="search"的template，并且这个template标签在avue-curd标签的下级才会出现那几个小图标，
比如刷新、字段隐显和图标隐显

	SQL Server的TimeStamp并不是记录时间日期的，而是单纯的记录一个表里面每条记录的版本，它在一张表里只
能有一列，并且不能显示的指定，只能用默认值，也就是SQL Server分配，每一次对记录的修改或新增都会对这行记录
的timestamp列进行自动递增

	在使用批处理的时候，mybatis有一个KetGenerator，作用是获取每个插入值时自动生成的主键，而批处理是不
能立即获取返回值的，因此就会出现报错，不能在批处理时获取返回值，如果用mybatis puls，在主键字段注解把IdType
设置为input就行了

	在vue中，使用watch侦听属性，有时候侦听不到，比如第一次侦听不到，后面的就可以，这是因为侦听没有立
即执行，需要把侦听器的immediate属性设置为true，这时候侦听变量的语法就不能写成这样了：
value(val) {		而是要写成这样：	value: {
    show = val;					    immediate: true,
}						    handler(val) {
						        show = val;
						    }
						}
	第一种写法更加简洁，不过不支持更多的属性，第二种写法支持修改侦听器的多个属性，通过修改侦听器的immediate
属性为true就可以让属性在修改时立即回调侦听器

	Vue中属性前面加:就是引用属性，加@就是引用方法

	Vue中有时候修改完属性页面的效果没有重新渲染，比如el-table的:data属性修改了，页面的数据依然保持原
样，这有可能是因为:data使用的属性是一个嵌套属性，无法被el-table组件监听到属性的变化，这时需要把:data指向
的属性抽取出来，放到外层，也就是return的子节点中就能被正常检测到属性的变化了

	avue中如果加了dicData，而查看的时候没有把对应的状态转为中文，那么就需要指定type属性，一般情况下不
会出现不指定的情况，因为dicData都是配合type一起使用的，比如选择器，可是有时候如果只需要查看，不需要编辑，
就不会加type，就会出现这个问题

	在IDEA里项目可以编译成功，在JenKins里会失败，目前碰到的情况是，导入了某个包，可是这个包下面没有任
何类，使用比如import java.util.*;这种方式，然后util这个包下没有任何类(不包括它的子包)，就会编译失败，说
找不到java.util这个包

	写日期格式的时候，如果写大写YYYY，则会计算这一周所在的年份，比如今天是周一，周一是2019，周日刚好2020，那么
一周是周日开始，周六结束，因此YYYY会返回2020，哪怕今天是2019，因此如果要获得今天的年份的话，应该用yyyy

	maven的project标签报Inspects a Maven model for resolution problems.因为父项目的版本问题，原本是spring boot
starter parent 2.2.4.RELEASE，换成2.1.5.RELEASE就正常了
	
	方法参数是byte，写0会报错，说需要byte实际给了个int；因为可能会同时存在参数byte跟int的方法，所以编译器不会
把0像赋值一样自动转成byte，这样会造成歧义，因此形参的byte类型一定要明确定义成byte，而赋值则能自动转换，因为赋值时
明确声明了需要的类型

	spring data jpa用@Query注解出现：org.hibernate.hql.internal.ast.QuerySyntaxException: unexpected token: ON near line 1, column 93
异常，语句执行过没问题，检查不出其它问题，网上说是hql不支持左连接或ON，实际上把nativeQuery = true就不会出问题了，
难道是这样就不会使用hql？不能理解

	spring data jpa的更新操作，使用@Modifying注解后，数据不会更新，sql没问题，代码也执行正常，
把它的clearAutomatically = true之后就可以了，猜测是clearAutomatically会在执行之后自动清除相关属性，依
稀记得事务在清除的时候回顺便提交

	spring security，如果加了token，那么就无法访问开放接口，因为开放接口是匿名接口，非匿名无法访
问

	idea中的tomcat在控制台输出乱码有可能是tomcat的配置问题，用了9x的版本有乱码，没找具体配置，
换了个8x就正常了，如果还有乱码，可以在虚拟机启动参数添加-Dfile.encoding=UTF-8试试

	找不到bean定义出现SkipFailbackWrapperException，这次碰到是因为dubbo提供者启动失败，又在web启动了消费者导致出现该异常

SpringCloudEureka的集群如果一直在unavailable-replicas那一行，就要检查
    1、eureka.instance.hostname的配置是否正确，hostname必须是能解析的域名，并且能访问，比如eureka1.com
    2、eureka.client.register-with-eureka和eureka.client.fetch-registry是否为true
    3、eureka.client.service-url.defaultZone是否配置正确，ip是否为正常的域名，而非localhost
    4、是否配置了content-path，如果配置了就要在端口后面加上这个路径

JPA查询却执行了修改语句：
    如果将查询出来的对象进行了修改，然后在同一个session中执行了查询，就会将持久化对象也进行更新，因为这个对象是持久
状态：
    (1)临时状态：通过new新建的对象，没有被持久化，也不在session缓存中
    (2)游离状态：已经被持久化，但不在session缓存中
    (3)持久状态：已经被持久化，也在session缓存中

    此时要么别直接修改这个对象，将对象复制一份，要么通过session修改这个对象的状态
    Session session = (Session) entityManage.getDelegate();
    session.close()：关闭session，会清除所有持久对象
    session.clear()：只清空不关闭session，会清除所有持久对象
    session.evict(obj)：清除单个持久对象

    用evict(obj)能解决，也可以复制出新对象来解决

    发现在项目中有这样的注入@Autowired private IBaseDao baseDao;，但是IBaseDao有很多实现类Bean在ioc中，我很好奇为
什么不会报找到太多Bean的异常，经过查找发现自动注入是先根据类型匹配，如果类型无法匹配就会根据属性名匹配，这个例子
就相当于根据baseDao这个name进行注入的

    用jar包启动javaagent，提示找不到premain所在的agent类，可能是因为使用了spring boot maven插件，这个插件执行jar包
的时候指定了spring的类加载路径，可是如果不使用这个jar包，而是引用的话就无法找到类加载路径，因为那个路径只有spring的
启动器才会去加载，默认的加载参数对spring的不适用，这些配置都在META-INF/MANIFEST.MF文件中

    一直以为mysql的数值类型的长度是指数字的位数，还一度很奇怪怎么是用位数来当单位的，现在才发现这个长度仅仅是用来展
示用的，不会影响到真正存储的数据长度，如果设置int长度为3，如果int为1则展示为001，还要设置了fillzero才生效

    ConditionalOnBean找不到EntityManage实际上运行时ioc却能获取到EntityManage，猜测是EntityManage的BeanDefinition
是后面才注册的，导致验证Bean阶段无法获取，从而无法获取到

    ConditionalOnBean的生效与否跟Bean的加载顺序有关，如果ConditionalOnBean所在的类已经加载了，而ConditionalOnBean
指向的Bean还没加载，就会出现明明有Bean，ConditionalOnBean却生效了，阻止了Bean的加载

   又拍云文件上传无法覆盖，删除、覆盖都没效果，可能是浏览器缓存，可以清除缓存试一下

    JPA在用@Query注解手写sql并分页的时候，如果老是报参数数量不对异常，可以看看是不是countQuery没加或者/*#pageable*/
标识没加，有些时候加#{#pageable}是没效果的，因为它会在#{#pageable}后面拼接limit，导致语句错误

    MQ一直没消费，看一下消费者开了吗，如果发送者是本地的，消费者的配置也要是本地的才行

    spring代理了对象又没有代理方法，而是直接执行了原本的方法，这时候就要看一下是不是手贱给方法加了final，让spring无
法代理

    idea服务启动到某一步突然卡住，没有任何提示，可能是因为开了debug，虽然debug没有启用，并且debug界面没有任何栈
信息，但是就是会卡主，可以把所有debug全关了或者删了试一下

    jpa的神奇异常，如果出现了identifier of an instance of was altered from to null，大体上的含义是某个实体的id不能由xxx
改为null，可是你只是执行了一段查询，这个可能是上一轮查出来的数据被修改了，到了这次查询才会校验触发异常，所以要注意
一下之前的逻辑是否有数据库中的实体id被改过。哪怕你只是查出来，改了id，先不保存它校验也不通过

    关于Spring的@Async注解的循环依赖异常，当某个类的方法中使用了@Async后，如果此时它与其它Bean出现循环依赖，就
会出现BeanCurrentlyInCreationException异常，这是因为Bean创建的时候是先new，再注入属性，再代理，而@Async注解会
让Bean被代理，然后用线程池进行调用，异常原因详情如下：
	1、@Async的Bean实例化完成，并放入半成品池
	2、开始注入属性，发现要用其它Bean
	3、创建其它Bean，注入时发现需要@Async那个Bean，此时该Bean已存在半成品池中，直接取出来注入
	4、其它Bean创建完成，开始走BeanPostProcessor和初始化方法，创建结束
	5、此时回到@Async的Bean，它依赖的其它Bean已创建完成，拿出来继续进行注入
	6、@Async的Bean进行BeanPostProcessor，进行动态代理
	7、在创建收尾时@Async的Bean发现IOC中有两种它，一个是被代理后的，一个是在代理前被其它Bean循环依赖时注
            入的原始对象
	8、此时就开始报错，@Async那个Bean有两个版本
    解决方法：@Async的Bean注入时使用@Lazy，这样就能避免循环依赖时被其它Bean拿到原始对象了，等被获取Bean时它已
经代理完成创建完成了
    解决方法2：让@Async的Bean注入的比循环依赖它的bean慢，报错是因为被从三级缓存里移到二级缓存，因此只要@Async的Bean
最后加载，那么它在创建过程中就不会被get，因为它会从三级缓存中拿到依赖的bean，所以那个bean就不会再去初始化而get它，
所以也能解决问题，控制加载顺序可以用@DependsOn，这个注解会在指定的bean加载完后才开始加载当前bean
    那bean有一个初始化之前先代理的操作为什么没生效呢，因为@Async那个代理处理器没有实现早期Bean代理的处理接口，就
算自己加了aop的处理器也没用，因为@Async的那个对象要aop配置了切面才会进行早期代理，就算代理了后面也会被重复代理，
依然会有多个版本。早期代理处理器：SmartInstantiationAwareBeanPostProcessor
    @Async是单例的，不是原型

    JPA在同一个事务中执行了update，然后find一直查到的是update之前的数据，update是在Repository中手写的，find是jpa语
法支持的自动化查询。就是因为find中jpa做了缓存，update时又没清除，此时只要在update的@Modifying注解中设置
clearAutomatically = true就会清空缓存了

    在数据库中用Update加排它锁来保证数据一致性，虽然避免了分布式锁那么大的锁范围，但是如果有大量sql过来都被锁住的话
，会占用大量数据库连接，拖垮数据库，而分布式锁虽然锁的范围比较大，锁冲突不多时没有数据库锁快，但是它不会占用大量连
接，因此使用什么锁不能光看锁范围还要看具体场景，如果锁冲突的多使用数据库锁就要小心数据库了

    Spring data jpa判断当前事务是否处于活跃状态的方法：((EntityManagerHolder) TransactionSynchronizationManager.getResource(SpringContextUtils.getBean(JpaTransactionManager.class).getEntityManagerFactory())).getEntityManager().getTransaction().isActive()
，需要注意的是，如果没有事务会空指针

    group_id请求头在服务器收不到，nginx因为一些标准，-和_都会转为_，所以默认情况下不支持_，所以通过nginx转发的请求，
请求头里包含_的都会丢失，可以通过在http下面增加属性：underscores_in_headers on来支持请求头的_(下划线)

    https请求提示什么证书错误，可以设置一下连接属性，以下是hutool的处理方式：
        urlConnection.setSSLSocketFactory(CommonUtils.uncheck(() -> SSLSocketFactoryBuilder.create().build()));
        urlConnection.setHostnameVerifier(new TrustAnyHostnameVerifier());
        注意连接类是HttpsURLConnection类

    Runtime执行curl，输入流一直读不到数据，线程一直阻塞，是因为runtime.exec执行，如果命令有间隔要用数组的重载方法，如果有大量空格依然只传一个字符串，就会阻塞住

    找不到对应类型的Bean引发Spring启动异常：
    Bean明明存在，但是注入报找不到对应类型的Bean。因为byType注入的时候，是根据BeanDefinition里定义的类型去匹配
的，而这个类型时取决于@Bean注解的方法返回值。比如@Bean类型是ThreadPoolExecutor，而返回类型是Executor，此时
BeanDefinition里定义的类型就是Executor。如果去根据BeanType进行匹配，由于是用BeanDefinition里的类型去匹配指定
参数的，因此无法匹配，找不到对应的ThreadPoolExecutor类型
    此时要么注入Executor，要么将返回值改为ThreadPoolExecutor


    记一次kafka broker启动时报InconsistentClusterIdException，明明已经把meta.properties改了，zookeeper里的cluster/id也
改了，不知道哪里有缓存，就是报clusterId不匹配，改不成新的。最终反向操作，将zookeeper和meta.properties的clusterId改成旧
的clusterId，得以启动成功

    kafka broker启动时报AccessDeniedException一次，因为在删除主题时的zookeeper路径时/，然后重启时改为了/kafka，因此导致
配置无法匹配，因为本地标记了删除，而zookeeper却没有，此时要么把配置移过去，要么把zookeeper的路径改回去，或者干脆把日志
删了

    kafka broker启动一段时间后，报java.nio.file.FileSystemException:xxxx另一个程序正在使用此文件，进程无法访问。这个是
清理线程报的，windows下才会出现，目前解决方式是删除tmp下的kafka和zookeeper所有配置，很多问题在windows下才会有，如果不想
踩坑最好用linux

    记一下线程池隔离是怎么做到对资源进行隔离的，比如A服务故障了，那么调用者会一直卡在调用A服务那里，直到所有服务器线程
都被耗尽。而线程池隔离，比如A服务一共只有20个线程，那么如果故障了，服务器线程在调到第21个的时候会被直接拒绝，而不是让
资源耗尽
    主要区别是：还有线程池隔离支持超时，因为它可以用当前线程去监听是否超时了，如果超时就直接返回，另一个线程去发请求，
比如fature.get(timeout)。而信号量隔离，是用当前线程去请求的，只能依赖于socket超时，就算用其它线程去监听它的超时，超时就
中断，那它的run不判断中断标识也没辙。此外还有异步与排队

    本地debug时，一旦稍微调试久一点就会访问不了服务，通过网关访问就会提示找不到xxx-boc，这是因为idea的debug模
式可以选择debug是否暂停线程，如果暂停的话暂停所有还是暂停当前线程，默认暂停所有。所以debug时其实也把eureka的
心跳线程暂停了，导致无法维持心跳，测试环境的心跳间隔才5s，因此会很频繁的被剔除实例。只需要把debug断点改为只暂
停当前线程就不会出现这种问题了

    spring cloud或spring cloud alibaba启动报找不到Bootstrap类，可能是spring cloud版本与spring boot版本不匹配导致的

    nacos配置动态刷新无效，可能是bootstrap.perproties文件没生效，需要确认是否加了以下依赖：
    <dependency>
          <groupId>org.springframework.cloud</groupId>
          <artifactId>spring-cloud-starter-bootstrap</artifactId>
          <version>3.1.2</version>
      </dependency>

    测试环境访问mysql，首次连接需要等很久，或者一段时间不访问，重新连接也要根据，据说阿里云服务器加白名单就好了

    idea总是把cpu跑到100%，因为开启自动热部署，所以每次从文本里切换焦点就会自动build，因此把自动部署关了就好了


