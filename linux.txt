
	分区的作用：
		数据安全：如果要重装系统，或者清除某个分区，那么其它区不会受到影响，重装只会清空c盘
		效能：知道文件在哪个区，可以直接去那个区找，不用浪费资源在不想关的区
		缺点是：分好区之后就不能改了，如果要改动分区，就要清除原来的数据，因为要修改分区范围

	多重引导：
		开机时可以指定要使用的核心文件，比如有windows和linux两个系统，第一次选择就有M1和M2，M1就
	是启动windows系统，m2指向下一个开机程序，如果下一个没有额外的选项的话，就会直接启动linux系统

	映像文件下载：
	在http://ftp.twaren.net/Linux/CentOS/7/isos/x86_64/下载映像文件，CentOS-7-x86_64-Everything-1810.iso
的含义是：7代表第7个版本，x86_64代表64位，Everything代表包含所有东西的版本，1810说明是18年10月发布的，如
果最后面还有01这样的描述的话，就是7.01版本

	VMware vm-boc账号：admin
	VMware vm-boc密码：8822995
	
	centos root密码：8822995

	centos管理员账号：boc
	centos管理员密码：8822995

linux的文件如果要隐藏的话，只需要在名字前面加一个小数点‘.’就会认为是隐藏文件

切换文本模式和窗口界面：
	ctrl+alt+F1~F6，一般情况下F1是窗口界面，不过如果没有窗口界面那么就会是文本界面，每切换到一个新的界面都需要
重新登录，因为界面是第一次切换才创建的，因此不同的界面可以用不同的用户，在文本界面下可以用startx来启动窗口界面

命令行前面字符的含义：
    [boc@study ~]$
	boc：当前登录的用户
	@：用户名与主机名的分隔符
	study：主机名，如果主机名用多个.隔开，只会使用第一个.前面的字符
	~：当前用户的home目录，它是一个变量，如果用户是boc，这个变量则指向/home/boc
	$：命令提示符，一般用户是$，root用户是#

退出系统：exit，其实只是注销当前用户的登陆信息

命令格式：
	command --option1 --option2 param1 param2...
	指令    选项1     选项2   参数1  参数2
    命令之间用空格分隔，多个空格会视为一个，按下Enter就代表执行一行指令，\可以转移特殊字符，报货Enter，如果最后一
个字符是\，然后按下Enter键，就会去到下一行而不会立即执行

locale：
	查看编码信息

基础指令：
	date：显示日期与时间
	    在date后面加上参数：+%Y-%m-%d\ %H:%M:%S就可以打印常用的时间格式，这几个%x参数就是取出date里的部分信息

	cal：显示日历
	    cal [month] [year]，可以显示指定年月的日历，如果只写一个参数则认为是年

	bc：计算器
	    可以用+、-、*、/、^、%等符号，输入quit退出，默认情况下bc仅输出整数，如果要输出小数点就要在进入bc之后
	设置scale属性，它决定了会输出几位小数

有一些指令会直接返回结果，然后等待下一个指令，有一些指令会去到特殊的环境中，执行这个指令内部的信息，在这种情况下输
入的指令会被传给该环境，而不会是命令提示字符环境，需要退出该环境才能继续执行原本的命令，判断是否在等待指令输入环境
只需要看光标前面是否提示用户信息就知道了，比如[boc@study ~]$_就是等待输入指令

重要热键：
	tab：命令补全和文件名补全
	    如果在输入命令的时候按两次tab,就会提示以该命令开头的所有命令，如果在输入非命令的时候，就会去检测输入的
	字符匹配的路径或文件，输入指令时第一个空格之前的字符串就是命令，如果安装了bash-completion软件，有时候会有
	选项或参数补全，比如在命令后面的选项中有一个--然后按tab tab，就会出现可用的选项

	ctrl+c：
	    中断当前程序

	shift+pageUp\pageDown：
	    如果信息很长导致上面的信息被刷走了，可以用这个组合键看前面或后面的信息，shift+pageUp\pageDown在任何情
	况下都能使用，如果在指令内部的话则可以使用pageUp\pageDown，这时候他们的区别是shift+pageUp\pageDown可以跨越
	这个指令的内容看到其它的历史记录，而不加shift则只能看到这个指令的内容，无法跨越 出去

	home/end：
		在指令内部可以通过这两个键去到指令内容的开始和结束位置

--help：
	很多情况下可以通过--help来查看某些指令的选项和参数，比如date --help

man page(操作说明页)：
	使用map 命令可以查看该命令的用法，这些用法的显示就是page，空格可以跳到下一页，q可以退出说明页，shift+pageUp\pageDown
也可以在这里使用，在使用man page时，在第一行会出现man后面的指令，后面会跟着一个括号，里面有数字，这些数字的含义是：
1：可操作的指令或可执行文件；5：配置文件；8：系统管理的管理指令，比较重要的就这几个

在页面进行搜索：
	在指令页面中，比如man date指令之后，可以通过/或者?进行页面搜索，比如/date或者?hello，分别是向下搜索date和
向上搜索hello字符，并且会把找到的字符定位到页面的第一行，/向下，?向上，在进行搜索之后，可以用n或者N进行下一轮搜索
，n往下面搜索，N往上面搜索

info page：
	与man page不同，man page是一口气输出一堆信息，info page是把信息分成一个个段落，再以超链接的方式去不同的页
面浏览，每个页面都称为一个节点(node)

	info page的第一行的File标签显示文件来源，它的文件来源在CentOs7中放到了/usr/share/info/目录中，Node标签显示
当前在哪个节点，Next表示下个节点是哪个，Prev表示上个节点，Up表示上一层，这三个功能分别以它的首字母作为快捷键，q可
以退出，t可以回到top节点，也就是刚进来时的节点，h可以显示帮助信息，里面有各个按键的功能，tab可以跳跃到不同的超链接
处，在那些地方按下enter则会进行跳转，当然自己用光标进行移动然后单enter键效果一样
	如果info选择的命令没有info文件来源，也就是不支持info功能，就会按照man page的方式显示，比如info man展示的界
面和man man一样

	还有很多文件或指令没有联机帮助文档，这些东西需要额外的文件去描述，这些文件都放在/usr/share/doc目录下，每个
不同的指令或文件都可能会有多个版本，因此命名都是命令-版本的格式，还有很多软件安装的时候都会有一些安装须知，工作事
项、未来规划等等，这些文件也都放在这个目录中

    帮助总结：
	如果不知道某个指令就用man或者info，如果知道指令但是忘记了参数和选项就用--help，如果想要更多的信息就去
/usr/share/doc目录找

简单的文本编辑器：nano
	nano后面跟上文件名，如果该文件存在就编辑该文件，如果不存在就打开新的界面，最下两行会显示各种^+英文，^的意
思就是ctrl，比如ctrl+g就会进入帮助界面，ctrl+o就会保存,ctrl+w可以搜索，在保存界面最下两行还会有m-英文，m的意思就是
alt，比如alt-a就会把当前文件插入到目标文件的尾部，如果不想插入了可以用ctrl+c取消

关机注意事项：
	由于Linux是多人多任务，跟Windows单人多任务不一样，Windows关机后不会影响到别人，只要确保自己的任务状态可以
关机就可以了，Linux如果直接关机其他人正在执行的任务就会受到影响，比如传输文件传输到一半就关机了，会造成文件损坏，
还有服务器突然关机造成的问题更多，因此Linux的关机有很多需要注意的地方

关机相关的常用指令：

	观察系统的使用状态：
	    使用who(谁)命令可以查看当前系统有哪些用户在使用，使用netstat -a可以查看网络联机状态，使用ps -aux可以看
	到正在执行的程序

	通知使用者关机的时间：
	    使用shutdown治疗可以达到这个功能

	将数据同步到硬盘：
	    sync：
		由于数据需要被频繁的修改，如果总是把内存中的数据写入硬盘中再去读取会很慢，所以在默认情况下，某些加
	    载到内存中的数据就不会被写入硬盘中，就算被重复的改写也只会在内存中操作，这样无疑速度会快上很多；如此一
	    来万一系统因为某些原因造成不正常关机就会造成数据不正常，这个时候就需要sync指令把数据从内存中写入到硬盘
	    中，在关机前最好多执行几次这个指令，虽然shutdown、reboot、halt等指令在关机前都会执行这个指令，不过多执
	    行几次总是放心点
		如果使用一般的账户执行sync指令只会同步自己的数据，如果是root账户则会更新所有的数据

	常用关机指令：
	    shutdown
		1、可以自由选择关机模式，关机重启均可
		2、可以设置关机时间
		3、自定义关机信息，在关机前可以将信息发送给在线用户
		4、发出警告信息，有时候需要进行一些测试，而不想被其它使用者干扰，就可以使用这个吓一下其它使用者

		格式：shutdown [option] [date] [info]
		shutdown -k：只发送警告信息
		shutdown -r：将服务停掉后重启
		shutdown -h：将服务停掉后关机
		shutdown -c：取消正在进行的shutdown
		以上如果没有指定时间则默认一分钟
		示例：shutdown -h 10 'will shutdown 10 mins after'
		以上指令将会在十分钟后停机并立即发送警告，旧版本的一定要加上时间，不然会跳到单人维护模式，这个版本
	    会默认在一分钟后执行
	时间选项：
	    now：立刻执行
	    20:25：将会在下一个20:25执行
	    +10：十分钟后执行
		

	重启，关机：
	    reboot、halt、poweroff：
		这三个指令执行的函数库都差不多，所以当使用man reboot时，这三个指令的说明会同时出现，其中reboot是重
	    启，halt是系统停止，poweroff是系统关机，关机和停止的区别是关机会切断电源，啥都显示不了，停止的话屏幕可
	    能会保留一些信息
		基本上这几个指令都会去执行systemctl这个命令

	systemctl：
		这个指令非常复杂，是管理系统使用的，目前只干涉到关机的部分
	    重启：systemctl reboot
	    关机：systemctl poweroff
	    停止：systemctl halt
	    休眠：systemctl suspend

	由于关机/重启是很重要的行为，因此只有root才能够执行shutdown、reboot等指令，不过某些distributions中允许在
tty1-tty7中可以用一般的账号来关机或重启(tty1-tty7就是按下ctrl+alt+F1~F7切换的界面)，如果是远程管理工具的话就只能用
root账户来关机了，但某些distributions要在关机时输入root密码

	切换到root账户：
	    执行su -，执行后就要输入密码，密码正确后就会切换到root用户了

任意文件都具有[User、Group、Others]三种身份的权限：
	文件拥有者User：
	    文件的拥有者可以对这个文件进行读写

	群组Group：
	    拥有者可以创建一个群组，并为文件指定这个群组，只有加入这个群组的用户才能对这个文件进行读写

	其他人Others：
	    其他人就是不属于群组和拥有者的用户，有些文件会对其它人的身份开放一些权限，比如读和执行

	root：
	    root账号可以无视任何权限限制

    Linux中所有的账号与身份都记录在/etc/passwd文件内，个人密码记录在/etc/shadow下，组名都记录在/etc/group下，目前
的系统并没有这几个文件夹，当前的版本是CentOS Linux 7，Kernel 3.10.0

    ls指令：
	ls是list的意思，主要是显示文件与文件名相关属性

	ls -al params：
	    列出所有文件的详细权限与属性，包括隐藏文件，params可以写表达式，比如file1*，就只展示file1开头的文件

		第一列：权限
		    权限一共有十个字符，比如：-rwxrwx---，第一个是文件类型，然后每三个分别是拥有者、群组和其他人的
		读、写、执行权限，比如上面的例子第一个字符是-：这个字符如果为[d]则是目录，如果为[-]则是文件，如果
		为[l]则是链接文件，如果为[b]则是配置文件里的可随机存取装置，如果为[c]则是串行端口设备；第二到第四
		个为rwx，说明拥有者有读写执行的权限；第五到七为rwx，说明群组有读写执行权限；第8到10是---，说明其他
		人没有权限进行任何操作
		    注意：如果用户拥有文件夹的读权限，没有执行权限，是不能进入文件夹的，因为进入文件夹需要执行权限
		，就算权限是---------，root用户也可以进行任何操作，因为它可以无视权限限制

		第二列：连接数量
		    每个文件都会将他的权限与属性记录到文件系统的i-node中，每个i-node就是一个文件夹，每个文件夹都会
		关联到一个i-node(另一个文件夹)下面，而这个属性代表了它的下级目录有多少个文件夹，也就是这个i-node下
		一级有多少个i-node

		第三列：拥有者
		    该文件拥有者的账号

		第四列：群组
		    该文件所属群组

		第五列：文件大小
		    该文件的大小，默认单位为byte

		第六列：修改日期
		    该文件最后修改日期，如果年份较远，则只会显示日期，如果想显示完整时间日期，可以使用
		ls -l --full-time来显示

		第七列：文件名
		    文件名，如果是以.开头，则代表隐藏文件

	ls：显示所有的非隐藏文件的名称

	ls -a：显示所有文件的名称

	加了-a能显示所有的，加了-l能显示属性，-al显示所有的属性

    chgrp(change group)p：改变文件群组
	chgrp [-R] group fileName，例如：chgrp test1 init.cfg，把init.cfg文件的群组改为test1，如果在chgrp后面加上
    -R，就会进行递归变更，那么这个目录下的所有文件、目录都会成为这个群组，如果该群组不存在，就会报错误说找不到这个
    群组，所有群组都存在/ect/group目录下，我这个版本实际上找不到该目录
	
    chown(change woner)：改变文件拥有者
	chown [-R] owner:group 文件，例如：chown user1:group1 file1.txt，把file1.txt的拥有者改为user1，群组改为
    group1，也可以只改群组，也就是不写user1，只写:group1，冒号:可以改为点.，效果一样，不过冒号不容易有用户名冲突，
    这个同样可以加-R，效果相同

    chmod：改变文件权限
	chmod [-R] 777 file1.txt：将file1.txt的3种角色权限改为读写执行，777分别是：读=4，写=2，执行=1，读写执行就
    是7，只有读和写就是6，3个7分别代表3个角色：拥有者、群组和其他人
	除了这种方式之外，还可以指定不同角色的权限，比如chmod u=rwx,go=rx fileName，这句指令的意思是：fileName文件
    的拥有者指令改为读写执行，群组和其他人的权限改为读执行，如果要把所有人的的权限都改为只读，可以用chmod a=rwx file
    ，a代表所有权限，如果想去掉所有角色的执行权限，并且其他权限保持原样，则可以用chmod a-x fileName，-的意思是去掉
    权限，同理，+是加上权限，=是直接覆盖

    每种权限对于文件的具体含义：
	r：可读取此文件的内容
	w：可以编辑、新增或修改该文件的内容，但是不能删除
	x：可以让系统执行该文件，在linux中，一个文件是否能被执行取决于扩展名，在Linux中则取决于有没有x权限，当然，
	   能被执行和能成功的被执行是两回事

    每种权限对于目录的具体含义：
	r：只可以读取目录的名称，不能看到权限、文件夹大小、目录结构等信息，因为这些需要x权限进去才能获取到，r并不
	   是必须的，因为文件夹没有r，只有w也能顺利进入，r只能决定了是否可以看到这个文件，比如使用tab时能否自动补
	   齐，用ls时是否会显示这个目录，即时看不到也可以执行，因此一般开放目录都会开放rx权限，让用户能看到和进入
	w：可以新建、删除、重命名目录下的文件和目录，无论有没有那个文件的权限，还可以把文件粘贴到目录下
	x：能否进入该目录成为工作目录，工作目录就是当前的目录，也就是决定了该目录能不能成为当前目录，cd是切换目录，
	   如果没有x权限，则cd也无法切换进去

    文件和目录的区别在于，文件干涉具体的数据内容，目录则负责管理文件，因此文件的权限能决定对文件内数据处理，而目录
的权限则能决定该目录下的文件或目录的处理

    mkdir(make directory)：创建文件夹
	mkdir fileName

    touch fileName：创建新的空文件
	touch test/testFile，在test目录下创建一个名为testFile的文件
	
    rm fileName：删除文件

    rmdir dirName：删除文件夹

    Linux中的文件一般分为3种，分别是：普通文本、二进制文件和数据格式文件，数据格式文件就是特定格式的文件，比如登陆
信息都是保存在/var/log/wtmp文件内，这就是一个数据文件，该文件能用last指令读出来，但是用cat指令则会读出乱码

    Linux的链接文件类似于Windows的快捷方式

    虽然Linux不需要扩展名来决定程序是否能被执行以及怎样执行，但是通常还是会用适当的扩展名来表示该文件是什么类型，
常用的有*.sh：表示shell脚本文件，*Z、*.tar、*.tar.gz、*.zip、*.tgz都表示被打包的压缩文件，*.html、*.php就不用说了

    常用的文件系统，最大的文件或目录名允许最大为255byte，也就是255个英文或128个中文，文件命名最好避开特殊字符，比
如.、-、,、+等，.代表隐藏文件，-代表指令选项，,和+在修改角色的权限时有用到

    ~代表当前用户的家目录，~boc代表boc用户的家目录

    指令文件路径的时候，以/开头的会认为是绝对路径，否则都是相对路径，../代表上一层，./代表当前层

    特殊目录
	.：当前层目录
	..：上层目录
	-：前一个工作目录
	~：当前用户的家目录
	~boc：boc用户的家目录
    在所有目录下都会存在.与..目录，代表此层和上层目录，根目录也有.与..目录，仔细看会发现它的这两个目录的属性完全一
致，这代表根目录的上层目录依然是根目录

目录相关指令：

	cd(change Directory)：切换目录
	    参数可以填写路径，或者特殊目录，比如~代表当前用户的家目录，root用户则是/root，~boc则是去到boc用户的家
	目录，..代表上层目录，-代表刚才所在的上个目录，啥都不填就是代表家目录

	pwd(print working directoryy)：
	    显示当前目录，可以加-P选项，这样就会获取到最终的路径，比如如果是链接文件，就会显示链接到的路径，普通文
	件保持原路径

	mkdir：创建一个目录
	    -p参数可以自动创建上级目录，比如要创建test1/test2，可是test1还不存在，直接创建会报文件夹不存在，-p可以
	自动创建test1，-m可以在创建时指定目录的权限，如果不指定则用默认属性，示例：mkdir -p -m 711 t/t1/t2

	rmdir：删除一个目录
	    rmdir每次只能删除一个目录，并且只能是空目录，-p选项可以连通上层目录一起删除，比如rmdir -p t1/t2/t3，如
	果t3、t2、t1都没有包含其他文件与目录的话，这三个文件夹就会被一起删除，如果要强行清空目录，可以用rm指令

	rm：删除文件
	    -r选项可以删除多个文件，比如rm -r test，递归删除所有test前缀的文件与目录，也就是说子目录也会生效，-f参
	数则可以删除无需确认，跑路指令rm -rf /*的意思就是，删除根目录下的所有文件，且无需确认

	mv：移动文件
	    mv file dir，将file移动到dir目录下

    $PATH：
	所有能够执行的指令都会在$PATH变量下找，不同路径用:分割，可以通过echo $PATH去查看$PATH包含了哪些路径，
    在使用指令的时候会通过$PATH变量去找，最先找到的指令将会被使用，如果指令找不到可以去$PATH变量找找是否路径不
    正确
	
	如果想使用某一指令，而不想加入$PATH变量，可以使用绝对路径或者相对路径，不能直接去到目录里面使用，而是要
    用/和./来指定，因为当前路径./没有加入$PATH变量，这个路径最好不要加入，因为在公共目录如果有人恶意放一些常用
    指令，加了这个变量就会优先调用它的指令，最准确的方式还是使用绝对路径或者相对路径

    不同的用户可以使用的指令也不相同，比如root用户就会有/root/bin路径，而一般的用户则会有/home/boc/bin路径

    修改变量：
	PATH="xxx"，这种方法可以修改PATH变量，PATH="${PATH}:/root"，这种方式可以引用其它变量，现在$PATH变量就
    会加上:/root路径了

文件相关指令：
	ls(list)：
	    -a：全部文件与文件夹，以文件名排序
	    -A：全部文件与文件夹，不包括.(当前层)和..(上一层)，以文件名排序
	    -d：列出目录本身，也就是.
	    -f：列出结果，不排序
	    -h：将文件的容量以易读的方式列出来
	    -i：列出inode号码
	    -l：列出列表的数据包含文件的属性权限等
	    -n：列出UID与GID而不是使用者和群组
	    -r：反向排序
	    -R：递归列出子目录
	    -S：将文件按照容量大小排序
	    -t：按照时间排序
	    --color=never：不使用颜色
	    --color=always：使用颜色
	    --color=auto：系统自动判断是否使用颜色
	    --full-time：显示完整的时间
	    --time=atime或ctime(这两个在文件时间部分有介绍)
	很多时候会把ll预设成ls -l

	cp -opctions source1 source2 dest：复制
	    无：直接进行复制，如果目标是链接文件也会复制源文件
	    -d：如果文件为链接文件，则复制链接文件，而非文件本身
	    -f：如果目标文件已存在，则覆盖后再复制
	    -i：如果目标文件已存在，则询问后再覆盖
	    -l：进行硬式链接
	    -p：连通文件的属性一起复制过去，权限用户时间等
	    -r：递归赋值，用来复制一整个文件夹
	    -s：复制为链接文件
	    -u：如果目标比源文件更旧或者目标不存在才复制
	    --preserver=all：除了-p的权限之外，SELinux的属性也被复制了，如links、xattr等
	    -a：相当于-dr --preserver=all
	如果有多个source，则dest必须是目录
	当使用属性复制选项时(-p-a等)，如果保持原来的权限当前用户无法对文件进行写入，那么拥有者就会改为当前用户，因
    为如果不改就无法对文件进行写入，无法完成复制
    
	rm -opction fileName：删除文件或目录
	    -f：忽略不存在的文件，也就是当删除的文件不存在时不会出现警告
	    -i：删除前会询问
	    -r：递归删除，通常用来删除文件夹，这是个很危险的选项

	    rm -i bashrc*：删除所有以bashrc开头的文件，删除前会询问
	    root用户在删除的时候会默认加上-i选项，也就是每个删除都会询问，因为root用户有权限删除大量重要文件，如果
	不想要被询问，可以在rm之前加上\，也就是使用\rm指令来删除
	    如果删除的文件有特殊符号，比如文件名为-aaa-，那么可以使用rm ./-aaa-，这样系统就不会把文件名识别为选项了
	，还有一种方式，那就是用rm -- -aaa-，这样也能被正确识别

	mv -opction source1 source2 dir：文件移动
	    无：文件移动到dest，如果dir里该文件已存在则报错
	    -f：强制移动，如果文件已存在则覆盖
	    -i：如果文件已存在则询问是否覆盖
	    -u：如果目标已存在，而源文件又比较新才会覆盖
	    
	basename file：获取该文件或目录的名称
	dirname file：获取该文件或目录所在的目录的绝对路径
	判断哪个是文件名哪个是目录名，通过判断是否以/开头就知道了，/开头的就是目录名

查看文件内容：
	
	cat(Concatenate)：从第一行开始显示文件内容
	    -A：相当于-vET选项，可以列出一些特殊字符
	    -b：打印行号，只有非空白行才会标行号，空白行不会
	    -E：将结尾的换行字符$显示出来
	    -n：打印行号，连空白行也会有行号
	    -T：将制表符以^I显示出来
	    -v：列出一些看不出来的特殊字符

	tac：从最后一行开始显示，其实他就是cat倒着显示
	    功能跟cat一致(猜测)

	more：一页一页的显示文件内容
	    在执行指令过程中，有以下按键可使用：
		空格：下一页
		enter：下一行
		/+字符串：代表在当前显示的内容中向下搜索这个字符串
		n：继续执行搜索
		:-f：显示文件名以及目前显示的行数
		q：离开more
		b或ctrl-b：往回翻页

	less：和more类似，不过它可以往前翻页
	    在执行指令过程中，有以下按键可使用：
		空格：下一页
		pagedown：下一页
		pageup：上一页
		/+字符串：向后搜索字符串
		?+字符串：向前搜索字符串
		n：继续搜索下一个
		N：反向搜索下一个
		g：去到第一行
		G：去到最后一行
		q：退出less
	    man就是用less来展示说明文件的内容

	tail：只看最后几行
	    -n：number属性，其它跟head一样，如果想略过前面100行，可以使用+100
	    -f file：检测文件到目标文件一更新就显示在屏幕上，检测持续到按ctrl+c才结束

	head：只看前面几行
	    head -n number file：显示前面的number行，如果-n number不填，默认为10行,number为负数则代表后面的number
	行不打印

	nl：显示的时候会显示行号
	    -b：行号的指定方式
		-b a：无论是否为空行，都列出行号，默认为空行不显示
		-b t：如果有空行，空的那行不要列出行号
	    -n：行号的显示方式
		-n ln：行号显示在最左方
		-n rn：行号显示在最右方，且不加0
		-n rz：行号显示在最右方，且加0，默认是6位
	    -w：行号字段占用的字符数

	od：以二进制的方式读取文件内容
	    -t：输出类型
		a：默认字符输出(二进制)
		c：ASCII字符输出
		d：用十进制来输出数据
		f：用浮点数来输出数据
		o：用八进制来输出数据
		x：用十六进制来输出数据
文件时间：
    每个Linux下的文件都会记录一些时间参数，分别是：
	修改时间(mtime)：
	    文件内容最后一次被修改的时间
	状态改变时间(ctime)：
	    文件属性最后一次被修改的时间，比如权限和名称等待
	被读取时间(atime)：
	    文件文件内容最后一次被读取的时间

修改文件时间：
    touch：
	无：把指定文件的三个时间属性更新到当前的时间，如果文件不存在则创建一个新文件
	-a：仅修改access time
	-m：仅修改modify time
	-c：如果文件不存在也不会创建新文件
	-d：指定想要修改的日期而不用当前的日期
	-t：指定想要修改的时间，而不是用当前的时间，格式为YYYYMMDDhhmm
	--date：指定日期或时间
	示例：
	    touch -d "2 days ago" file：将file的atime和mtime修改到当前时间的两天前
	    touch -t 201906150202 file：将filed的atime和mtime修改到指定时间，精确到分
	    ctime这个属性无法被修改，只有文件属性被修改的时候它才会被修改
	    
执行多个指令：
	如果在同一行中同时写多个指令，并且这些指令用分号分隔，那么这些指令将会被依次执行

文件默认权限：
	文件原本的默认权限：-rw-rw-rw-
	文件夹原本的默认权限：drwxrwxrwx

	umask：默认权限
	    无：显示4位数字，分别是特殊权限、拥有者权限，群组权限、其他人权限
		特殊权限先不谈，后面3位的权限是指默认值要减掉的权限，比如：0022，那么文件的默认权限减去0022，除去
		特殊权限不谈，就等于：666-022=644，也就是文件的默认权限是-rw-r--r--，文件夹同理，文件夹的默认权限
		：drwxr-xr-x。注意!被减去的权限只有存在时才会被减，如果有个权限本身只有6，而umask却减3，那么不会剩
		下3，而是4，因为是按照位算的，3代表1和2位，也就是后面2位，不能按照数值计算
	    -S：显示每个角色拥有哪些默认权限
	    number：直接在umask后面输入3位数字，就能更改默认被减去的权限了，当然每位最高只能是7

	root用户和普通用户的默认amask不同，root用户是022，普通用户是002，因为root用户的安全要求更高
	
文件的隐藏属性：
	chattr [+-=] -opctions file：修改文件的隐藏属性
	    +：增加某个特殊参数
	    -：减去某个特殊参数
	    =：设置某个特殊参数
	    -A：被访问时atime属性不会被修改，避免机器过度存取磁盘
	    -S：文件的修改会被同步写入磁盘，同步的作用参考sync指令
	    -a：文件内容只能被增加，root权限才能设置
	    -c：每次存取都会先经过压缩
	    -d：当dump程序执行的时候，该文件将不会被dump备份
	    -i：让该文件不能被删除、设置权限、改名、修改内容和设定链接，只有root权限可以设定此属性
	    -s：如果被删除了，就会被完全移出硬盘，无法恢复
	    -u：如果被删除了，还会存在于硬盘，可以恢复

	lsattr -opctions file：查看文件的隐藏属性
	    无：显示文件的隐藏属性
	    -a：显示隐藏文件的隐藏属性
	    -d：显示目录本身的隐藏属性
	    -R：连子目录的数据也列出来

文件特殊权限：
	
	SUID：
	    SUID是Set UID的简称，在拥有者执行权限的位置不会显示x,而是s，它有以下限制与功能：
		1、SUID权限仅对二进制程序有效
		2、执行该程序需要具备x权限
		3、本权限仅在程序执行过程中有效
		4、在执行该程序的过程中会获得该程序的拥有者权限
		5、对目录无效
	    比如/usr/bin/passwd指令，任意用户可以通过它修改自己的密码，它的拥有者是root，拥有者权限是rws，而密码所
	在的文件在/etc/shadow目录下，权限全是-，只有root用户能进行操作，passwd指令可以让用户暂时性拥有root的权限，
	从而去修改密码文件
	    所以看起来就是让使用者在使用自己程序的时候短暂开放自己的权限

	SGID：
	    SGID是Set GID的简称，在群组执行权限的位置不会显示x,而是s，它有以下限制与功能：
		1、SGID只对二进制程序有效
		2、执行该程序需要具备x权限
		3、在执行该程序的过程中会获得该程序的群组权限
		4、与SUID不同的是，SGID可以用在目录上
	    当用在目录上时他将具有以下功能：
		1、用户只有对目录具有r与x权限才能进入该目录
		2、用户在此目录下的有效群组将会变成该目录的群组，就是获得该目录群组权限的意思
	    SGID与SUID差不多，一个是针对拥有者，一个是针对群组，他们的名称区别也是一个U一个G

	SBIT：
	    SBIT是Sticky Bit的简称，它具有以下限制与功能：
		1、只对目录有效
		2、用户必须对目标目录具有rwx权限
		3、在该目录下，只有目录或文件的创建者和root用户有权删除文件
	    比如/tmp目录，它的权限是drwxrwxrwt，那么按理来说对于A用户在里面建立的文件或文件夹所有的用户都能删除，
	因为other具有w权限，但是由于其他人的x权限是t，因此A用户建立的文件或文件加只能被自己删除，当然root用户也能

总结：
	SUID让执行者在该程序中暂时拥有该程序拥有者的权限
	SGID让执行者在该程序中暂时拥有该程序群组的权限，如果是文件夹则在文件夹的子目录下都用该该文件夹的群组权限
	SBIT让某个目录下的文件只能被创建者和root用户删除

特殊权限设置：
	同样使用chmod，原本是chmod 3位数字 file，现在是4位数字，第一位数字代表特殊权限：4为SUIC，2为SGID，1为SBIT
	示例：chmod 6755 test，结果是test文件的权限更改为-rwsr-sr-x，使用者和群组的执行权限都变为s了
	SUID会改变使用者的x为s,SGID会改变群组的x为s,SBIT会改变其他人的x为t
	使用字母设置示例：chmod g+s,u+s,o+t，把三个权限的特殊权限都设置上
    注意：
	当特殊权限显示为大写的时候，比如-rwSrwSrwT，则说明特殊权限为空，因为虽然给设置了特殊权限，但是当前用户没有
    执行权限，因此特殊权限无法生效，特殊权限是在执行权限升级而来
	
查看文件类型：
    通过file指令可以简单的查看目标文件是什么类型，示例：
        file file.db，结果可能会为file.db: data，意思是这是data文件

搜索指令与文件：
    which -opction command：在PATH路径中搜索命令
	无：列出PATH目录中第一个找到的目标命令的绝对路径
	-a：列出PATH目录中所有能找到的目标命令的绝对路径

    whereis -opction fileName：在特定目录中搜索文件名
	无：直接去目标目录进行寻找文件
	-l：列出whereis会去哪几个目录查询
	-b：只找二进制(binary)格式的文件
	-m：只找在说明文件man目录下的文件
	-s：只找source来源文件
	-u：搜索不在上述三个选项中的其它特殊文件，也就是非man目录下，非来源文件和非二进制文件

    locate -opction fileName：在数据库里搜索文件
	无：直接去数据库里面找对应的文件或目录名
	-i：忽略大小写差异
	-c：计算找到的文件数量
	-l：仅输出几行，-l后面跟着行数，比如-l 5，就是仅输出5行
	-S：输出locate所属用的数据库文件信息，比如数据库记录的文件/目录的数量等
	-r：后面可接正规表示法的显示方式
        注意：因为数据库是每天更新一次的，因此新建的文件可能搜索不到
    updatedb：立即更新数据库
	这个指令会去读取/ect/updatedb.conf配置文件，然后在硬盘里搜索文件名来更新数据库，因此会比较慢

    find PATHs -opction：在硬盘进行文件搜索
	时间搜索：
	    -mtime n：查找n天之前的那一天被改过内容的文件，0代表今天
	    -mtime +n：查找n天之前(不包含n天本身)被修改过内容的文件
	    -mtime -n：查找n天之内(包含n天本身)被改过内容的文件
	    -newer file：查找比file还要新的文件
	    -mtime是代表修改时间，还有-atime和-ctime分别代表访问时间和创建时间，用法都和-mtime一样
	    示例：find /tmp -mtime 0：查找/tmp目录下在一天内被修改过的文件
	拥有者搜索：
	    -uid n：搜索目录下所有uid等于n的文件，UID是账号对应的ID
	    -gid n：搜索目录下所有gid等于n的文件，GID是群组对应的ID
	    -user name：搜索所有拥有者名称等于name的文件
	    -group name：搜索所有群组名称等于name的文件
	    -nouser：寻找文件的拥有者不存在于/etc/passwd的文件
	    -nogroup：寻找文件群组不存在于/etc/group中的文件
	    注意：当用户被删除了或者安装第三方软件就会不存在的拥有者或者群组
	    示例：find /home -user boc：搜索/home目录下所有拥有者为boc的文件
	文件权限与名称搜索：
	    -name fileName：搜索文件名，可以用*来进行模糊匹配
	    -size [+-]SIZE：搜索比SIZE还要大或小的文件，50c代表50type，50k代表50kb
	    -type TYPE：搜索指定类型的文件，常见类型：一般文件：f，配置文件b、c，目录d，链接文件：l，socket文件s
	    -perm mode：搜索权限刚好等于mode的文件，比如搜索-perm 0744，那么就会搜索所有权限等于-rwxr--r--的文件
	    -perm -mode：搜索权限包含mode的文件，比如mode是0744，那么文件为-rwxr-xr-x也会被搜索出来
	    -perm /mode：搜索权限包含mode里任意某个权限的文件，比如mode是755，那么-r--------也会被搜索出来，因为它
			 的r在mode中有存在
	    示例：find /tmp -perm /7000：搜索所有有特殊权限的文件
	特殊功能：
	    -exec command：将搜索到的结果执行新的指令，指令不能是别名，比如ll
	    -print：将结果打印到屏幕上，这是默认使用的
	    示例：find /tmp /home -perm /7000 -exec ls -l {} \;：搜索/tmp和/home目录下所有拥有特殊权限的文件，并把
		  它们的属性信息打印出来，{}代表find的结果，-exec是额外功能的起始，\是额外功能的结束，期间就是要执
		  行的指令，;在bash环境下有特殊含义，\用来转义







