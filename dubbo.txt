基础组件：
    
    服务容器：
	负责启动、加载、运行服务提供者

    服务提供者：
	提供服务，并向注册中心注册自己提供的服务，和注册中心保持长连接，一但提供者宕机马上推动事件通知消费者

    服务消费者：
	消费服务，服务消费者向注册中心订阅所需的服务，并且和注册中心保持长连接以接收数据变更；使用软负载均衡算法选
    择一台服务提供者调用

    注册中心：
	服务注册与发现，接收服务提供者的注册并把服务列表返回给服务消费者

    监控中心：
	统计服务的调用次数和调用时间的监控中心，由服务消费者和提供者先在内存中进行每分钟的汇总，然后再发送给监控中
    心


注册中心：

	dubbo本身不提供注册中心，不过它可以使用多种注册中心来完成它的需求，这些注册中心需要在dubbo:register标签中指定
    其ip和端口和注册中心类型等，目前官网参考手册中说明支持5种：
	Multicast：提供方使用广播的方式来广播自己的地址，消费方则广播自己的需求，当服务者收到订阅请求时，则单播自
    己的地址给消费者，然后消费者使用该地址进行RPC调用只适合小规模或在开发环境使用

	Zookeeper：Zookeeper是Apache Hadoop的子项目，是一个树形目录服务，支持变更推送，工业度高强，可用于生产环境，并推荐使用
    ，它作为一个单独的服务器存在，建议使用2.3.3以上版本的Zookeeper注册中心客户端

	Redis：基于Redis实现的注册中心，从2.1.0版本开始支持，使用Key/Map结构存储，主Key为服务名和类型，Map中的Key为
    URL地址，Value为过期时间，用于判断脏数据，脏数据由监控中心删除

	Nacos：Nacos是Dubbo生态系统中重要的注册中心实现，其中dubbo-register-nacos是Dubbo融合Nacos注册中心的实现，
    它应该是Dubbo为自己准备的注册中心，因为都是alibaba的依赖，它作为一个单独的服务器存在

	Simple：Simple注册中心本身是一个普通的Dubbo服务，可以这种注册中心可以减少第三方依赖，使整体通讯方式一致，
    它只是简单实现，不支持集群，可以用作自定义注册中心的参考


运行所需环境：
	1、JDK1.6+
	2、com.alibaba:dubbo、com.101tec:zkclient等依赖，一个是dubbo的包，包含了spring、netty、javassist等库类，还
    有一个是注册中心的库，这里用的是zookeeper的

配置：(dubbo标签的使用需要在xml文件里加相应约束)

    服务提供者所需配置：
	<dubbo:application name="服务名，比如provider">
	<dubbo:registry address="注册中心和地址，比如zookeeper://127.0.0.1:2181，也可以分开写，参考下面消费者配置">
	<dubbo:protocol name="通信协议的类型，比如dubbo" port="服务提供者的端口">
	<bean id="服务对象beanId" class="服务提供实现类">
	<dubbo:service interface="服务暴露的接口" ref="服务暴露接口引用的beanId，也就是其实现类的那个bean">

    服务消费者所需配置：
	<dubbo:application name="服务名，比如consumer">
	<dubbo:registry address="注册中心地址" protocol="注册中心类型">
	<dubbo:reference id="beanId" check="服务启动时是否要检测该接口的可用性，不可用则抛异常" interface="远程代理的提供者接口，一般与提供者接口一样">


标签解释：

    <dubbo:service/>：提供者使用
	用于暴露服务，定义服务的信息，一个服务可以用多个协议暴露，也可以注册到多个注册中心，分别使用多个dubbo:registry
    和dubbo:protocol标签就行了其中version属性是定义接口版本的，版本与dubbo:reference标签对应，dubbo:service只能获
    取到相同版本的<dubbo:reference/>接口

    <dubbo:reference/>：消费者使用
	用于创建一个远程服务代理，一个引用可以指向多个配置中心，使用多个dubbo:registry标签就行了，改变前定义的代理
    对象是懒加载的，只有被getBean或者注入Bean的时候才会加载，如果要饥饿加载就要把init属性设置为true，其中version属
    性是定义接口版本的，版本与dubbo:service标签对应，dubbo:service只能获取到相同版本的<dubbo:reference/>接口

    <dubbo:protocol/>：提供者使用
	用于配置提供服务的协议信息，协议又提供方指定，消费方被动接受，protocol是协议名称，默认为dubbo，也可以填rmi
    、http、hessian等，其中port属性是可选的，dubbo协议默认为20880，rmi默认为1099，http和hessian默认为80，如果填-1，
    则会自动分配一个没有被占用的端口，自动分配的端口在协议的默认端口后增长，比如dubbo协议20880被占用了，则会尝试+1
    ，以确保端口可控

    <dubbo:application/>：共用
	用于配置当前引用信息，不管该引用是提供者还是消费者

    <dubbo:mudule/>
	用于配置当前模块信息，可选

    <dubbo:registry/>：共用
	用于配置连接注册中心相关信息

    <dubbo:monitor/>：共用
	用于配置连接监控中心相关信息，可选

    <dubbo:provider/>：提供者使用
	当ProtocolConfig和ServiceConfig某些属性没有配置时，采用此标签中提供的默认值，对应提供者的配置，可选

    <dubbo:consumer/>：消费者使用
	当ReferenceConfig某些属性没有配置时，采用此标签中提供的默认值，对应消费者的配置，可选

    <dubbo:method/>：子标签
	用于ServiceConfig和ReferenceConfig指定方法级的配置信息

    <dubbo:argument/>：子标签
	用于ServiceConfig和ReferenceConfig指定方法参数配置，用法：<dubbo:service><dubbo:argument/></duvvo:service>

所有标签都有一个对应的配置类，命名规则是标签名+Config，比如<dubbo:service/>标签对应ServiceConfig

不同标签的配置优先级：

    总的来说就是方法级优先，接口级次之，全局配置再次之，如果级别一样，则消费方优先，提供方次之
	方法级：<dubbo:method/>标签里面定义的参数
	接口级：<dubbo:service/>或<dubbo:reference/>里定义的参数
	全局配置：<dubbo:consumer/>或<dubbo:provider/>里定义的参数


    服务提供方的配置通过配置中心把配置传给服务消费方


其它配置方式：

    properties配置：
	dubbo可以自动加载classpath根目录下的dubbo.properties文件，也可以用JVM参数来指定路径：-Ddubbo.properties.file
    =xxx.properties，如果classpath下有超过一个dubbo.properties文件，dubbo将会随机加载一个，并且打印错误日志
	然后在里面写dubbo.application.name=foo等等

	如果应用简单并且不需要多注册中心或多协议的话可以使用这种方式
	
	优先级：虚拟机参数->xml配置->properties配置

    API配置：
	API就是通过代码的方式进行配置，所有的配置标签都有一个对应的Config类，所有属性Config类里都有对应，它们都是
    一对一的关系，如果提供方需要发布服务，就要new一个ServiceConfig对象，泛型是服务接口类，在set完所有属性后调用export
    方法就可以了，消费者也一样，不过new的对象变成了ReferenceConfig对象

    注解配置：
	服务提供方：
	    1、用dubbo的@Service注解暴露服务接口实现类
	    2、在dubbo-provider.properties文件中增加服务提供方配置
	    3、用@PropertySource注解让spring扫描配置文件，用@EnableDubbo扫描接口实现类所在的包

	服务消费方：
	    1、用@Reference注解引用服务变量，然后把这个注解所在的类加入ioc中
	    2、增加dubbo-consumer.properties配置文件
	    3、用@EnableDubbo注解扫描@Reference注解所在变量的那个类的所在包
	    4、用@PropertySource注解扫描配置文件
	    5、用@ComponentScan注解把@Reference注解所在的变量所在的类扫描进ioc
	    6、从容器中获取到@Reference所在的那个类，然后通过其所在的那个变量进行调用

    配置中心：
	配置中心有两个职责：
	    1、外部化配置，启动配置集中式存储，类似于spring cloud config
	    2、服务治理，服务治理规则的存储与通知

	启动自动配置，以zookeeper为例：
	    1、<dubbo:config-center address="zookeeper://127.0.0.1:2181"/>
	    2、dubbo.config-center.address=zookeeper://127.0.0.1:2181
	    3、new ConfigCenterConfig(); 然后setAddress("zookeeper://127.0.0.1:2181")
	dubbo在使用zookeeper作为注册中心并且没有显式配置配置中心的情况下，Dubbo会默认将zookeeper用作配置中心，但只
    用来做服务治理

	外部化配置：
	    外部化配置的目的之一是实现配置的集中式管理，这部分业界已经有很多成熟的专业配置系统如Apollo、Nacos等，
	Dubbo主要是保证能配合这些系统正常工作，目前dubbo支持的扩展实现有zookeeper、Apollo

	    外部化配置比本地有更高的优先级，因此会覆盖本地配置，可以通过-Ddubbo.config-center.highest-priority=false
	来调整配置中心的优先级

	    外部化配置有全局和应用两个级别，全局配置时所有应用共享的，应用级配置由每个应用自己维护，且仅对自身可见

	zookeeper配置的节点：
		   dubbo   namespace，不同配置的环境隔离，默认是dubbo,可以在<dubbo:config-center/>中修改这个属性
		     ↓
		   config  dubbo约定的固定节点
	     ↓			 ↓
	   dubbo(group值)    application(应用名)
	     ↓			 ↓
	  dubbo.properties   dubbo.properties
            全局配置		应用配置

	服务治理：
	    服务治理主要是用来保存注册的服务，并且给消费者订阅服务的，它在zookeeper中保存的节点结构如下：
			dubbo    namespace
			  ↓
			config   固定节点
			  ↓
			dubbo    所有服务治理规则都是全局的，默认的节点是dubbo
	   ↓ 	          ↓	    	    ↓
   xxx.configurators  xxx.tag-router   xxx.condition-router
     覆盖规则		标签路由	  条件路由	这三个规则以不同的key后缀区分


配置加载流程：
    
    dubbo配置来源：
	1、-D参数，虚拟机参数
	2、外部化配置，比如配置中心
	3、ReferenceConfig、ServiceConfig等编程接口采集的配置
	4、本地配置文件dubbo.properties
    	优先级：-D参数->外部化配置->API配置->本地文件
    

自动加载环境变量：

	dubbo从2.7.3版本开始，会自动从约定的key中读取配置，并将该配置以key-value的形式写入URL中

	直接将值写入URL中：
	    JVM：-Ddubbo.labels="key1=value1; key2=value2"
	    环境变量：DUBBO_LABELS="key1=value1; key2=value2"

	从环境变量中取出值写入URL中：
	    JVM：-Ddubbo.env.keys："key1, key2"
	    环境变量：DUBBO_ENV_KEYS："key1, key2"
	    最终会生成：dubbo://xxx?key1=value1&key2=value2


启动时检查：

    dubbo默认会在启动时检查依赖的服务是否可用，不可用时会抛出异常，阻止Spring初始化完成，默认check=true

    关闭某个服务启动时检查（没有提供者时报错）：
	<dubbo:reference interface="com.foo.BarService" check="false"/>

    关闭所有服务的启动时检查（没有提供者时报错），提供默认配置，如果dubbo:reference有显式声明则会被覆盖：
	<dubbo:consumer check="false"/>

    关闭注册中心启动时检查（订阅服务失败时报错），订阅失败也允许启动，将在后台定时重试：
	<dubbo:registry check="false">


集群扩展：

    当有多个服务提供方时，将多个提供方组织成一个集群，并伪装成一个提供方

    扩展接口：org.apache.dubbo.rpc.cluster.Cluster，该接口有一个merge方法需要实现：
	public class XxxCluster implements Cluster {
	    public <T> Invoker<T> merge(Directory<T> directory) throws RpcException {
  	      return new AbstractClusterInvoker<T>(directory) {
   	         public Result doInvoke(Invocation invocation, List<Invoker<T>> invokers, LoadBalance loadbalance) throws RpcException {
  	              // ...
    	        }
   	     };
  	  }
	}
	该接口需要返回一个执行器对象，该对象是是提供者某个可调用Service的抽象，示例的实现doInvoke会传入一个调用的
    服务，一个可用的服务列表，一个负载均衡对象，然后返回一个接口，也就是把调用的，当前有的，和负载均衡给出来自己选
    一个服务

    已知扩展，代表故障时的不同处理方式：
	org.apache.dubbo.rpc.cluster.support.FailoverCluster：
	    失败自动切换，当出现失败时重试其它服务器，但重试会带来更长延迟，可通过retries="2"来设置重试次数，(不包
	含第一次)，示例：
	<dubbo:service retries="2"/>
	<dubbo:reference retries="2"/>
	<dubbo:reference>
	   <dubbo:method name="findFoo" retries="2"/>
	</dubbo:reference>
	这个是为指定的reference中的接口的指定方法设置自己的重试次数

	org.apache.dubbo.rpc.cluster.support.FailfastCluster：
	    快速失败，只发起一次调用，失败立即报错。通常用于非幂等性的写操作，比如新增记录

	org.apache.dubbo.rpc.cluster.support.FailsafeCluster：
	    失败安全，出现异常时，直接忽略。通常用于写入审计日志等操作

	org.apache.dubbo.rpc.cluster.support.FailbackCluster：
	    失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作

	org.apache.dubbo.rpc.cluster.support.ForkingCluster：
	    并行调用多个服务器，只要一个成功即返回，通常用于实时性要求较高的读操作，但浪费更多服务器资源，可通过
	forks="2"来设置最大并行数

	com.apache/alibaba.dubbo.rpc.cluster.support.BroadcastCluster：
	    广播调用所有提供者，逐个调用，任意一台报错则报错，通常用于通知所有提供者更新缓存或日志等本地资源信息，
	2.1.0开始支持

	org.apache.dubbo.rpc.cluster.support.AvailableCluster：
	    没找到相关信息

    maven项目下集群配置文件路径：
	-resources/META-INF/dubbo/org.apache.dubbo.rpc.cluster.Cluster
        内容为xxx=com.xxx.XxxCluster，xxx是要在配置文件中cluster属性引用的目标，比如这里配置了x1，那么cluster="x1"
    就会使用这个类

    启用集群：
	<dubbo:protocol cluster="xxx"/>：实测这个不能用，会报错，dubbo版本2.5.3
	<dubbo:reference cluster="xxx"/>
	<dubbo:provider cluster="xxx"/>：全局配置，如果<dubbo:protocol/>没有配置cluster将使用此配置
	cluster代表集群方式，可选：failover/failfast/failsafe/failback/forking

    步骤总结：
	1、实现org.apache.dubbo.rpc.cluster.Cluster接口
	2、在/resources/META-INF/dubbo/org.apache.dubbo.rpc.cluster.Cluster文件下添加集群名称对应的类，比如
    available=org.apache.dubbo.rpc.cluster.support.AvailableCluster
	3、在服务提供方配置集群模式：<dubbo:service cluster="available"/>或用<dubbo:provider cluster="available"/>
    进行全局默认配置，提供方实测不需要配置
	4、在服务消费方配置集群模式：<dubbo:reference cluster="available"/>或用<dubbo:consumer cluster="available"/>
    进行全局默认配置

	注意：提供者不需要配置，只需要在客户端配置负载均衡和集群就能正常使用，提供者集群信息从zookeeper获取，负载
    均衡在客户端实现，官方文档有说提供者要配置集群，不知道意义何在
	

集群容错：
    参考集群扩展部分org.apache.dubbo.rpc.cluster.Cluster接口的多个实现类，代表在服务调用报错时的不同处理方式


负载均衡：
    
    扩展接口：
	org.apache.dubbo.rpc.cluster.LoadBalance

    扩展配置：
	<dubbo:protocol loadbalance="xxx"/>
        <dubbo:provider loadbalance="xxx"/>：全局配置，相当于为当前应用设置了默认的负载均衡
	<dubbo:reference loadbalance="xxx"/>：为单个服务指定负载均衡策略
    
    已知扩展：
	org.apache.dubbo.rpc.cluster.loadbalance.RandomLoadBalance
	org.apache.dubbo.rpc.cluster.loadbalance.RoundRobinLoadBalance
	org.apache.dubbo.rpc.cluster.loadbalance.LeastActiveLoadBalance

    扩展配置文件：
	maven项目：/resources/META-INF/dubbo/org.apache.dubbo.rpc.cluster.LoadBalance
	内容为：xxx=com.xxx.xxxLoadBalance(自己实现的负载均衡类)

    步骤总结：
	1、实现LoadBalance接口
	2、在/resources/META-INF/dubbo/org.apache.dubbo.rpc.cluster.LoadBalance文件中填写类名对应的别名
	3、在配置文件中天下loadbalance="xxx"配置

    负载均衡策略：
	默认为random随机调用

	RandomLoadBalance：
	    随机，按照权重设置随机概率
	    调用量越大分布越均匀，而且按照概率使用权重后也比较均匀，有利于动态调整提供者权重

	RoundRobinLoadBalance：
	    轮询，按公约后的权重设置轮询比率
	    存在慢的提供者累计请求的问题，比如：某台机器很慢，但没挂，一旦请求到那里就卡住，久而久之都卡在那台了

	LeastActiveLoadBalance：
	    最少活跃调用数，相同活跃数的随机，活跃数指调用前后时间计数差
	    使慢的提供者提供者收到更少请求，因为越慢的提供者调用前后时间计数差越大

	ConsistentHashLoadBalance：
	    一致性Hash，相同参数的请求总是发到同一提供者
	    当某一台提供者挂掉时，原本法王该提供者的请求基于虚拟节点，平摊到其它提供者，不会引起剧烈表动
	    默认只对第一个参数进行Hash，如果要修改，请配置：
		<dubbo:parameter key="hash.arguments" value="0,1"/>：0,1代表第0到第1个参数
	    默认用160份虚拟节点，如果要修改，请配置：
		<dubbo:parameter key="hash.nodes" value="320"/>：修改虚拟节点为320份

    配置方式：
	服务端服务级别：
	    <dubbo:service interface="..." loadbalance="roundrobin"/>：实测2.5.3中不可用

	客户端服务级别：
	    <dubbo:reference interface="..." loadbalance="roundrobin"/>

	服务端方法级别：
	    <dubbo:service interface="...">
		<dubbo:method name="..." loadbalance="roundrobin"/>
	    </dubbo:service>

	客户端方法级别：
	    <dubbo:reference interface="...">
		<dubbo:method name="..." loadbalance="roundrobin"/>
	    </dubbo:reference>


线程模型：
	
    dubbo发送消息有两种方式，第一种是直接在长连接io里面发送，这样做的好处是直接在IO线程上处理更快，因为减少了线程
池调度，缺点是如果事件处理逻辑较慢，比如查数据库，将会导致IO线程阻塞，不能接收其它请求。第二种是将消息派发到线程池
，发起新的IO请求，这种方式的优点是不会阻塞其它新的请求，缺点是增加了线程池调度，会比较慢

    线程模型配置：
	<dubbo:protocol dispatcher="all"/>
	dispatcher options：
	    all：
	    	所有消息都派发到线程池，包括请求、响应、连接/断开事件、心跳等
	    direct：
	    	所有消息都不派发到线程池，全部在IO线程上执行
	    message：
	    	只有请求/响应的消息派发到线程池，其它连接/断开事件、心跳等消息直接在IO线程上执行
	    execution：
	    	只有请求消息派发到线程池，其它响应、连接/断开、心跳等消息直接在IO线程上执行
	    connection：
	    	在IO线程上，将连接/断开事件放入队列，有序逐个执行，其它消息都派发到线程池

    线程池配置：
	<dubbo:protocol threadpool="fixed" threads="100(最大线程数)"/>
	threadpool options：
	    fixed：
		固定大小线程池，启动时建立线程，不关闭一直持有(默认)
	    cached：
		缓存线程池，空闲一分钟自动删除，需要时重建，任务数量超过maximum时直接抛RegectedExecutionException
	    异常
	    limited：
		可伸缩线程池，但线程数只会增长不会收缩，不收缩是为了避免搜索时突然来了大流量引起的性能问题
	    eager：
		优先创建Worker线程池。在任务数量大于corePollSize，但是小于maximumPoolSize时，优先创建Worker来处理
	    任务。当任务数量大于maximumPoolSize时，将任务放入阻塞队列中，阻塞队列充满时抛出RegectedExecutionException
	        Worker线程池就是线程池中有一个Worker集合，这个集合中的Worker会不停地获取task，然后执行task


直连提供者：

    在开发及测试环境下，经常需要绕过注册中心，只测试指定的服务提供者，这时候可能需要点对点直连，这种方式将以服务接
口为单位，忽略注册中心的提供者列表，并且某个接口配置了点对点并不影响其它接口从注册中心获取服务列表

    配置方式：
	1、JVM参数：-Dcom.xxx.XxxService=dubbo:/127.0.0.1:20880(1.0.15以上版本)
	2、配置文件：${user.home}/dubbo-resolve.properties，文件内容以key(接口)=value(地址)的方式配置(2.0以上版本)
	3、xml配置：<dubbo:reference id="xxxService" interface="com.xxx.XxxService" url="dubbo:/127.0.0.1:20880"/>(1.0.6以上版本)

        配置文件路径自定义：
	    dubbo2.0以上版本会自动去${user.home}目录下去找配置文件，如果想自定义位置文件路径，可以用-Ddubbo.resolve.file
	=xxx/xxx.properties参数来指定路径

    注意：为了避免复杂化线上环境，不要在线上使用这个功能，只应在测试阶段使用(dubbo官方文档建议)


只订阅(不注册)：

    为方便开发测试，经常会在线下共用一个所有服务可用的注册中心，这时，如果一个正在开发中的服务提供者注册，可能会影
响消费者不能正常运行
    这时可以让服务提供者开发方只订阅服务(开发的服务可能依赖其它服务)，而不注册正在开发的服务，通过直连测试正在开发
的服务

    配置方式：
	1、<dubbo:registry address="127.0.0.1:20880" register="false"/>
	2、<dubbo:registry address="127.0.0.1:20880?register=false"/>


只注册(不订阅)：

    如果有多个注册中心，某个服务只在其中一个注册中心中注册了，而这个服务在两个注册中心中都有很多服务依赖它，由于服
务不存在，其它服务一订阅就会报错，因此可以让其它服务不订阅它

    配置方式：
	1、
	<dubbo:registry id="registry1" address="127.0.0.1:20880"/>(正常注册订阅)
	<dubbo:registry id="registry2" address="127.0.0.1:20881" subscribe="false"/>(只注册不订阅)
	2、
	<dubbo:registry id="registry1" address="127.0.0.1:20880"/>(正常注册订阅)
	<dubbo:registry id="registry2" address="127.0.0.1:20881?subscribe=false"/>(只注册不订阅)


静态服务：

    人工管理上线和下线，服务提供者初次注册时为禁用状态，需要人工启用，断线时，将不会自动删除，需人工禁用，通常由脚
本监控中心页面等调用
    
    配置方式：
	1、<dubbo:registry address="127.0.0.1:20880" dynamic="false"/>
	2、<dubbo:registry address="127.0.0.1:20880?dynamic=false"/>

    第三方服务提供者，可以向注册中心写入提供者地址信息，消费者正常使用：
	RegistryFactory registryFactory = ExtensionLoader.getExtensionLoader(RegistryFactory.class).getAdaptiveExtension();
	Registry registry = registryFactory.getRegistry(URL.valueOf("zookeeper://10.20.153.10:2181"));
	registry.register(URL.valueOf("memcached://10.20.153.11/com.foo.BarService?category=providers&dynamic=false&application=foo"));


多协议：

    Dubbo允许配置多协议，在不同服务上支持不同协议，或者同一服务同时支持不同协议

    不同服务在性能上适用不同协议进行传输，比如大数据用短连接协议，小数据大并发用长连接协议

    多协议定义：
	<dubbo:protocol name="dubbo" port="20880"/>
	<dubbo:protocol name="rmi" port="1099"/>

    多协议使用：
	<dubbo:service interface="com.xxx.XxxService1" version="1.0.0" ref="xxxService" protocol="dubbo"/>
	<dubbo:service interface="com.xxx.XxxService2" version="1.0.0" ref="xxxService" protocol="rmi"/>

    同一接口多协议暴露：
	<dubbo:service id="xxxService" interface="com.xxx.XxxService" version="1.0.0" protocol="dubbo,hessian"/>

    服务消费者在<dubbo:reference/>中定义的协议必须匹配提供者的协议才能进行通信，通过url来定义自己的提供者ip和端口(猜的)


多注册中心：

    Dubbo支持同一服务向多个注册中心同时注册，或者不同服务分别注册到不同的注册中心上去，甚至可以同时引用注册在不同
注册中心上的同名服务。注册中心是支持自定义扩展的

    定义多个注册中心：
	<dubbo:registry id="registry1" address="127.0.0.1:20880"/>
	<dubbo:registry id="registry2" address="127.0.0.1:20881"/>

    同一服务向多个注册中心注册：
	<dubbo:service interface="com.xxx.XxxService" version="1.0.0" ref="xxxService" registry="registry1,registry2"/>

    不同服务向不同注册中心注册：
	<dubbo:service interface="com.xxx.XxxService" version="1.0.0" ref="xxxService" registry="registry1"/>
	<dubbo:service interface="com.xxx.XxxService1" version="1.0.0" ref="xxxService1" registry="registry2"/>

    从不同注册中心引用服务：
	<dubbo:regerence id="service1" interface="com.xxx.XxxService" version="1.0.0" registry="registry1"/>
	<dubbo:regerence id="service2" interface="com.xxx.XxxService2" version="1.0.0" registry="registry2"/>

    测试临时连接两个注册中心：
	<dubbo:registry address="127.0.0.1:80880|127.0.0.1:10881"/>(多个地址用|隔开)
    
    注册中心id在多注册中心时使用，为了让每个服务通过id引用各自的注册中心，如果只有一个注册中心则默认使用，因此不用id


服务分组：

    当一个接口有多种实现时，可用group区分

    服务定义成a组：
	<dubbo:service group="a" interface="com.xxx.XxxService"/>
    引用a组：
	<dubbo:reference id="xxxService" group="a" interface="com.xxx.XxxService"/>
    引用任意组(只会调用某一个可用组的实现)：
	<dubbo:reference id="xxxService" group="*" interface="com.xxx.XxxService"/>


多版本：

    当一个接口实现，出现不兼容升级时，可以用版本号过滤，版本号不同的服务互相间不引用

    可以按照以下步骤进行版本迁移：
	1、在低压力时间段，先升级一般提供者为新版本
	2、再将所有消费者升级为新版本
	3、将剩下的一般提供者升级为新版本

    消费者不区分版本，消费任意版本的服务：
	<dubbo:reference id="xxxService" interface="com.xxx.XxxService" version="*"/>


分组聚合：
	
    将调用同一服务的多个分组来进行结果聚合，比如：
	<dubbo:reference id="xxxService" interface="com.xxx.XxxService" group="a,b" merge="true"/>
        将会调用a组和b组的xxxService接口的结果进行合并
    这个功能感觉不常用


参数验证：

    dubbo可以对参数进行验证，比如服务间传输的bean，跟spring mvc的验证一样的用法，pojo可以在属性里面用注解验证，基
本类型可以在接口参数处加注解进行验证，2.1.0版本开始支持

    需要导入JSR303标准的验证注解：
	<dependency>
	    <groupId>javax.validation</groupId>
	    <artifactId>validation-api</artifactId>
	    <version>1.0.0.GA</version>
	</dependency>
	<dependency>
	    <groupId>org.hibernate</groupId>
	    <artifactId>hibernate-validator</artifactId>
	    <version>4.2.0.Final</version>
	</dependency>

    然后在接口声明处进行配置：
	客户端验证：
	    <dubbo:reference validation="true"/>
	服务端验证：
	    <dubbo:service validation="true"/>
	不同的配置决定了是在消费者调用前验证还是在提供者被调用后验证

    验证结果处理：
	调用服务时验证失败会抛出RpcException异常，这个异常的getCause方法会返回一个ConstraintViolationException异常
    (需要自己强转)，这个异常的getConstraintViolations方法能获取到验证错误信息集合


结果缓存：

    dubbo提供了3种缓存方式：
	lru：基于最近最少使用原则删除多余缓存，保存最热的数据
	threadlocal：当前线程缓存，通过线程缓存可以减少这种多余的访问
	jcache：与JSR107集成，可以桥接各种缓存实现

    为某个接口配置缓存：
	<dubbo:reference interface="xxx" cache="lru"/>
    为某个方法配置缓存：
	<dubbo:reference interface="xxx">
	    <dubbo:method name="findObj" cache="lru"/>
	</dubbo:reference>


泛化引用(消费者泛化)：
	
    泛化接口主要用于客户端没有API接口和实体类的情况，参数和返回值的所有POJO都用Map表示，通常用于框架集成，比如实现
一个通用的服务测试框架

    配置：
	<dubbo:reference id="xxxService" interface="com.xxx.XxxService" generic="true"/>
    使用Java泛化调用：
	GenericService service = (GenericService)appliction.getBean("xxxService");//GenericService接口可以调用所有服务实现
	service.$invoke("sayHello", new String[]{"java.lang.String"}, new Object[]{"world"});// $是方法的合法命名字符
	如果第三个参数是POJO类，那么第二个参数就写该类的全路径字符串，第三个参数里就用Map代替该POJO的属性，每个Map
    代表一个POJO对象
	如果对方接收的是一个接口类型，那么可以在map里加一个值为class的key代表它要用哪个实现类来实现该接口


泛化实现(提供者泛化)：
	
    泛化实现主要用于服务器没有API接口和模型类的情况，参数和返回值中的所有POJO都用Map表示，通常用于框架集成，比如实
现一个通用的远程服务Mock框架，可以处理所有服务请求

    首先需要实现GenericService接口

    然后通过<bean/>注册服务bean和<dubbo:service/>暴露服务

回声测试：

    用于检测服务是否可用，回声测试按照正常请求流程执行，能够测试整个调用是否通畅，可用于监控

    所有服务都会自动实现EchoService接口，只要将任意服务引用强转为EchoService即可使用

    强转为EchoService后调用$echo方法就能进行测试


上下文信息：

    URL 格式：protocol://username:password@host:port/path?key=value&key=value
	解释：协议://用户名:密码@ip:端口/路径?key=value&key=value
	示例：dubbo://192.168.1.5:20880/com.boc.TestService?anyhost=true&application=provider
    所有的配置属性都对应URL的参数，用户名和密码是针对zookeeper用的，如果zookeeper设置了就需要，否则省略就行

    RPC上下文是一个hreadLocal的临时状态记录器，当收到RPC请求，或发起RPC请求时，RpcContext的状态都会变化，比如A调B
，B再调C，那么A调B时是RPC上下文记录的是A调B的信息，B调C后记录的是B调C的信息，可以通过RpcContext的静态方法获取信息


隐式参数：

    可以通过RpcContext的setAttachment和getAttachment方法在服务消费方和提供方直接进行隐式传参，setAttachment设置的
参数在每次远程调用后都会被清空，每次调用都要重新设置

    path、group、version、dubbo、token、timeout几个key都是保留字段，需要使用其它值


consumer异步调用：

    从v2.7.0开始,Dubbo所有异步编程接口都以CompletableFuture为基础，注意版本，如果版本不够使用异步调用会报错，比如
异步调用需要接口返回的CompletableFuture必须是序列化的

    大概流程就是服务返回CompletableFuture对象，泛型是原本要返回的对象然后从CompletableFuture对象里面用whenComplete
方法传进去一个函数式接口对象，第一个参数是返回值，第二个是异常对象，如果没有异常第二个参数就为null，然后通过回调的
方式进行异步调用


provider异步执行：

    跟异步调用也一样，返回的是一个CompletableFuture，避免线程阻塞，由于在阿里云上没有dubbo2.7.0之后的包，因此没有
继续测试


参数回调：

    在服务提供者调用服务消费者，Dubbo会基于长连接生成反向代理

    首先需要在接口定义一个添加侦听器的方法，需要传输一个侦听器对象与一个对应的key，然后服务提供者保存这个侦听器，
可以用Map，然后服务提供者在声明服务时为该添加侦听器的方法配置侦听器类型：
    <dubbo:service connections="1" //建立连接的个数 callback="1000" //可能是侦听器的最大数量>
	<dubbo:method name="addListener">
	    <dubbo:argument type="com.xxx.CallbackListener" callback="true"/>
	</dubbo:method>
    <dubbo:service>

    可能是消费者的原对象先保留着，等到提供者调用侦听器的时候，再通过代理对象通过长连接用反射调用消费者的原对象，以
达到回调的目的


事件通知：

    可以在消费端的<dubbo:reference>中定义<dubbo:method>，method标签中有几个属性：oninvoke、onreturn、onthrow，这几
个属性分别可以在该服务的该方法被执行、返回、异常的时候调用该属性指定的目标，比如：oninvoke=nofify.invoke，就会调用
beanName为nofify的bean的invoke方法

    几种事件回调的参数：
	onreturn：void (retClass ret, Integer id)，第一个参数是所调用方法的返回值对象，第二个是调用方法传递的参数，可以不写

	onthrow：void (Throwable ex, Integer id)，第一个是服务抛出的异常，第二个是调用方法传递的参数，可以不写

    注意：2.5.3版本的oninvoke使用会出现报错，因为在DubboBeanDefinitionParser.parse方法中只针对onthrow和onreturn进
行处理，没有对oninvoke处理，因此oninvoke会出现bean找不到异常，所以要么重新修改源码，或者使用新版本的包，据说新版本
没有这个问题

    如果使用了异步调用，那么事件通知的时机就无法确定了，这取决于回调的时机


本地存根：
    接口的stub属性，可以指定一个接口，这个接口要实现原本的接口，调用接口的方法会先进入这个stub，然后交给stub执
行，stub必须提供一个构造器让原接口入参，因此stub就类似于一个过滤器
    如果stub=true，那就会去该接口的包下找接口名+Stub的类


本地伪装：

    本地伪装通常用于服务降级，当服务提供方全部挂掉之后，客户端不抛出异常，而是通过Mock数据返回失败

    mock约定只有出现RpcException时才执行

    mock可以通过在<dubbo:reference>标签里添加mock属性来使用

    比如：<dubbo:reference interface="com.foo.BarService" mock="return null" />

    mock进阶用法：

	使用return来返回一个字符串表示的对象，作为mock的返回值：
	    com.boc.BarServiceMock：该接口必须实现引用的接口，并未每个方法实现异常返回的mock
	    return empty：基本类型是默认值，集合类型是空集合
	    return null：null
	    return true：回去找该接口的Mock，比如com.boc.DemoService，就会去找com.boc.DemoServiceMock
	    return false：不使用mock
	    return JSON格式：反序列化JSON得到的对象

    2.6.6以上版本才支持：

	使用throw来返回一个Exception对象，作为mock的返回值：
	    throw：调用出错时，抛出一个默认的RPCException
	    throw com.foo.MockException：调用出错时，抛出指定异常

	使用fouce代表强制使用mock行为，这种情况下不会走远程调用：
	    force:return fake
	    force:throw com.foo.MockException

	使用fail与默认行为一样，只有调用错误才会使用mock行为：
	    fail:return fake

	fail和fouce都可以使用throw和return

	以上在2.5.6版本，除了制定Mock实现，其余的都无效，就算制定实现了Mock出现异常也不会生效


延迟暴露：

    <dubbo:service delay="-1">：
	延迟到spring初始化完成后再暴露服务

    <dubbo:service delay="5000">：
	延迟到spring初始化完成5秒后再暴露服务

    Dubbo-2.6.5及以后的版本都是在Spring初始化完之后再暴露，初始化完成基于ContextRefreshedEvent事件触发


并发控制：

    <dubbo:service interface="com.boc.DemoService" executes="10"/>
	限制服务器执行DemoService所有并发执行的线程不能超过10个

    <dubbo:service interface="com.boc.DemoService">
	<dubbo:method name="sayHello" executes="10"/>
    </dubbo:service>
	限制服务器执行DemoService的sayHello方法所有并发执行的线程不能超过10个 

    <dubbo:service interface="com.boc.DemoService" actives="10"/>
    或
    <dubbo:reference interface="com.boc.DemoService" actives="10"/>
	限制demoService的所有方法，每个客户端并发执行或占用连接的请求数不超过10个

    <dubbo:service interface="com.boc.DemoService">
	<dubbo:method name="sayHello" actives="10"/>
    </dubbo:service>
    或
    <dubbo:reference interface="com.boc.DemoService">
	<dubbo:method name="sayHello" actives="10"/>
    </dubbo:reference>
	每个客户端在sayHello方法并发执行或占用连接的请求数不能超过10个

    reference优先级比service高，consumer优先级比provider高，参考Dubbo官方文档-XML配置-不同粒度配置的覆盖关系


连接控制：

    <dubbo:provider protocol="dubbo" accepts="10"/>
    或
    <dubbo:protocol name="dubbo" accepts="10"/>
	限制服务器接收的连接不能超过10个，因为连接在服务上，所以配置在provider

    <dubbo:reference interface="com.boc.DemoService" connections="10"/>
    或
    <dubbo:service interface="com.boc.DemoService" connections="10"/>
	限制客户端在该服务使用的连接不能超过10个


延迟连接：

    <dubbo:protocol name="dubbo" lazy="true"/>
	该配置只对长连接的dubbo协议生效，用于减少长连接数，当发起调用时才会创建长连接


粘滞连接：

    粘滞连接尽可能让客户端总是向同一提供者发起调用，除非该提供者挂了，再连接另一台

    粘滞连接将自动开启延迟连接，以减少长连接数

    <dubbo:reference id="xxxService" interface="com.xxx.XxxService" sticky="true"/>

    也支持方法级别的粘滞连接，在<dubbo:reference>中使用<dubbo:mothod>就行了，还是用sticky标签


令牌验证：

    通过令牌可以在注册中心控制权限，以决定要不要发令牌给消费者，可以防止消费者绕过注册中心访问提供者，还可以通过注
册中心灵活改变授权方式，而不需要修改提供者

    提供者
	负责生成令牌和验证令牌
    
    注册中心
	负责管理令牌和授权

    消费者
	负责接收令牌和通过令牌访问

    应用级别全局设置令牌（话说provider标签没有interface吧?，不过官网是这么写的，应该是去掉interface才对）：
	<dubbo:provider interface="com.foo.BarService" token="true"/>：随机token，使用UUID生成
	或
	<dubbo:provider interface="com.foo.BarService" token="123456"/>：固定token

    服务级别设置令牌：
	<dubbo:service interface="com.foo.BarService" token="true"/>：随机token，使用UUID生成
	或
	<dubbo:provider interface="com.foo.BarService" token="123456"/>：固定token

    解答了我服务被其他人恶意调用怎么办的疑惑


路由规则：

    2.2.0以上版本支持

    路由规则决定一次dubbo服务调用的目标服务器，分为条件路由规则和脚本路由规则


    






























































