java运行时内存数据区域：
	栈、本地方法栈、堆、程序计数器、方法区(永久代，元空间)

    程序计数器：
	程序计数器是线程私有的，它记录了当前程序执行的字节码行号指示器如果执行的是java代码，计数器记录的是正在执行的虚拟机字节码指令的地址；如果执行的是Native方法，计数器则为空。程序计数器是唯一一个在JVM中没有规定会内存溢出的区域

    Java虚拟机栈：
	栈是线程私有的，它的生命周期与线程相同，存放的元素是栈帧，每个方法执行时都会创建一个栈帧，它包含了存储局部变量表(包含编译器就可知的各种基本数据类型、对象起始地址的引用、returnAddress类型(栈帧中下条指令的地址))、操作数栈(主要用于保存计算过程的中间结果，比如复制、交换)、动态链接(比如import的类链接)、方法出口等信息。每个方法调用到执行完成都对应着一个栈帧在栈中入栈到出栈的过程
	如果线程请求的栈深度超过虚拟机允许的深度，就会抛出StackOverflowError异常；或者栈扩展时如果申请不到足够的内存就会抛出OutOfMemoryError

    本地方法栈：
	本地方法栈是线程私有的，它与虚拟机栈的作用非常相似，区别只是虚拟机栈为Java方法服务，本地方法栈为虚拟机使用的Native方法服务。本地方法栈也会抛出StackOverflowError和OutOfMemoryError异常

    Java堆：
	堆是线程共享的，此区域的唯一目的就是存放对象实例，几乎所有的对象和数组实例都在这里分配内存，有一些技术可以在栈上分配，不过一般用不上。
	堆还可以细分为：新生代、老年代。再细致一点，新生代还有：Eden、From Survivor、To Survivor等。
	如果堆中的内存不足以完成实例分配，且堆无法再扩展，将会抛出OutOfMemoryError异常

    方法区：
	方法区是线程共享的，它用于存储被虚拟机加载的类信息、常量、静态变量、编译后的代码等。
	虽然方法区被很多人称为永久代，因为方法区由永久代实现。但方法区并不是不会被GC回收的，仅仅是因为HotSpot团队选择将GC分代用在方法区，使用了永久代来实现方法区，可以像管理堆一样管理这块内存，这样就能省去专门为方法区编写管理内存代码的工作。
	JVM对方法区的限制非常宽松，除了和堆一样可以选择固定大小或可扩展外，还可以选择不实现垃圾收集，垃圾收集在这个区域很少发生，就算有比如常量池的回收和对类的卸载，它们的条件都很苛刻
	在JDK8中方法区已经由元空间来实现，内存完全放在本地内存了，字符串常量池也移到了堆中，其它常量池依然在方法区
	JVM规范规定，当方法区无法满足内存分配需求时，将抛出OutOfMemoryError
    静态常量池(Class文件常量池)：
	存放类的版本、字段、方法、接口等信息，在类被加载时就存在了
    运行时常量池：
	存放符号引用、直接引用，运行时常量池可以在类被加载后才加入常量池的，比如String.intern()方法。JDK1.8中字符串常量池移到了堆中其它运行时常量池依然在方法区
    我们常说的常量池指的是运行时常量池，由于运行时常量池也是方法区的一部分，它同样会抛出OutOfMemoryError异常。

    直接内存：
	在本地方法中进行分配的内存，比如NIO使用了本地函数库进行缓冲区的内存分配，这样就能避免在Java对和Native堆中来回复制数据，提高性能，但是这部分内存不被堆管理，但还是受到本机内存的限制，如果超出依然会抛出OutOfMemoryError，会出现设置了-Xmx(最大堆内存)很大的情况下依然内存溢出，因为JVM之外的内存不够用了


判断对象是否需要回收的算法：

    引用计数算法：
	给对象添加一个引用计数器，当有地方引用它时，计数器+1，当引用失效时，计数器-1，当有对象循环引用时，它将无法
    通知GC回收它们
	引用计数器解决循环引用的方法是，重写了=符号的算法，当A引用B时，就是强引用，如果B此时再引用A，那么就会是弱引     用，算法只对强引用进行计数；如果出现一个很大的循环怎么处理，每次赋值都要遍历每个对象的每个引用判断是否有循环引      用吗？这个问题没找到答案


    可达性分析算法：
	通过一系列GC Roots对象向下搜索，搜索走过的路径称为引用链。当一个对象到GC Roots没有任何引用链相连时，也就是    GC Roots到这个对象不可达时，则证明此对象不可用，所以它们将会被判定是可回收的对象
	1、GC Roots可以是栈帧本地变量表中引用的对象
	2、也可以是方法区中静态变量引用的对象
	3、也可以是方法区常量引用的对象
	4、也可以是本地方法栈中引用的对象

对象的回收与finalize()方法：
	当在可达性分析算法中不可到达某个对象时，这个对象并非是必须回收不可的，而是先将它进行一次标记，并筛选其是否      需要执行finalize()方法，如果finalize()方法已被虚拟机调用过，或者对象没有重写finalize()方法，虚拟机都不会执行
	如果这个对象被判定为有必要执行finalize()方法，那么这对象将会放置在一个叫做F-Queue的队列中，然后会由一个虚拟     机创建，低优先级的Finalizer线程去执行。虚拟机只是会触发这个方法，但不承诺等待它运行结束，因为如果某个对象的         finalize()方法执行缓慢，将会导致F-Queue队列中其它对象一直处于等待中，甚至整个回收系统崩溃。finalize()方法是对象     逃过死亡的最后一次机会，稍后GC将对F-Queue中的对象进行第二次标记，如果执行了finalize()变为可达了，那么它就逃脱了     被回收的命运，第二次标记时它将被移出“即将回收”的集合，此时如果它依然不可达，那基本上它就真的被回收了
	每个对象自我拯救(在finalize()中重新建立可达的引用)的机会只有一次，因为就算自我拯救成功，下次如果被回收时        finalize()方法就不会被执行了，因为它已经执行过一次了
        虽然对象可以通过finalize()方法避免被GC回收，或者回收资源，但是并不建议这么做，因为它运行代价高昂，并且充满    不确定性，通过其它方式完全可以做的更好、更及时，比如通过try-finally回收资源


Java中的引用：
    强引用：
	代码中普遍存在的，用=进行赋值的，垃圾收集器永远不会回收被引用的对象
    软引用：
	用SoftReference类来实现的，当系统内存将要溢出时进行回收
    弱引用：
	用WeakReference类来实现，每当进行GC时就会回收掉弱引用的对象，它的声明周期只有一次GC的间隔
    虚引用：
	PhantomReference类来实现，虚引用唯一的作用就是能在这个对象被回收时得到一个系统通知，无法通过虚引用得到对象


方法区的回收：
    方法区的回收主要分为两部分：废弃常量与无用的类

	废弃常量：
	    以常量池中的字符串为例，假如字符串"ABC"进入了常量池中，但是没有任何String对象引用常量池中的"ABC"      	常量，其它地方也没有引用这个字面量，如果这时发生GC，而且必要的话，这个"ABC"就会被系统清理出常量池，常量池中	的其它符号引用，比如：类、接口、方法、字段等也与此类似

	无用的类：判断一个类是否无用需要符合以下三个条件：
	    1、该类的所有实例都被回收了
	    2、加载该类的ClassLoader已经被回收了
	    3、该类对用的java.lang.Class对象没有被任何地方引用，无法在任何地方通过反杀访问该类的方法
	当满足以上三个条件时，就可以对类进行回收，但不代表一定会进行回收，HotSpot虚拟机提供了参数进行控制：
	    -Xnoclassgc：是否对类进行回收
	    -verbose:class：在JVM加载类时会输出信息
	    -verbose:gc：在发生GC时会输出GC信息
	    -verbose:jni：输出native方法调用情况
	    -XX:+traceClassLoading：查看类加载信息
	    -XX:+TraceClassUnLoading：查看类卸载信息
	在大量使用反射、动态代理、CGLib等字节码框架、或者频繁自定义ClassLoad的场景都需要虚拟机具备卸载类的功能，以      保证永久代不会溢出


垃圾收集算法：

    标记-清除算法：
	先对无法到达的对象进行标记，在标记完成之后同一对标记了两次的对象进行回收，不足的是标记与清除的效率都不高，      并且会产生大量不连续的内存碎片

    复制算法：
	将内存分为两块连续、相等的大小，每次只使用其中一块，当一块内存用完时，就将还存活的对象复制到另外一块上，并      将原来那块内存清理掉，这样实现简单高效，而且不会有内存碎片，缺点是内存只有一半，代价太高
	现在的商业虚拟机都采用复制算法来回收新生代
    新生代中的用法：
	由于新生代中98%的对象都活不过一轮GC，所以并不需要按照1:1来划分内存空间，而是分为一块较大的Eden区和两块          Survivor区，每次只是用Eden区和一块Survivor，每当回收时，就将Eden区和Survivor区中还存活着的对象一次性复制到另外      一块Survivor区，然后清理掉Eden和原来的Survivor区，Eden和Survivor的比例是8:1，也就是每次都能使用新生代90%的容量      (当然，如果上次回收Survivor没满的话，实际上最大只有80%+上次没被回收的部分)，仅仅会浪费10%，当存活的对象超过         Survivor区的空间时，就需要依赖老年代进行分配担保(直接将存活的对象放入老年代)
        由于复制算法在对象存活率较高时需要进行较多的复制操作，而且在Survivor区不足的情况下要有额外的空间进行分配担      保，但是老年代没有其它的分配担保空间，所以老年代一般不直接使用这种算法

    空间分配担保：
	发送Minor GC之前会先判断老年代是否能塞的下整个新生代，如果塞不下就会判断HandlePromotionFailure参数：是否允      许担保失败，如果允许，并且老年代剩余的连续空间大于历次晋升老年代的平均值，就会执行一次Minor GC；如果不允许担保
    失败，或者老年代剩余连续空间小于历次晋升老年代的平均值，就会进行FULL GC，然后再Minor GC，如果第一步能直接塞下，     就不用管那么多，直接Minor GC。
	如果大于平均值，但是幸存者大于历次平均值，导致老年代放不下，也会进行Full GC再Minor GC
	

    标记-整理算法：
	标记整理算法在标记的过程与标记-清除算法一样，但是到了清除那一步，不是直接对被标记的对象进行清理，而是让所有     存活的对象都向内存的某一端移动，然后直接清理掉最后一个对象之后的内存，这样就能保证没有内存碎片

    分代收集算法：
	这种算法只是将对分为两部分，新生代和老年代，新生代每次垃圾收集都有大量对象失去，所以采用复制算法，只要付出      少量存活对象的复制成本就可以完成收集；而老年代因为对象存活率高，也没有额外的空间对它进行分配担保，就必须使用标      记整理或者标记清除算法来进行回收


HotSpot的算法实现：
    枚举根节点：
	以可达性分析中从GC Roots节点找引用链的操作为例，可作为GC Roots的节点主要有常量、静态变量、栈帧中的本地变量      表中。可达性分析进行工作时还必须保证整个工作在一个能确保一致性的快照中进行，不可以出现分析过程对象引用关系还在      不断变化的情况，否则分析结果的准确度无法得到保证，这点是GC进行时所有Java线程都停顿的重要原因，Sun将这件事称为：     Stop The World
	根节点枚举的意思是JVM统计所有GC Roots的过程

    安全点(Safepoint)：
	在OopMap(一组数据结构，将对象内的偏移量是什么类型、栈和寄存器中哪些位置是引用等信息记录下来，这样GC在扫描时    就能直接得知这些信息了)的协助下HotStop可以快速且准确地完成GC Roots枚举
	HtoStop并没有为每条指令都很差OopMap，而是只有到达安全点时才记录这些信息，而且到了安全点才能暂停其它线程进行     GC，由于安全点不能太频繁以致于增大运行时的负荷，也不能间隔太久让GC等待时间太长，所以只有在方法调用、循环跳转、      异常跳转等具有这些功能的指令才会产生安全点，因为这些功能都不会操作对象引用
	还有一个问题是，怎么在GC发生时让所有线程都到达最近的安全点，然后停顿下来，这里有抢先式中断和主动式中断。抢      先式中断就是在GC发生时直接把所有线程全部中断，如果有线程不在安全点就先恢复线程，让它跑到安全点上，目前几乎没有      虚拟机采用抢先式终端的方式来响应GC事件。主动式中断就是当GC需要中断线程时，不直接操作线程，而是设置一个标志，各      个线程执行时主动去轮询这个标志，当发现中断标志为真时就自己挂起，而且只在安全点与创建对象分配内存的地方进行轮询      中断标志

    安全区域(Safepoint)：
	安全点可以解决线程运行过程如何进入GC的问题，但是还有一种情况，假如线程没分配到CPU时间呢，这种情况下GC等再久    线程也不会进入安全点，最典型的例子就是线程处理Sleep或者Blocked状态，此时线程就去不到中断点响应JVM的中断请求。
	此时就需要安全区域来解决了，安全区域是指这个区域中的任意地方都不会改变对象引用，在这个区域中进行GC是安全的     ，当线程执行到安全区域中的代码时，就标识自己进入了安全区域，当JVM发起GC时，就不会管标识了安全区域的线程，当线程     要离开安全区域时，就要先检查是否已经完成了根节点枚举或者整个GC过程已经结束，如果没完成就一直等待直到收到可以安      全离开安全区域的信号位为止
	那有哪些安全区域？Sleep和Blocked吗？

参数前缀的含义：
    -：标准参数，所有JVM都支持
    -X：非标准参数，基本都是控制JVM的属性
    -XX：非稳定参数，用来控制JVM的行为
    -D：系统参数

垃圾收集器：

    并行：多条垃圾收集线程并行工作，但用户现场依然处于等待状态
    并发：用户线程与垃圾收集器同时执行，但可能是交替执行，也可能是并行执行在不同的CPU上


    Serial(连续)新生代收集器：
	Serial收集器是一个单线程收集器，所以它只会用一个线程去完成垃圾收集工作，更重要的是，它在进行收集时，必须暂      停其它所有的工作线程，直到它收集结束。但是整个程序时不时停一段时间等待GC对很多应用来说是无法接受的
	但它也有自己的优势，比如虚拟机在Client模式，只有单个CPU的情况下，Serial由于没有线程交互的开销，专心做垃圾收     集器可以获得最高的单线程手机效率，所以在Client模式下依然是默认的新生代收集器
	-Xmn：新生代大小
	-XX:SurvivorRatio：Eden与Survivor区的比例， 默认为8，代表Eden:Survivor=8:1
	-XX:PretenureSizeThreshold：晋升老年代的大小，大于这个参数的对象直接在老年代分配，仅支持Serial和ParNew
	-XX:MaxTenuringThreshold：晋升到老年代的年龄，每次坚持过一次Minor GC后年龄+1，超过这个参数就会进入老年代
	-Xmx：设置最大堆
	-XX:UseSerialGC：虚拟机在Client模式下的默认值，打开后使用Serial + Serial Old组合进行内存回收
	-XX:NewRatio：老年和新声代的比例，默认为2，含义是老年代2 : 新生代1
	-XX:MetaspaceSize=256m并不意味着设置元空间的初始大小，由于元空间的初始容量是20M左右，每次空间满了扩容都会进行一次full gc，因此通过这个值来设置元空间的full gc阈值，在这个值之下进行扩容不会触发full gc

    ParNew(Parallel New，并发新生代)新生代收集器：
	ParNew收集器其实就是Serial收集器的多线程版本，除了多线程这点，其它所有控制参数，收集算法，Stop The World，      对象分配规则、回收策略等都与Serial收集器完全一样
	ParNew收集器是许多Server模式下虚拟机中首选的新生代收集器，因为只有它与Serial收集器能与CMS收集器同时进行工作
	-XX:+UseConcMarkSweepGC：使用CMS收集器，这种时候ParNew收集器就是默认的新生代收集器，还有Serial Old处理CMF
	-XX+UseParNewGC：指定ParNew + Serial Old作为收集器组合
	-XX:ParallelGCThreads：进行GC时使用的线程数，默认是与CPU数量相同


    Parallel Scavenge(并发清除)新生代收集器：
	使用复制算法，因此不会出现内存碎片，更加关注吞吐量，也就是GC时间和运行时间的比例，可以指定最长GC时间、指定      GC时间占用运行时间的比例、并且支持自动调节参数
	-XX:MaxGCPauseMillis：最大GC停顿时间，设置一个比0大的毫秒值，收集器会尽可能保证每次花费的时间不超过设定值。     ，设置太小会导致频繁GC
	-XX:GCTimeRatio：用于进行垃圾收集的时间相当于吞吐量的倒数，默认为99，也就是默认为1/(1+99)的垃圾收集时间，支    持1-99
	-XX:+UseAdaptiveSizePolicy：自适应参数的开关，开启后就不需要指定新生代的大小、Eden和Survivor的比例、晋升老
    年代的年龄等参数，虚拟机会根据系统的运行情况自动调节
	-XX:+UseParallelGC：使用Parallel Scavenge + Serial Old组合


    Serial Old(Serial收集器的老年代版本)老年代收集器：
	同样是一个单线程收集器，使用标记-整理算法


    Parallel Old(Parallel Scavenge的老年代版本)老年代收集器：
	使用多线程和标记-整理算法，可以配置Parallel Scavenge使用，在重视吞吐量的场合可以考虑
	-XX:+UseParallelOldGC：使用Parallel Scavenge + Paralel Old组合


    CMS(Concurrent Mark Sweep)老年代收集器：
	基于标记-清除算法实现的并发收集器，低停顿，注重响应速度
	CMS的目标是最短回收停顿时间，它包含4个步骤：
	    1、初始标记：Stop The World，仅仅标记一下GC Roots能直接关联到的对象
	    2、并发标记：可以和用户线程并发执行，进行GC RootsTracing(从根节点向下扫描)
	    3、重新标记：Stop The World，修正并发标记期间用户程序运行导致的标记变更的对象的标记记录
	    4：并发清除：可以和用户线程并发执行，对标记的对象进行清除
	缺陷：
	    1、CMS的默认回收线程是：(CPU数量+3)/4，当CPU数量少的时候，这可能会占去CPU一半的资源
	    2、无法处理浮动垃圾，也就是并发清除过程中，继续产生新的垃圾，这些垃圾在标记之后出现，CMS无法处理它们，		只能等下次GC，而且由于GC过程中用户线程还要运行，因此还要另外预留一部分内存给用户线程使用，这意味着在老年代		没满的时候就要进行GC了，如果此时老年代满了，就会出现Concurrent Mode Failure。现在默认是老年代占用达到92%就	    进行GC
	    3、由于是标记-清除算法，这会导致大量内存碎片
	Concurrent Mode Failure：CMS特有的错误，当进行第四步并发清除的时候，用户线程产生了新的垃圾放到老年代，此时      老年代放不下，CMS又没标记到新对象，无法进行收集，就会出现这个错误。当发生这个错误时，就会启用备用方案：临时启用     Serial Old收集器来重新进行老年代的垃圾收集
	-XX:CMSInitiatingOccupancyFraction：CMS收集器启动的老年代内存占用阈值，默认是92，太低容易频繁GC，太高又容       易出现Concurrent Mode Failure
	-XX:+UseCMSCompactAtFullCollection：CMS收集器进行FullGC时进行内存碎片的合并整理，此过程无法并发，默认开启
	-XX:CMSFullGCsBeforeCompaction：CMS进行多少次不压缩的FullGC后进行一次带压缩的，默认是0，既每次都整理


    G1(Garbage-First)新老年代整合收集器：
	特点：
	    1、并行与并发：G1能利用多CPU、多核的硬件优势，通过并发让Java程序在GC时继续执行
	    2、分代收集：G1能独自管理整个堆，而且它能采用不同的方式去处理新旧对象以获得更好的收集效果
	    3、空间整合：G1将整个堆分为多个区域(Region)，整体上来看是基于标记-整理算法，局部上来看基于标记-复制算法
	  ，这两种算法都意味着G1不会产生内存碎片，这有利于程序长时间运行
	    4、可预测的停顿：G1除了追求低停顿，还能让使用者明确指定在一个M毫秒的时间段内，消耗在垃圾收集上的时间不	    超过N毫秒
	细节：
	    其他收集器收集的范围都是整个新生代或老年代，而G1是将堆划分为多个大小相等的独立区域(Region)，虽然还保留		着新生代和老年代的概念，但他们不再是隔离的了，它们都是一部分Region(不需要连续)的集合
	    之所以G1能建立可预测的停顿时间模型，是因为它可以有计划地避免在整个堆中进行全区域的垃圾收集。G1跟踪各个		Region里的垃圾堆积的价值大小(回收能获得的空间和回收所需的时间)，在后台维护一个优先列表，每次都优先收集价		值最大的Region，这也是Garbage-First名称的来由，这保证了G1收集器在有限的时间内可以获取尽可能高的收集效率
	    Region不是孤立的，因为一个对象分配在Region中，但是它可能在其它的Region引用或者被引用，在做可达性分析时		  岂不是还得扫面整个堆才能保证准确性？G1在不同的Region直接的对象引用时，会为每个Region维护一个Remembered 		Set，虚拟机发现引用类型的对象被写入时，就会判断是否处于不同Region中，如果是的话，就会将引用信息记录到引用		对象所属的Region的Remembered Set中。当进行内存回收时，通过扫描Remembered Set里的对象就可以避免全堆扫描
	    分代收集器的新生代跟老年代之间相互引用也是维护一个列表，进行GC时扫描这个列表里的对象就行了，不用将其它	  	  代的空间也扫描一遍
	步骤：
	    1、初始标记：Stop The World，仅标记一下GC Roots能关联到的对象
	    2、并发标记：与用户现场并发执行，进行可达性分析，找出存活的对象，并将这段时间用户程序导致记录标记的变动		记录在线程Rememberd Set Logs里
	    3、最终标记：停顿用户线程，将Rememberd Set Logs的变动整合到Remembered Set中
	    4、筛选回收：停顿用户线程，对各个Region的回收价值和成本进行排序，再根据用户期望的GC停顿时间制定回收计划
	结论：
	    如果追求低停顿，或者堆很大，那么G1是很好的选择，但是如果追求吞吐量，G1并不会带来特别的好处

GC日志：

    33.125：[GC[DefNew：3324K-＞152K（3712K），0.0025925 secs]3324K-＞152K（11904K），0.0031680 secs] 100.667：[FullGC[Tenured：0K-＞21 K（10240K），0.0149142secs]4603K-＞210K（19456K），[Perm：2999K-＞ 2999K（21248K）]，0.0150007 secs][Times：user=0.01 sys=0.00，real=0.02 secs]
    33.125：从JVM启动到发生GC时间的秒数
    GC：这里不是指GC类型，而是指停顿类型，FULL GC就是Stop The World，GC则不会
    DefNew：发生GC的区域，defNew：新生代，tenured：老年代，perm：永久代，不同收集器名称有点差异，但不会差太多
    3324K-＞152K（3712K）：GC前342K，GC后152K，发生CG的区域总空间3712K
    3324K-＞152K（11904K）：跟上一行相比，这里展示的是整个堆的
    0.0031680 secs：此次GC占用的时间，单位是秒；有的收集器会出现：[Times：user=0.01 sys=0.00，real=0.02 secs]
    [Times：user=0.01 sys=0.00，real=0.02 secs]：user代表用户消耗的CPU时间，sys代表内核消耗的CPU世界，real代表例如磁盘I/O、线程阻塞的耗时，如果是多核CPU，那么前两者可能会超过real的时间，因为多核运算的时间会叠加，同时计算多个核，叠加起来肯定比单线程的时间更多
    总结：以上共有3段GC信息，分别对3个区域进行GC，每段信息基本格式一致，参考书上面就行了



参数：
    -XX:+PrintGCDetails：在发生GC时打印内存回收日志，并在程序退出时输出当前内存各区域的分配情况
    -XX:MaxDirectMemorySize：设置直接内存大小，如果发现新生代和老年代都很稳定，但就是内存溢那就要考虑直接内存了
    -Xss：线程堆栈大小，可以调整所有线程所占空间大小，直接影响了线程最大栈帧与最大线程数量



内存分配与回收：

    新生代GC(Minor GC、Young GC)：指发生在新生代的垃圾收集动作，因为Java对象大多都具备朝生夕死的特性，所以Minor GC非常频繁，回收速度也比较快。一般都使用复制算法，因此不会存在内存碎片，存活对象过多就会放到老年代

    老年代GC(Major GC、Full GC)：指发生在老年代的GC，出现Major GC，经常会伴随至少一次的Minor GC，但并非绝对，在Parallel Scavenge收集器里就有直接进行Major GC的策略选择过程，一般Major GC速度会比Minor GC慢十倍以上

    Survivor区如果相同年龄的对象占的空间大于Surivor的一半，那么在下一次发生Minor GC时，大于等于该年龄的对象将会直接进入老年代，而非在Survivor的from和to区反复横跳

    如果进行Minor GC前发现老年代连续空间可能装不下此次所有对象(因为极端情况会所有对象都幸存)，就会先进行Full GC再Minor GC，如果配置了允许失败，那么只要老年代的空间大于历次的平均值就会冒险Minor GC，如果空间不够失败了再Full GC，具体判断流程参考：空间分配担保



JDK命令行工具：

    如果要监控运行中的程序，在程序启动时要添加参数：-Dcom.sun.management.jmxremote，开启JMX（Java 管理扩展）功能，否则由于部分工具是基于JMX的，将会无法使用。JDK1.6以上是默认开启的，启动时无需加参数


    jps(JVM Process Status Tool)：显示指定系统内所有的HotSpot虚拟机进程
	-q：只输出LVMID（Local Virtual Machine Identifier），本地虚拟机唯一ID，通常也是进程ID
	-m：输出虚拟机启动时传给主类main函数的参数
	-l：输出主类的全名，如果执行的是Jar包，输出Jar路径
	-v：输出虚拟机启动时的JVM参数


    jstat(JVM Statistics Monitoring Tool)用于收集HotSpot虚拟机各方面的运行数据，所有参数最后都要加进程id
	-class：监视类装载、卸载数量，总空间以及装载耗费时间
	-gc：监视堆状况，包括各个代与其各个区的容量，已用空间，GC时间等
	-gccapacity：基本与-gc相同，但主要输出各个堆区域使用到的最大、最小空间
	-gcutil：基本与-gc相同，但主要输出已使用空间占总空间的百分比
	-gccause：基本与-gc相同，但会额外输出导致上一次GC产生的原因
	-gcnew：监视新生代GC状况
	-gcnewcapacity：基本与-gcnew相同，但主要输出新生代使用到的最大、最小空间
	-gcold：监视老年代GC状况
	-gcoldcapacity：基本与-gcold相同，但主要输出老年代使用到的最大、最小空间
	-gcpremcapacity：输出永久代使用到的最大、最小空间
	-compiler：输出JIT编译器编译过的方法、耗时等信息
	-printcompilation：输出已被JIT编译的方法
	各参数含义（太多了，只列出-gc下的参数）：
	    S0C：年轻代中第一个survivor（幸存区）的容量 （字节）
	    S1C：年轻代中第二个survivor（幸存区）的容量 (字节)
	    S0U ：年轻代中第一个survivor（幸存区）目前已使用空间 (字节)
	    S1U ：年轻代中第二个survivor（幸存区）目前已使用空间 (字节)
	    EC ：年轻代中Eden（伊甸园）的容量 (字节)
	    EU ：年轻代中Eden（伊甸园）目前已使用空间 (字节)
	    OC ：Old代的容量 (字节)
	    OU ：Old代目前已使用空间 (字节)
	    MC：metaspace(元空间)的容量 (字节)
	    MU：metaspace(元空间)目前已使用空间 (字节)
	    YGC ：从应用程序启动到采样时年轻代中gc次数
	    YGCT ：从应用程序启动到采样时年轻代中gc所用时间(s)
	    FGC ：从应用程序启动到采样时old代(全gc)gc次数
	    FGCT ：从应用程序启动到采样时old代(全gc)gc所用时间(s)
	    GCT：从应用程序启动到采样时gc用的总时间(s)




    jinfo(Configuration Info For Java)：显示虚拟机配置信息，所有参数最后都要加进程id
	-flag <name>：输出指定虚拟机参数名称的值
	-flag ±<name>：启用或停用指定虚拟机参数，必须是支持的参数，那种自定义的参数无效
	-flags：显示所有的虚拟机参数
	-sysgroup：显示所有的系统属性
	无：打印所有的虚拟机参数与系统属性
	

    jmap(Memory Map For Java)：生成虚拟机的内存转储快照(heapdump文件)，所有参数最后都要加进程id
	-dump:[live,]format=b,file=<filename>：生成Java转储快照，dump后面的3个参数之间用逗号隔开，其中live为可选，        决定了是否只dump出存活的对象，format=b为固定，意思是二进制格式，file就是文件输出的位置
	-finalizerinfo：显示在F-Queue中等待Finalizer线程执行finalize方法的对象
	-heap：显示堆的详细信息，比如使用的收集器、收集器的参数、各个分区分代的使用情况
	-histo：显示堆中数量的统计，比如每个类的实力数量、合计占用空间
	-permstat(jdk1.8下是-clstats)：以ClassLoader为统计口径显示永久代的内存状态
	-F：当虚拟机进程对-dump选项没有相应时，可使用这个选项强制生成dump快照


    jhat(JVM Heap Dump Browser)：用于分许heapdump文件，它会建立一个HTTP服务器，让用户可以在浏览器上查看分析结果
	jhat <file>：直接解析指定的dump文件，然后提供一个服务器进行访问，执行指令后命令行会输出服务器所在的端口，由      于分析功能相对简陋，并且只支持在本机分析，所以一般不会用


    jstack(Stack Trace For Java)：生成虚拟机的线程快照，所有参数最后都要加进程id
	-F：当正常请求不被响应时，强制输出thread dump(线程堆栈）
	-l：除堆栈外，显示关于锁的附加信息
	-m：如果调用到本地方法的话，可以显示C/C++的堆栈


JDK可视化工具：

    JConsole：Java监视与管理控制台
	最重要的是两大块，分别是内存、线程，还有其它一些比如类、CUP、VM整体信息、MBean等
      内存：
	提供了一个时间线查看不同区域的内存占用变化，主要分为两大块：
	    堆内存：
		这部分一共有Eden、Survivor、old三块，记录了新、老年代在不同时间范围下的内存占用情况
	    非堆内存：
		这部分一共有元空间、代码缓存、类空间三块，记录了非堆的内存情况
	除此之外还可以查看不同内存区域当前的占用空间、最大可用空间；新生代、老年代收集器的GC总花费时间与总次数，          并且还能手动进行GC

        线程：
	  可以查看当前VM上的所有线程，并且可以看到每个线程的名称、堆栈跟踪与线程状态；还能检查死锁，并且也提供了一	个时间线查看活动线程的数量变化
	  所以线程起名与分组很重要，不然排查的时候都是Thread1、Thread2...，根本看不出来是哪个线程


    VisualVM：多合一故障处理工具
	主要也是内存与线程分析，可以对堆与线程的dump进行在线分析查看，并且生成离线堆、栈dump(只需选中dump另存为就行      了)；还支持许多插件，比如BTrace可以动态加入调试代码；还能对CPU与内存进行分析，可以分析哪些方法调用最频繁或者	      哪些对象占用最多

优化思路：

    先看运行过程中YGC和FGC的次数，如果是因为容量不够导致一直扩容，可以把初始容量设置大一些，如果YGC过于频繁，新生代可以分配多点空间



class文件：

    无符号数：
	以u1、u2、u4、u8来分别代表1个字节、2个字节、4个字节、8个字节的无符号数，无符号数可以用来描述数字、索引引用    、数量值或者按照UTF-8编码构成字符串值

    表：
	由多个无符号数或者其他表作为构成的符合数据类型，所有表都习惯性的以‘info’结尾，表用于描述有层次关系的复合    数据结构，整个class文件本质上就是一张表

    class文件格式：以下括号里表示的都是无符号数或者表
	
	magic(u4)：
	    魔数，唯一的作用是确定这个文件是不是一个能被虚拟机接受的class文件，很多文件存储标准中都以魔数而非扩展名		进行识别，因为扩展名可以被随意修改。
	    class文件的魔数值为：0xCAFEBABE，8位16进制刚好4个字节

	minor_version(u2)：
	    次版本号，java的小版本号

        major_version(u2)：
	    主版本号，java的主版本号是从45开始的，每个jdk的大版本都会+1，45代表jdk1的话，50就是代表jdk6。
	    高版本的jdk能向下兼容之前版本的class文件，但不能运行之后的版本，虚拟机会拒绝超过其主版本号的class文件，		即使它实际上可以执行
	    比如jdk1.1能支持45.0~45.65535版本的class文件，jdk1.2能支持45.0~46.65536版本的class文件

	constant_pool_count(u2)：
	    常量池容量，因为常量池的大小是会变动的，因此这些变动的部分都需要一个容量来表示它们的大小，从1开始，因为		0保留着用来表示不引用任何常量池

	constant_pool(表)：
	    它包含了很多种常量类型，每种类型都有自己的结构，所有常量开头的u1都是标识位，用来识别常量类型如果是基本		数据类型和字符串常量，就直接记录字面量，如果是其它引用类型，就只记录符号引用
	    使用：javap -verbose <class file path>就可以看到解析后的整个类的格式描述
	常量池里包含两大类常量：
	    字面量：
		既java语言层面的常量，比如final修饰的变量，文本声明的字符串
	    符号引用：
		类和接口的全限定类名、字段的名称和描述符、方法的名称和描述符

	access_flags(u2)：
	    访问标志，用来识别类或接口层次的信息，比如：是类还是接口、是否为public、是否为abstract、是否为final
	    u2说明有16位标志位可用，目前只用了8位

	this_class(表)：
	    类索引，用来确定这个类的全限定类名

	super_class(表)：
	    父类索引，用来确定父类的全限定类名

	interfaces_count(u2)：
	    接口的计数器，如果没有任何接口，则为0，后面的接口表就不存在

	interface(表)
	    接口索引集合，没有接口就为空

	fields_count(2u)：
	    字段的数量

	fields(表)：
	    字段表包含类变量以及实例变量，但不包含局部变量。表里的信息有：作用域、是否static、是否final、是否			volatile、是否tansient、字段数据类型、字段名称等等。字段表里不会存在父类中继承来的字段，但是内部类为了保持		对外部类的访问性，会自动添加指向外部类实例的字段

	methods_count(u2)：
	    表示方法的数量

	methods(表)：
	    包含作用域、是否static、是否final、synchronized、是否为native、是否为abstract、是否为strictfp、是否接受		不定参数、属性表集合(也就是下面的attributes)，也会包含重写的父类方法，并且还默认有<clinit>、<init>，分别是	类初始化方法和实例初始化方法

	attributes_count：

	attributes(表)：
	    属性表包含java代码编译成的字节码指令、final定义的常量值、被声明为销毁的方法和字段、方法抛出的异常、如果		作为局部类或者匿名类，还会表示这个类所在的外围方法、内部类列表、java源码行号和字节码的对应关系、局部变量描	述、方法的泛型签名、类文件名称、标识方法和属性为编译器自动生成、注解在运行过程是否可见(注解声明时可以指定运	行级别)

	    Code(表)：
		Code属性表出现在方法表的属性集合中，但是抽象方法就不存在Code属性，它是由Java程序方法中的代码经过	    	javac编译器处理后，最终变为字节码指令存储在Code属性内
		Code属性表里包含了：
		操作栈的最大深度max_stack
		局部变量表max_locals所需的存储空间(包括局部变量、方法参数、catch捕获的每个异常变量、隐式的this，这		些东西可能会超出它的作用域，比如匿名内部类，编译器会根据作用域进行分配，因此不能简单地把所有局部变量加起来		当做的大小，以soft作为单位，32位及以下的算1个slot，像double和long的就算2slot)
		字节码长度code_length，为u4类型，也就是单方法最多2^32-1条指令，但实际只用了u2的长度
		字节码指令code(每个code都是一个u1类型，u1有256位，因此可以表达256条指令，java虚拟机规范已经定义了约		200条指令的含义)
		显式异常处理表exception table：简称异常表，有4个属性，开始行(from)、结束行(to)、处理行(target)、异		常类型(type)，当字节码在from行到to行(不包含to行)之间发生异常，并且异常是异常表的type或其子类，则跳转到			target行。可通过javap -verbose命令查看具体异常表的信息，前提是查看的类里的方法有进行显式捕获异常，在Code下		面可以看到Exception table
	    
	    Exceptions(表)：
		异常表，列举了方法签名里的throws抛出的异常，与显示异常处理表不是一回事，显示异常是包含在Code里的，		而异常表是与Code平级的

	    LineNumberTable(表)：
		描述源码行号与字节码行号的对应关系。它并非运行时必须的属性，但会默认生成到class文件中，可以使用			-g:none来关闭，或使用-g:lines来开启这项信息生成。如果不生成LineNumberTable属性，最主要的影响就是抛异常时，		堆栈中将不会显示出错的行号，并且在debug时，无法按照源码行来设置断点

	    LocalVariableTable(表)：
		LocalVariableTable属性用于描述栈帧中局部变量表中的变量与源码变量之间的关系，它也不是运行时必须的属		性，但会默认生成到class文件中可以使用-g:none来关闭或者-g:vars来开启。如果没有这项属性，最大的影响是方法的参		数名称丢失，IDE会使用arg0、arg1之类的占位符来代替原参数名，调试时也无法根据参数名从上下文中获取值

	    SourceFile(表)：
		记录生成这个class文件的源码文件名称，也是一个可选属性，使用-g:none关闭或-g:source开启，大多数类的类		名和文件名是一致的，但是一些特殊情况比如内部类，如果不开启这项属性，出现异常时堆栈中将看不到错误代码所属的		文件名

	    ConstantValue(表)：
		对于成实例变量，赋值是发生在<init>方法中。对于静态变量，赋值有<clinit>方法和ConstantValue属性两种，	如果同时使用final和static来修饰一个变量，并且这个变量是基本类型或者String类型的话，就生成ConstantValue属性	进行初始化，否则就选择在<clinit>方法中进行初始化

	    InnerClasses(表)：
		用于记录内部类和宿主类之间的关联。会分别记录有哪些内部类，还有自己的宿主类

	    Deprecated：
		用于标识某个类、方法、字段不被推荐使用，可以使用@Deprecated注解进行设置

	    Synthetic：
		用于标识字段不是由Java源码生成的，而是编译器自行添加的，除了<init>和<clinit>

	    StackMapTable：
		用来校验字节码的合法性，在编译阶段会将验证类型记录在Class文件中，只要检查这些StackMapTable就可以代	替类型推导过程，从而大幅度提升字节码验证的性能

	    Signature：
		记录了类、属性、方法的泛型信息，由于java泛型采用的是擦除法实现的，因此运行时无法得知泛型信息。这个	属性就是为了弥补这个缺陷而增设的，Java反射之所以能获取到泛型，就是因为有了这个属性

	    BootstrapMethods：
		这个属性用于保存InvokeDynamic指令引用的引导方法限定符，InvokeDynamic和java.lang.Invoke关系密切，后	面才会详细讲

全限定类名：
    全限定类名就是包名+类名，不同的是全限定类名把.换成/，为了使多个连续的全限定类名直接不产生混淆，在使用时会在后面加入一个;来表示全限定类名结束

简单名称：
    简单名称是指没有类型和参数修饰的方法或字段，比如A类B方法C属性的简单名称就是：A、B、C

描述符：
    描述字段的数据类型、方法的参数列表(包括数量、类型和顺序)、返回值

描述符规则：
    基本类型会用类型名称的首字母大写表示，比如int就是I，而boolean和byte会有冲突，因此boolean用Z来表示，void则用V来表示，其它引用类型都用L+全限定类名来表示，而数组则在原类型的基础上加[，每多一维就加一个[，比如String[][]记录为[[Ljava/lang/String，char[][]记录为[[C
    在描述方法时，会先描述参数列表，然后是返回值，参数列表按照参数的顺序放在一组()里面，比如void inc()的描述符为()V，String toString()的描述符为()Ljava/lang/String，int size(char[] source)的描述符为([C)I。
    方法名为<init>的代表构造函数，为<clinit>代表静态构造器


strictfp关键字：
    strict float point，既精确浮点，可以对类、接口、方法使用，效果是将这个类、方法、接口里的所有浮点运算都以IEEE-754标准来执行，这会使得不同平台下运行结果能保持一致


常量池：

    class文件常量池(class文件中)：
	在class文件中的常量，比如方法名、类名、方法参数名、属性名、字面量等等

    运行时常量池(JDK1.8中运行时字符串常量池移到了堆中，其它常量池依然在方法区)：
	运行时jvm每加载一个类，都会将其中的字面量加载到运行时常量池中，目前是在堆中，如果已存在就返回之前该常量第一    次出现时的引用，判断是否已存在，需要依靠全局字符串常量池

    全局字符串常量池(方法区中)：
	是一个HashTable结构，保存了所有字符串常量的引用，每加载一个常量，都会先来这里查是否已存在，如果未存在就加入    运行时常量池，然后在这里保存一遍引用，如果已存在就将已有的引用返回去


关于以下代码：
        String str1 = new StringBuilder().append("程").append("序").toString();
        System.out.println(str1.intern() == str1);
        String str2 = new StringBuilder().append("ja").append("va").toString();
        System.out.println(str2.intern() == str2);
    结果是true、false，因为第一次加入常量池中的时候，比如intern()，如果还未存在该常量，就用加入常量池的那个常量的引用来放入常量池中，否则就返回之前已存在的引用。
    以上的案例是因为“程序”这个字符串在常量池中还不存在，此时调用intern()就会把str1的引用加入常量池中，也就是会返回str1的引用；而“java”字符串在常量池中已存在，因此intern()返回的是第一次被加载时“java”字符串对象的引用。至于为什么程序里没定义“java”字符串而常量池里却已存在，然而在加载其他类的过程中出现个“java”字符串也是勉强说得通的一件事
    在执行以上代码时先将“程序”字符串加入常量池，就会发现结果是false、false，也算验证了上面的说法
    补充：像方法名也会加入字符串常量池，而类名、变量名就不会



字节码指令简介：

   int->long->float->double，它们之间可以无条件向上转换，高位补0，可是如果向下转换则需要显式强转，并且强转会导致经度丢失并且可能会使得正负号被改变，因为向下强转是保留低位的字节，这将导致转换结果的符号位取决于低位的首个字节

    boolean、byte、char、short类型在执行指令的时候都会被转成int来运算

    指令的首字母一般代表执行指令的数据类型，如果是i就代表了boolean、byte、char、short、int，如果是l就代表Long，如果是f就代表float，如果是d就代表double，如果是a就代表reference引用类型


synchronized实现原理：
    同步指令，JVM支持方法级和方法内部代码段的同步，这两种同步都是用管程(Monitor)来支持的，在执行期间，执行线程持有了管程，其它任何线程都无法再获取到同一管程。如果一个同步方法执行期间抛出了异常，并且在方法内部无法处理，那么这个同步方法所持有的所有管程都将在异常上抛时释放
    同步指令通常是由synchronized语句来表示的，JVM指令集中有monitorenter和monitorexit来表示获取管程和释放管程，编译器必须确保方法中调用过的每条monitorenter指令都必须执行对应的monitorexit指令，无论这个方法是否正常结束。如果使用了synchronized并且没有手动捕获异常，为了确保在方法异常时monitorenter和monitorexit指令依然可以正确配对执行，编译器会自动产生一个异常处理器，在monitorenter之后将synchronized代码块中的指令集捕获起来，这个异常处理器能处理所有异常，它的目的就是当发生异常时确保能到执行monitorexit


JIT：
    Just In Time Code Generator，既JIT代码生成技术，它可以将输入的虚拟机代码在加载或执行时翻译成宿主机CPU的本地指令集

    Class文件格式所具备的平台中立、紧凑、稳定和可扩展的特点是Java体系实现平台无关、语言无关两项特效的重要支柱



虚拟机类加载机制：

    与其他在编译时需要进行连接工作的语言不通，Java语言里，类型的加载、连接和初始化过程都是在程序运行时完成的，这种策略虽然会令类加载时增加一些性能开销，但是会为Java提供高度的灵活性。
    比如实现一个接口，然后在运行时再通过网络加载一个二进制流字节码作为实现类，还有比较常用的AOP，都是依赖这种运行时加载类型的特性实现的

    类的生命周期：
	加载 ->连接【验证->准备->解析】->初始化->使用->卸载

    加载(注意，加载只是类加载过程的一个阶段)：
	在加载阶段，虚拟机需要完成以下3件事：
	    1、通过一个类的全限定类名来获取此类的二进制字节流
	    2、将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构
	    3、在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类各种数据的访问入口
	由于第1点没有规定要从什么地方获取字节流，因此这部分被玩出很多花样，比如从压缩包中读取，也就是JAR、WAR格式的     基础；还有通过网络读取，比如Applt；还有运行时计算生成，比如动态代理；还有通过其它文件生成，比如JSP
	Class对象比较特殊，它虽然是对象，却存放在方法区中

    验证：
	由于Java是运行时加载字节流，所以虚拟机对字节流的来源根本无法确定，如果对其完全信任，很可能会因为载入了有害      的字节流而导致系统奔溃，所以验证是虚拟机对自身保护的一项重要工作。验证阶段是否严谨，直接决定了Java虚拟机是否能      承受恶意代码的攻击
	验证阶段需要完成4个动作：
	    1、文件格式验证，比如是否以CAFEBABE开头，主次版本号是否在虚拟机处理范围内，Class文件各个部分是否正常...
	    2、元数据验证，对字节码描述的信息做语义分析，比如是否有父类，是否继承了final类，如果不是抽象类是否实现		了所有抽象方法，是否覆盖了父类的final字段与方法，是否有相同方法名称与参数返回值却不同...
	    3、字节码验证，比如操作数栈的数据类型与指令代码序列能配合工作，跳转指令不会跳转到方法体以外的字节码指令		上，当前都是使用方法体Code属性表的StackMapTable属性来进行校验的，关于StackMapTable的详情可以搜一下上面
	    4、符号引用验证，比如通过字符串描述的全限定类名是否能找到对应的类，指定类中是否存在指定的字段和方法，符		号引用中的类、字段、方法的访问权限是否可被当前类访问...。如果符号引用验证不通过，那么将 会抛出一个			java.lang.IncompatibleClassChangeError异常的子类，如 java.lang.IllegalAccessError、			java.lang.NoSuchFieldError、java.lang.NoSuchMethodError等
	对于虚拟机的类加载机制来说，验证阶段是一个重要但非必要的阶段，因为这个阶段对程序运行期没有影响，所以如果所      运行的代码都是被反复使用且验证过的，就可以使用-Xverify:none参数来关闭大部分类验证措施，以缩短虚拟机的类加载时间

    准备：
	准备阶段会正式为类变量分配内存并设置类变量的初始值，仅包括static修饰的变量，这些变量都会在方法区中进行分配      。这里的初始值是指默认0值，比如0、false、null等，如果手动为静态变量赋值，比如static int i = 123，在这阶段的值通     常依然是0，赋值为123这部分会在初始化阶段的<clinit>方法中去做，除非它是ConstantValue，比如final static i = 123，     这样的话在准备阶段就会直接赋值为123

    解析：
	符号引用：
	  符号引用以一组符号来描述所引用的目标，符号引用可以是任何形式的字面量，只要使用时能无歧义地定位到目标即		可，各种虚拟机能接受的符号引用必须是一致的，因为符号引用的字面量形式明确定义在JVM规范的Class文件格式中

	直接引用：
	  直接引用是直接指向目标的指针、相对偏移量或能直接定义到目标的句柄。直接引用是与内存布局相关的，如果有直接		引用，那说明引用的目标必定在内存中已存在了

	    解析阶段虚拟机会将常量池内的符号引用替换为直接引用，同一个符号引用可能会被解析多次，虚拟机实现可以对第		一次解析的结果进行缓存，也就是在运行时常量池中记录直接引用，并把常量标识为已解析状态，从而避免重复解析。
	    解析动作主要针对接口、字段、类方法、接口方法、方法类型、方法句柄、调用限定符7类符号引用进行

	1、类与接口的解析：
	    1、假如当前代码在A类，并且存在一个从未解析过的符号引用B，那么虚拟机会将代表B的全限定名传递给A类的类加载		器去加载，在加载过程中，由于数据验证、字节码验证的需要又可能触发其它相关的类加载动作，比如B类有父类或者接口		，一样会进行加载，一旦这个加载过程出现任何异常，解析就宣告失败
	    2、如果A是一个数组类型，并且数组的元素不是基础类型，那么会按照第一点的规则加载元素类型，然后由虚拟机生		成一个代表数组维度和元素的对象
	    3、如果上面的步骤没有出现任何异常，那么A在虚拟机中实际上已经成为一个有效的类或接口，在解析完成之前还要		进行符号引用验证，确定A具备对B的访问权限，如果不具备将抛出java.lang.IllegalAccessError异常

	2、字段解析：
	    0、会先对字段所属的类或接口的符号引用进行解析
	    1、如果字段所在的类或接口本身就包含了名称与描述符都与目标相匹配的字段，则返回这个字段的直接引用，因为解		析类时已经有字段的直接引用了，如果本类没有再去父类或接口找
	    2、如果字段所在的类实现了接口，将会按照继承关系从下往上递归搜索父接口，如果发现名称与描述符都与目标匹配		的字段，则返回这个字段的直接引用
	    3、如果字段所在的类不是java.lang.Object的话，将会按照继承关系从下往上递归搜索父类，如果发现名称与描述符		都与目标匹配的字段，则返回这个字段的直接引用
	    4、否则查找失败，将抛出java.lang.NoSuchFieldError异常
	    5、如果查找过程中成功返回了引用，则对着字段进行权限验证，如果发现不具备对字段的访问权限，将抛出			java.lang.IllegalAccessError异常

	3、类方法解析：
	    1、如果发现类方法所在的类是个接口，将抛出java.lang.IncompatibleClassChangeError异常，比如在包引用时，不		同包存在相同的类，并且一个包是类，一个包是接口，编译时指向的是类，编译通过，运行时却加载了接口，此时就变成		了类继承接口，就会出现这个异常
	    2、如果通过第一步，则在类中查找是否有简单名称与描述符都与目标匹配的方法，如果有则返回这个方法的直接引用
	    3、否则就在类的父类递归查找是否存在简单名称与描述符都与目标匹配的烦恼发，如果有则返回这个方法的直接引用
	    4、否则就在类的接口列表与它们的父接口里递归查找是否有简单名称和描述符都与目标相匹配的方法，如果存在则说		明C是一个抽象类，此时查找结束，抛出java.lang.AbstractMethodError异常。因为该方法没被实现，又想找直接引用
	    5、否则宣告方法查找失败，抛出java.lang.NoSuchMethodError异常
	    6、如果成功返回方法引用，将对这个方法进行权限验证，如果不具备对此方法的反问权限，将抛出			java.lang.IllegalAccessError异常

	接口方法解析：
	    1、先解析接口方法所属的类或接口的符号引用
	    2、如果发现所属的是类而不是接口，将直接抛出java.lang.IncompatibleClassChangeError异常，可以用类方法解析		说的方式验证，也可以先让子接口先实现父接口，然后将父接口改为类，然后单独编译父接口，此时就会出现接口继承类
	    3、否则在接口中查找是否有简单名称与描述符都与目标匹配的方法，如果有则返回直接引用
	    4、否则在父接口中递归查找，直到java.lang.Object类，其中包括Object类，如果有简单名称与描述符都与目标匹配		的方法，则返回直接引用
	    5、否则查找失败，抛出java.lang.NoSuchMethodError异常
	    6、由于接口方法默认都是public的，所以不存在访问权限的问题，因此接口方法的符号解析不应该抛出			java.lang.IllEgalAccessError异常


    类的初始化：
	当出现以下几种情况时，就会触发类的初始化，初始化的前提肯定会包括前面的步骤，包括加载、验证、准备、解析：
	    1、类被new关键字进行实例化时、被调用静态变量或者静态方法时
	    2、使用反射对类进行调用时，包括Class.formatName也是反射
	    3、初始化一个类时，如果其父类没有初始化，则需要先触发父类的初始化
	    4、虚拟机启动时，用户指定main的那个主类会被先初始化
	    5、一个java.lang.invoke.MethodHandle实例最后解析的结果是写入或读取静态变量，或者调用静态方法，而且这个      实例对应的类没有初始化过，就需要先进行初始化
	注意：接口在上第3点跟类有点差异，接口在初始化时并不会要求其父接口也全部初始化

    以下情况不会触发类的初始化：
	1、用子类去引用父类的静态变量，此时子类不会初始化，而父类会，因为子类不符合以上5点
	2、new一个类型的数组，也不会触发这个类的初始化，比如new A[]，实际上会触发一个[LA的类初始化，它是由虚拟机自      动生成，直接继承于Object的子类，代表一个A类型的一维数组，用户可直接访问的只有其public的length属性和clone()方法
	3、在A类调用B类的静态常量，也不会触发B类的初始化，此时这个静态常量被直接优化存储在A类的常量池中，之后对B类      常量的引用都被转换为A类对自身常量池的引用，也就是说实际上A类的Class文件中并没有B类的符号引用入口了

        如果有多个线程同时对一个类进行初始化，虚拟机会保证只有一个线程去执行<clinit>方法，此时其它线程都会阻塞等待    ，如果<clinit>中有很耗时的操作，就可能造成多个线程阻塞，等阻塞结束后其它线程也不会进入<clinit>方法了，因为一个    类的<clinit>方法只会被执行一次

    关于java.lang.invoke.MethodHandle：
        它拥有跟反射类似的功能，比如在运行时动态执行代码，但是反射是代码级别的，MethodHandle是字节码级别的，这意味    着MethodHandle可以在调用时可以做一些字节码级别的优化，而且MethodHandle是轻量级的，只包含了少数信息，反射的    Method是重量级的，包含了很多信息，比如各个参数、访问标识等等信息
        而且MethodHandle与其相关的一些类，比如ClassWrite似乎可以在运行时生成字节码

类加载器：
	判断两个类是否相等，只有这两个类都处于同一个类加载才有意义，否则就算它们都来自同一个class文件，比较时也不会     相等，这里的相等包括equals、isAssignableFrom、inInstance等方法和instanceof关键字

	从虚拟机的角度来讲，只存在两种不同的类加载器：一种是启动类加载器(Bootstrap ClassLoader)，这个类加载器是C++      实现的，是虚拟机自身的一部分；另一种就是其它所有的类加载器，这些类加载器都由Java实现，独立于虚拟机外部，并全部      继承于抽象类java.lang.ClassLoader

    启动类加载器(Bootstrap ClassLoader)：
	这个类加载器负责将存放在{JAVA_HOME}/lib目录中，或者被-Xbootclasspath参数指定的路径里的类库加载到虚拟机，只      有能被虚拟机识别的类库才能加载，如果自己定义了其它的xxx.jar，哪怕在这个目录中也不会被加载
	启动类加载器无法被Java程序直接引用，如果需要将加载请求交给启动类加载器，用户只需要在自定义的类加载器的          getClassLoader()方法返回null即可


    扩展类加载器(Extension ClassLoader)：
	这个类加载器由sum.misc.Launcher$ExtClassLoader实现，它负责加载{JAVA_HOME}/lib/ext目录中，或者被                java.ext.dirs系统变量指定路径中的所有类库，它可以被开发者直接使用


    应用程序类加载器(Application ClassLoader)：
	这个类加载器由sum.misc.Launcher$AppClassLoader实现，由于这个方法是由ClassLoader.getSystemClassLoader()方法      返回的，所以也称为系统类加载器，它可以被开发者直接使用，它负责加载用户类路径上所指定的类库，也就是classpath参数     指定的路径，这也是默认的类加载器

    正常的类加载顺序如下：
	自定义类加载器 -> 应用程序类加载器 -> 扩展类加载器 -> 启动类加载器

    双亲委派模型：
        这种类加载器之间的层次关系也称为类加载器的双亲委派模型。双亲委派模型要求除了顶层的启动类加载器，其它类加载    器都应该有自己的父类加载器，这里的类加载器之间的父子关系一般不会以继承关系来实现，而是用组合模式来复用父类加载    器的代码

    双亲委派的工作过程：
	如果一个类收到了类加载的请求，它不会自己尝试去加载这个类，而是把这个请求委派给父类去加载，每个类加载器都会    这么做，只有父类加载自己无法完成这个加载请求时(在它的搜索范围内找不到所需的类，比如lib目录和命令指定目录)，子类    加载器才会尝试自己去加载

    双亲委派模型的好处：
	无论哪个类加载器去加载类，那些jdk的类总是能优先被加载，而不会被自定义实现所覆盖，因为类加载时总是会委托给启    动类加载器先去加载的，它总是去加载比如rt.jar中的类，因此自定义类哪怕路径类名完全一样也不会覆盖jdk的类

    双亲委派模型的实现：
	双亲委派模型的代码都集中在java.lang.ClassLoader.loadClass方法中，因为虚拟机在进行类加载时会调用类加载器的私     有方法loadClassInternal，当前类加载器总是会先调用父类加载器的loadClass方法，如果父类加载找不到类报了            ClassNotFoundException异常，则捕获并忽略，然后自己再去加载，加载不到再抛此异常

    破坏双亲委派模型：
	只要重写loadClass方法，不优先调用父类加载器的loadClass就能破坏，有些时候

        那么我直接new去加载一个类，它属于哪个类加载器，如果我想直接类加载器怎么指定？直接去加载的类是与当前类属于同     一个类加载器，如果想指定类加载器，那么使用对应的类加载器去加载指定类，然后指定类再去加载其它类时就会与它共用同    一类加载器了

	类最好能放在父类加载进行加载，因为如果一个类加载器有两个子类加载器，如果加载同一个类，都在子类加载要加载两    遍，如果在父类加载器只需要加载一遍，除非有特殊场景就是要放在子类加载器的，比如用完之后希望类随着加载器卸载的不    在此例





虚拟机执行引擎：
    执行引擎是Java虚拟机最核心的组成部分之一，Java虚拟机规范中制定了虚拟机字节码执行引擎的概念模型，这个概念模型成为各种虚拟机执行引擎的统一外观：输入的是字节码文件，处理过程是字节码解析，输出的是执行结果


运行时栈帧：

    栈帧(Stack Frame)是用于支持虚拟机进行方法调用和方法执行的数据结构，是虚拟机运行时数据区中的虚拟机栈的栈元素
    每个方法调用从开始到结束都对应着一个栈帧在虚拟机栈里出栈到入栈的过程
    栈帧存储了方法的局部变量表、操作数栈、动态连接、方法返回地址等信息。在编译代码时，栈帧需要多大的局部变量表，多
深的操作数栈都已经完全确定了，并写到方法表的code属性中，因此一个栈帧需要分配多少内存不会受到程序运行期间变量数据
的影响，仅取决于具体的虚拟机实现

    一个线程中的方法调用链可能会很长，很多方法都同时处于执行状态。对于执行引擎来说，只有位于栈顶的栈帧才是有效的，
称为当前栈帧，与这个栈帧相关联的方法称为当前方法，执行引擎运行的所有字节码指令都只针对当前栈帧进行操作
	
    局部变量表：
        局部变量表是一组变量值存储空间，用于存放方法参数和方法内部定义的局部变量，包括catch的Exception变量。在Java    程序编译为class文件时，就在方法的Code属性的max_locals数据项中确定了该方法需要分配的局部变量表最大容量
        局部变量表的容量以变量槽(Slot)为最小单位，一个slot可以存放一个32位以内的数据类型，java内32位以下的数据类型    有以下8种：byte、boolean、char、short、float、int、refresh、returnAddress，这些类型都只占用一个Slot，对于64位的
    double和long，都使用2个Slot来存储
        并不是每个局部变量都在局部变量表里占用一个Slot，Slot是可以重用的，比如某个变量在前面使用了，但是后面没有再    使用，后面定义的变量就会直接使用前面变量的Slot

    操作数栈：
        也常称为操作栈，是一个后入先出栈，和局部变量表一样，操作数栈的最大深度也在编译的时候写入到Code属性中。操作    数栈的每一个元素可以是任意的Java数据类型，包括long和double。32位数据类型所占用的栈容量为1，64位所占栈容量为2。      在方法执行的任何视乎，操作数栈的深度都不会超过在max_stacks数据项中设定的最大值
        当一个方法刚刚开始执行的时候，这个方法的操作数栈是空的，在方法执行的过程中，会有各种字节码指令往操作数栈中    写入和提取内容，也就是出栈、入栈操作。例如：做算术运算，或者调其它方法的的传参
        举个例子：当进行整数加法运算的时候，会先将运算的两个值放在栈顶，然后执行iadd指令会将这两个值出栈，运算后将    结果入栈
        为什么操作数栈不做成线程走而是跟栈帧走的？假设有一种场景，将一个数与一个方法的返回值相加，第一个方法将第一    个数压入栈顶，然后就要执行方法去获取第二个数的返回值，如果此时第二个数的方法往相同的栈里面塞东西，并且只入栈不    出栈，那怎么恢复第一个方法的操作数栈？因此操作数栈应当是栈帧独有的，它需要保证方法执行过程中每个栈帧的操作现场    ，以免调用其它方法后数据混淆

    动态连接：
        每个栈帧都包含一个指向运行时常量池中对应方法的引用，持有这个引用是为了支持方法调用过程中的动态连接。

    方法返回地址：
        当一个方法开始执行后，只有两种方式可以退出这个方法，第一种是执行引擎遇到方法返回的字节码指令，还有一种是方    法执行过程遇到了异常，并且这个异常没有在方法体内得到处理
        无论采用何种退出方式，在方法退出之后，都需要返回到方法被调用的位置，程序才能继续执行。
        方法退出的过程实际上就等同于把当前栈帧出栈，因此退出执行的操作有：恢复上层方法的局部变量表和操作数栈，把返    回值压入调用者栈帧的操作数栈中(如果有的话)，调整PC计数器的值以指向方法调用指令后面的一条指令

    附加信息：
	虚拟机规范允许具体的虚拟机实现增加一些规范里没有的信息到栈帧中，例如与调试相关的信息，这部分内容完全取决于    具体的虚拟机实现


方法调用：

    静态分派：
        List list = new ArrayList();
	其中，List是变量的静态类型，因为它是定义好就不会变的，而ArrayList是变量的动态类型，因为实际运行过程中list变    量的实际类型随时可能被改变
	编译器在匹配重载方法时，可能会出现有多个方法都符合某个参数，比如相同方法名的情况下，有以下类型的重载方法：
    Object、int、long、Character、char、char...、Serializable，此时参数传个'a'，会触发哪种类型的重载方法呢？这是根    据变量的静态类型决定的，首先会优先匹配类型相同的，也就是char；如果没有则匹配int，因为char可以自动转为int；如果    还没有则匹配long，因为自动转int后可以继续自动转为long；再没有则匹配Character，因为这是char的包装类型，可以自动    转换；接下来是Serializable，因为这是包装类型的接口；然后才是Object，因为这是char的父类；最后才是char...，可变数    组优先级是最低的
	需要注意的是，如果在匹配接口的时候，静态类型实现了两个接口，且刚好都有重载方法，此时编译器就不知道找哪个方    法了，因为它们优先级一致，这时候就需要在参数调用的时候强转一下，修改静态类型，否则会提示类型模糊，拒绝编译

    动态分派：
        List list = new ArrayList();
	依然是这个例子，其中ArrayList就是变量的动态类型，因为它是可以变动的，动态类型和多态的重写
	动态分派的匹配，是从动态类型开始找有没有匹配的方法，如果没有就一直往父类找，如果找到了就进行访问权限校验，    找不到则返回java.lang.IllegalAccessError异常


invokedynamic(java 1.7新增的指令，可以在字节码层面动态执行方法，而不是通过运行时修改字节码的方式：这需要额外开销)：

    由于invokedynamic指令面向的使用者并非java语言，而是其他java虚拟机之上的动态语言，因此javac编译器没有方法生成带有invokedynamic指令的字节码，所以要借用一个"INDY"工具来完成这件事，使用这个工具生成的字节码就会使用invokedynamic指令了

    使用MethodHandle，以下这个例子是用来调用父类的父类的方法，正常情况下是很难调得到的，因为总会进入到重写方法里：
        // 方法返回值为void类型，参数后面可以继续加方法参数类型，由于这个方法没有参数，所以就没写
        MethodType mt=MethodType.methodType（void.class）;
        // GrandFather就是当前类的祖父类，thinking是方法名，mt是刚才定义的方法返回值和参数对象,getClass是当前对象的
        类型
        MethodHandle mh=lookup（）.findSpecial（GrandFather.class，"thinking"，mt, getClass（））;
        // 通过当前对象进行调用，这里就会调用到祖父类的thinking方法
        mh.invoke（this）;
        使用这种方式的好处是：
	    1、这种方式是轻量级的，只需要少数几个信息，而反射是大量信息
	    2、反射是Java级别的，而MethodHandle是虚拟机级别的，这意味着MethodHandle哪怕不在Java中，就算在其它语言中         也是能用的，只要是运行在Java虚拟机上的语言就行
	    3、并且这种方式是对字节码的方法指令调用模拟，所以理论上虚拟机在这方面会做优化，而反射不行

字符串编译优化：
    如果代码里用连接符追加字符串，在字节码生成时会自动将String+String转成StringBuilder或StringBuffer的append，这算是
自动优化，但是由于变量定义的变量为String，所以每次都要new一个新的StringBuilder或StringBuffer，执行append后再toString
放回原变量，因此性能上还是不如自己手动new一个StringBuilder或StringBuffer自己去append

泛型擦除：
    Java中的泛型只在源码中存在，在编译后的字节码文件中，就已经替换成原生的类型了，也称为裸类型，并在相应的地方插入
了强制转换代码，因此对于运行期的Java语言来说，ArrayList<Integer>和ArrayList<String>是同一种类型，所以Java的泛型实
现实际上是一颗语法糖，Java中的泛型实现方式称为泛型擦除，基于这种方式实现的泛型称为伪泛型
    当有两个相同名称的方法重载方法时，如果是相同原类型的泛型，由于泛型会被擦除，因此他们的参数类型实际上是一样的，
因此编译无法通过，但是如果返回值不同，编译却又能通过了，可是重载不是跟返回值无关的吗？因为Class文件中，方法签名必
须没有相同的，因此如果返回值与参数泛型都一样，实际上就会出现了相同的，如果改了不同的返回值就能满足Class文件的条件
，因此这里会出现了奇怪的方法重载受到返回值的影响。但是反射的时候怎么区分两个不同泛型的重载方法呢？Java虚拟机规范中
引入了Signature属性，它包含了参数化类型的信息
    从Signature属性的出现还可以得出结论，泛型擦除仅仅是擦除了方法字节码里Code属性的泛型，实际上源数据中还是保留了
泛型信息，这也是我们能通过反射获得参数化类型的依据

    Java默认使用解释器执行，当探测到方法或者循环体为热点时(方法访问次数和循环体循环次数)，才会在运行时用编译器进行编
译，然后再执行，编译过程会额外开线程进行，所以会占用用户程序的运行时间，很多优化手段都是放在编译器编译时进行的

方法内联：
    简单来讲，就是将被调用方法的代码直接复制到调用的方法里，免去了方法调用时重新分配栈帧
    可是由于Java中有大量继承，并且这些继承关系只有在运行时才能确定，所以方法内联远远没有那么简单，因为无法确定最终
调用的方法是哪个。所以Java虚拟机设计团队引入了“类型继承关系分析”(CHA)的技术，这是一种基于整个应用程序的类型分析
技术，用于在目前已加载的类中，某个接口是否有多于一种实现，某个类是否存在子类，子类是否为抽象等信息
    如果方法仅有一个版本，也可以进行内联，这种内联属于激进优化，称为守护内联，如果加载了导致类型继承关系发生变化的
类，则会抛弃已编译的代码，退回到解释状态执行

逃逸分析：
    逃逸分析就是分析对象的动态作用域：当一个对象在方法中被定义后，它可能被外部方法应用，例如作为参数传递到其他方法，
此时称为方法逃逸，还有可能被外部线程访问到，例如赋值给类变量或者实例变量，此时称为线程逃逸。
    如果能证明一个对象无法被别的方法或者线程通过任何途径访问，则可能为这个变量进行一些高效优化：
    栈上分配：
        将对象直接在栈上进行分配，随着栈帧的销毁而销毁，可以减小垃圾搜集系统的压力
    同步消除：
        线程同步是一个相对耗时的过程，如果逃逸分析能后确定一个变量不会逃逸，那这个变量的读写肯定不会有竞争，就可以消
    除这个变量的同步措施
    标量替换;
        标量是指一个数据已经无法再分解成更小的数据来表示了，比如：int、long等数值类型以及reference类型等，如果还能继
    续分解，那就称作聚合量，比如Java中的对象。将对使用到的成员变量恢复原始类型访问就叫做标量替换，程序执行的时候可
    能不会创建这个对象，而是创建它的所有成员变量来代替。
        标量替换除了可以将对象拆散成局部变量然后在栈上分配和读写外，还可以为后续进一步的优化手段创建条件
    开启逃逸分析：-XX:+DoEscapeAnalysis
    查看分析结果：-XX:+PrintEscapeAnalysis，仅在debug版本虚拟机中可以使用
    开启标量替换：-XX:+EliminateAllocations
    查看标量替换结果：-XX:+PrintEliminateAllocations，仅在debug版本虚拟机中可以使用


Java内存模型(Java Memory Model，JMM)：

    硬件的内存模型：
        每个处理器都有自己的高速缓存，由于同一个数据在不同处理器自己的高速缓存中有不同版本，因此所有高速缓存都需要通
    过缓存一致性协议来与主内存进行交互

    JMM：
        Java内存模型规定了所有变量都存储在主内存(类比硬件的主内存)。每天线程又有自己的工作内存(类比硬件的高速缓存)，线
    程的工作内存保存了被该线程使用到的变量的主内存拷贝副本，线程对变量的所有操作都必须在工作内存中进行，不同线程无
    法访问到对方工作内存中的变量，线程间变量的传递均需要通过主内存来完成
        Java线程<->处理器，工作内存<->高速缓存，对变量的读写<->缓存一致性协议，物理主内存<->Java虚拟机主内存，它
    们之间的关系都可以与硬件类比，不同的是一个是硬件，一个是Java内存模型

    工作内存从主内存中拷贝副本时，并不是会拷贝整个使用到的对象，而是会拷贝这个对象的引用、线程中访问到对象的字段

    volatile：
        volatile有两个作用：内存可见与禁止指令重排
        内存可见：
            由前面的内容可知，线程只能读取到工作内存的数据，而当变量被volatile修饰后，每次对变量的赋值操作都会立即将值刷
        新到主内存，每次使用该变量时，都会从主内存加载最新的值
        禁止指令重排：
            volatile之所以能做到禁止指令重排，是因为每次操作被修饰的对象之后都会执行一个相当于内存屏障操作，当内存屏障存
        在时，重排序时不能把后面的指令重排序到内存屏障之前的位置，也就是无法把对volatile修饰变量的操作移到前面
            内存屏障是一条指令，这个指令是把修改同步到内存，这意味着之前所有的操作都已经执行完成，这样就形成了指令重排
        无法越过内存屏障的效果

    Java内存模型的特征：
        原子性：
            基本数据类型的访问和读写具备原子性；在同步块-synchronized关键字之间的操作也具备原子性

        可见性：
            当一个线程修改了共享变量的值，其它线程能够立即得知这个修改。
            volatile关键字能够保证新值立即同步到主内存，以及每次使用时立即从主内存刷新；除此之外synchronized也能保证可
        见性，因为加锁时会将同步块内被用到的变量从工作内存清空，释放锁时会将这些变量刷新到主内存；final也能提供可见性
        ，因为它只能在初始化时被赋值一次，其它线程无需同步就能正确访问

        有序性：
            指的就是指令重排，单线程下正常的指令多线程下不一定正常，例如先初始化配置后再将init设置为true，经过指令重排
        后变成先将init设置为true再初始化配置。单线程下无论这两个行为的先后顺序如何总能保证结果是正确的，但多线程下可能
        线程A将init设置为true后，还未初始化配置，线程B就读到init已经为true了，读配置却读不到
            volatile关键字能够保证有序性，因为它有内存屏障，禁止指令重排
            synchronized也能保证有序性，因为它能保证同一时间只有一条线程在访问同步块，而单线程下指令重排是安全的
























