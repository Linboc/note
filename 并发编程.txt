
  当多个线程访问同一个可变的变量而没有使用合适的同步时，程序就会出现错误，有三个方式可以修复这个问题:
    1、不在线程之间共享该变量
    2、将该变量改为不可变变量
    3、在访问该变量时使用同步

  程序的封装性越好，就越容易实现程序的线程安全。比如某一个变量在多处被访问，而没有封装，这个变量如果需要设计成线程安全，就要处理所有调用的地方，如果封装起来只保留一个公开引用，那么只要在公开引用的地方进行同步处理就可以了

  线程安全性：如果多个线程访问某个类时，这个类始终都能表现出正确的行为，并且主调代码不需要任何额外的同步，那么就称这个类是线程安全的。

  线程安全类中封装了必要的同步机制，因此无需调用者采取同步措施

竞态条件：
  最常见的竞态条件类型是'先检查后执行'，比如检查库存，下单，减库存

  在java.util.concurrent.atomic包中包含一些原子变量类































