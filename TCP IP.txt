协议族：
	一系列相关协议的集合称为一个协议族，IP/TCP就是一个协议族

体系结构(参考模型)：
	指定一个协议族中各种协议之间的关系并划分需要完成的任务的设计成为体系结构或者参考模型，Internet就是一个体系
结构，IP/TCP协议族实现了这个体系结构

网关：
	在互不兼容的网络之间提供翻译功能

路由器：
	路由器就是一组网关

因特网：
	提供消息通信能力

万维网：
	使用因特网进行通信的一种具体应用

分组：
	在分组交换中，包含一定字节数的数字信息“块”，独立通过网络。来自不同来源或发送方的块可以组合，而且以后可以
分解，这称为“多路复用”。

面向连接：
	交换机为每个连接存储一定的信息或状态，这样每个分组只需要携带少量的额外信息，以提供到某个状态表的索引。这种
网络称为面向连接

数据报：
	数据报是一个特定类型的分组，有关来源和最终目的地的所有识别信息都位于分组中，虽然这需要较大的数据报，但不需
要在交换机中维护连接状态，它可用于建立一个无连接的网络(UDP？UDP就是无连接，并且通过报文发送信息的)

7层OSI模型：
	7、应用层：通常由应用开发者设计和实现
	6、表示层：针对应用的数据表示格式和转换规则，有时与加密也有关
	5、会话层：由多个连接组成一个通信会话，可能包括关闭、重启连接，检查点进程
	4、传输层：运行在相同计算机系统中的多个程序之间的连接或关联的方法
	3、网络层：经过潜在不同类型链路层网络的多跳通信方法，对于分组网络，描述了编址结构和抽象的分组格式
	2、链路层：通常包括多个系统共享同一介质时的控制协议、差错检测和链路层地址格式，例如以太网、wifi
	1、物理层：指定连接器、数据速率和某些介质如何进行位编码，底层的差错检测和纠正、频率分配

分层的复用、分解和封装：
	分层体系结构的一个主要优点是具有协议复用的能力。某层的一个协议数据单元(PDU)的对象(分组、消息等)被低层携带
时，这个过程称为相邻低层的封装(不透明数据)，不透明就是无需解释的意思。因此，第N层的对象可以通过第N-1层的封装而复用

	封装发生在发送方，拆封发生在接收方。多数协议在封装过程中使用头部，少数协议使用尾部。最常见的处理是，某层在
获得的PDU前面增加自己的头部信息，然后给下一层，它通常“承诺”不看PDU中的具体内容

	复用就是经过封装传给下一层，封装就是在发送时对数据进行封装，分解就是在接收后对数据进行解封

	数据通常由发送方由高层往低层一层层封装，在低层发送给接收方的低层后，接收方在一层一层往高层解封

	在单纯的分层中，并不是所有网络设备都需要实现所有层，如果设备只希望执行特定操作，那么它只需要实现少数几层

DNS：
	DNS是一个运行在Internet上的分布式数据库应用程序，DNS可以将主机名转换为IP地址，也可以反过来

互联网：
	互联网是一个网络集合，其中最常见的基本设备是路由器，它被用于连接多个网络

内联网：
	专用的互联网称为内联网，通常使用特殊设备(防火墙)连接Internet，它可以防止未授权的访问企图

外联网：
	通常由一个机构的多个内联网组成，它能以有限的方式被合作伙伴或分支机构所访问

套接字：
	最常见的TCP/IP网络API称为套接字

客户机/服务模式器：
	这种设计模式的服务器又分迭代服务器和并发服务器两种，迭代服务器就是每次只处理一个请求，处理完毕之后才会处理
下一个，并发服务器的优点是服务器只产生其它服务器实例，并由他们来处理客户机请求

对等模式：
	有些引用以更分布式的形式设计，其中没有专门的服务器，每个应用既是客户机又是服务器，并能转发请求。这种应用称
为对等或P2P应用，一组P2P应用共同形成一个应用网络。P2P网络一个主要问题是发现服务，也就是一个对等方如何在一个网络中发
现服务提供方或其他对等方，以及可能进行的对等方的位置。这通常在每个客户机在最初配置中使用它所需要的对等方的地址和端
口号。一但连接成功，新的参与者像其他活跃的对等发出请求，并根据协议获得对方提供的服务。
	现在的微服务就是对等模式，每一个客户端记录了注册中心的地址和端口，一但连接成功了，就能获得注册中心中的服务

IP的5类网络：
	A类：
	  划分：所有IP地址以二进制0开头的就是A类网络，用于单播/特殊
	  它的地址范围是0.0.0.0-127.255.255.255，占了所有IP地址的一半，它的网络号是前面8位，除出去前面一位固定的，
	自由划分的只有7位，主机号有24位

	B类：
	  划分：所有IP地址以二进制10开头的就是B类网络，用于单播/特殊
	  它的地址范围是128.0.0.0-191.255.255.255，占了所有IP地址的1/4，它的网络号是前面16位，除出去前面两位是固定
	的，自由划分的只有14位，主机号有16位
	

	C类：
	  划分：所有IP地址以二进制110开头的就是C类网络，用于单播/特殊
	  它的地址范围是192.0.0.0-223.255.255.255，占了所有IP地址的1/8，它的网络号是前面24位，除出去前面三位固定的
	，自由划分的只有21位，主机号有8位
	D类：
	  划分：所有IP地址以二进制1110开头的就是D类网络，用于组播
	  它的地址范围是224.0.0.0-239.255.255.255，占了所有IP地址的1/16，它是组播地址，除去前面4位是固定的，其余28
	位都可以自由分配

	E类：
	  划分：所有IP地址以二进制1111开头的就是E类网络，用于保留
	  它的地址范围是240.0.0.0-255.255.255.255，占了所有IP地址的1/16，它是保留地址，出去前面4位是固定的，其余28
	位都可以自由分配
网络号：
	就是定位IP地址的号码，比如A类有8位，也就是说A类的IP地址一共32位，而前面8位有7位是自由分配的，因此A类一共有
128位网络号可分配

主机号：
	就是定位主机的号码

IP地址：
	IPv4的地址由4组十进制组成，每组最大值是255，也就是8位二进制，加起来一共32位，一个Integer类型的大小，每组之
间用点分隔
	IPv6中，地址的长度是128位，是IPv4的4倍，IPv6地址的传统表示方法是采用由冒号分隔的8组4个16进制数，一组中，前
面的0可以不写，如005A，可以写成5A，如果有多组都是0，可以用::代替，比如0:0:0:0:0:0:0:7可以写成::7，1:0002:0:0:0:0:0:5
可以写成1:2::5，为了避免歧义，一个IPv6中::只能使用一次

	IPv6可以兼容IPv4,由于IPv4是4组8位二进制，而IPv6是16组8位(一般写成8组16位)，因此用IPv6最低的4组8位来表示IPv4
，IPv6中嵌入IPv4地址可使用混合符号，紧跟着IPv4的地址块的值为ffff，例如::ffff:10.0.0.1，表示IPv4的10.0.0.1，它被称为
IPv4映射的IPv6

	如果使用IPv6的话，它的分隔符:会和端口的符号冲突，因此要用[]把IPv6的地址括起来，比如[21:ab:1230:1d:77:9a:0b:1]:8080
，并且还有一些规则缩小IPv6的选择范围：
	1、每个分组前面的0必须压缩
	2、::只能用在影响最大的地方
	3、a到f应该用小写表示

网络号和主机号的区别：
	网络号的作用是，比如某个站点是A类网，它的IP地址是126.123.21.34，而第一个.前面的是网络号，那么所有前面是126
的数据报都会发给这个站点，然后这个站点再根据123.21.34去找具体是哪台主机的数据

子网：
	由于有一些网络拥有的网络号很少，主机号却太多，为了解决这些问题，就出现了子网，子网是使用主机号来在某些站点
内部再次划分一次该站点内部使用的地址，比如B类网络，前16位是网络号，接下来8位做子网ID，最后8位才是主机ID，这样的话
就可以在内部根据主机ID那部分来再次划分一次网络，这样就能造出更多的站点，而子网通常配合子网掩码使用，因此路由器需要
配置子网掩码

子网掩码：
	掩码地址前面一半都是1，比如11111111 11111111 11111111 00000000，这样子网掩码就是225.225.225.0

子网地址：
	原IP地址与掩码地址等于子网地址

可变长度子网掩码：
	子网地址后面有跟着/16、/24之类的，就是说明有多少位是IP地址，有多少位是主机地址如果是/24，就说明有24位是IP
地址，而IPv4一共有32位，因此主机地址就剩下8位，也就是256个主机地址

广播地址：
	IP地址或掩码取反等于广播地址，主机号则设置为1，比如是地址127.32.1.14/24，掩码是255.255.255.0,掩码取反的结
，果是0.0.0.255，然后127.32.1.14或0.0.0.255，因此这个子网的广播地址是127.32.1.255，发送给子网的广播地址会被发送给
子网中的所有主机

	某个地址块是0代表了这个主机将接收该地址0以上的所有数据，比如155.32.0.0，代表了155.32.*，后面是任意数字的数
据报都会发送给这个主机，而255一般则用来做广播，因为掩码后4位一般都是0，而广播地址则是掩码取反，因此取反后的掩码后
4位都是1，这时候再与子网地址相或，最后一个地址块就是255

前缀：
	IP地址后面跟着/26这类符号的称为前缀，/26说明前面的26位是固定的，26之外其它的都是可变的，这就说明了它的地址
范围包含了可变的那一部分，相比分类来说更加灵活，因为分类都是固定的几位，而这个可以自定义，并且同时还能表达分类，比
如分类的A类和B类网络号可分别用前缀长度/8和/16表示

链路聚合：
	通过链路聚合，两个或更多接口被视为一个，通过冗余或将数据拆分到多个接口，提高性能并获得更好的可靠性，通常情
况下，链路聚合必须是同一类型，并工作在同一模式(半双工或全双工)下





TCP：
    全称：传输控制协议，就是对数据的传输进行控制

报头：

    0-15位(16)：源端口号
    16-31位(16)：目标端口号
    32-63(32)：序号
    64-95(32)：确认序号
    96-100(4)：首部长度
    101-106(6)：保留位
    107-108(1)：URG
    108-109(1)：ACK
    109-110(1)：PSH
    110-111(1)：RST
    111-112(1)：SYN
    112-113(1)：FIN
    113-128(16)：窗口大小
    129-144(16)：校验和
    145-160(16)：紧急指针
    161-*：选项，可能有

报头详解：

    源端口号：
        16位，2<<15=65535，刚好容得下所有的端口号

    目标端口号：
        16位，2<<15=65535，刚好容得下所有的端口号

    序号(seq)：
        32位，记录自己发送过的字节数，每个SYN和FIN也会占1，握手时双方各发了一个SYN，因此在第一次发数据时双方的序号都为初始序列号+1，
    初始序列号是随机生成的，这样是为了不被猜出序号遭受攻击
        在wireshark里面要看不带raw的，这是转换过的相对序号

    确认序号：
        32位，记录自己接收过的字节数，每个SYN和FIN也会占1，握手时双方各接收了一个SYN，因此在第一次发数据时双方的确认序号都为1
        在wireshark里面要看不带raw的，这是转换过的相对序号

    首部长度：
        4位，代表tcp报头有多少个32位(32bit，4字节)，因为tcp可能会存在选项，也可能没有，这部分是不确定的，因此用首部长度来判断tcp选项

    保留为：
        6位，保留6位

    URG：
        紧急指针是否可用，0代表不可以，1代表可用

    ACK：
        代表确认序号是否可用，wireshark里显示ACK很大，其实并不是ACK的值，而是ACK=1的情况下确认序号的值

    PSH：
        为1则让对方立刻把数据从缓冲区读走

    RST：
        要求重新建立连接，复位报文段，连接超时或某一方突然关闭会产生，如果对方没应答则连接结束

    SYN：
        请求建立链接，同步报文段

    FIN：
        通知关闭连接，结束报文段

    滑动窗口：
        16位滑动窗口大小

    校验和：
        16位校验和，发送端填充这个校验和包括报头和数据部分，如果校验不通过则认为数据有问题

    紧急指针：
        16位紧急指针，标识哪部分数据是紧急数据

三次握手：
    客户端发送SYN=1，服务器回复SYN=1,ACK=1,ack=1，客户端回复ACK=1,ack=1，连接成功

四次挥手：
    假设是客户端主动关闭，客户端发送FIN=1，服务器回复ACK=1,ack+1，服务器发送FIN=1，客户端回复ACK=1,ack+1

    之所以挥手要四次，服务器的ACK和FIN分开发，是因为可能客户端没数据发了，准备结束，而服务器还有数据要发，因此不能一次性ACK+FIN，
就先ACK告知客户端已经收到FIN了，但是服务器的FIN可以先不发，先把自己的数据发完后再进行FIN

























































