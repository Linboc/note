RocketMQ的概念：

RocketMQ组成：
    1、Producer：负责生产消息，生产者
    2、Broker：负责存储消息，每个Broker对应一台服务器
    3、Consumer：负责消费消息，消费者

    每个Broker可以存储多个Topic消息，每个Topic的消息也可以分片存储于不同的Broker。Message Queue用于存储消息的物理地址，每个Topic中的消息地址存储于多个Message Queue中，ConsumerGroup由多个Consumer实例构成

消息生产者(Producer)：
    负责生产消息，生产者会把消息发送到Broker。RocketMQ提供多种发送方式，同步发送、异步发送、顺序发送、单向发送。除了单向发送不需要Broker返回确认消息，其他发送方式都需要

消息消费者(Consumer)：
    负责消费消息，一般是后台系统进行一步消费。消费者会从Broker服务器拉取消息。从用户应用的角度而言提供了两种消费模式：拉取式消费、推动式消费

主题(Topic)：
    表示一类消息的集合，每个主题包含若干条消息，每条消息只能属于一个主题，是RocketMQ消息订阅的基本单位

代理服务器(Broker Server)：
    消息中转角色，负责存储消息、转发消息。负责接收从生产者发送来的消息并存储，同时为消费者拉取请求做准备。代理服务器也存储消息相关的源数据，包括消费者组、消费进度偏移、主题和队列消息等

名字服务(Name Server)：
    名称服务充当路有消息的提供者。生产者或消费者能够通过名字服务查找各主题相应的Broker IP列表。多个NameSrv实例组成集群，但相互独立，没有信息交换

拉取式消费(Pull Consumer)：
    由消费者主动调用拉消息方法从Broker服务器拉消息，主动权由消费者控制

推动式消费(Push Consumer)：
    Broker服务器收到消息后会主动推给消费端，该消费模式一般实时性较高

生产者组(Producer Group)：
    同一类生产者的集合，这类生产者发送同一类消息且发送逻辑一致。如果发送的是事务消息且原始生产者在发送后奔溃，则Broker服务器会联系同一生产者组的其他生产者实例以提交或回溯消费

消费者组(Consumer Group)：
    同一类消费者的集合，这类消费者通常发送同一类消息且消费逻辑一致。消费者组使得在消息消费方面实现负载均衡和容错的目标变得非常容易。每个消费者组的消费者必须订阅完全相同的Topic。RecketMQ支持两种消费模式：集群消费和广播消费

集群消费(Clustering)：
    集群消费模式下，相同Consumer Group的每个Consumer实例平均分摊消息

广播消费(Broadcasting)：
    广播消费模式下，相同ConsumerGroup的每个实例都会接收全量的消息

普通顺序消息(Normal Ordered Message)：
    普通顺序消费模式下，消费者通过同一个消费队列收到的消息是有顺序的，不同消息队列收到的消息则可能是无需的

严格顺序消息(Strictly Ordered Message)：
    严格顺序消费模式下，消费者收到的所有消息均是有序的，哪怕有多个消费者同时消费同一主题

消息(Message)：
    消息系统所传输消息的物理载体，生产和消费数据的最小单位，每条消息必须属于一个主题。RocketMQ中每个消息都拥有唯一的Message ID，且可以携带具有业务标识的Key。系统提供了通过Message ID和Key查询消息的功能

标签(Tag)：
    为消息设置的标志，用于同一主题下区分不同类型的消息。来自于同一业务单元的消息，可以根据不同业务目的在同一主题下设置不同标签。标签能够有效地保持代码的清晰度和连贯性，并优化RocketMQ提供的查询系统。消费者可以根据Tag实现对不同主题的不同消费逻辑，实现更好的扩展性


RocketMQ的特性：

订阅与发布：
    发布是指某个生产者向某个Topic发送消息，订阅是指某个消费者关注了某个Topic中带有某些tag的消息，进而从该Topic消费数据

消息顺序：
    RocketMQ的顺序消息分为两种：
        全局顺序：
            对于指定的一个Topic，所有消息按照严格的先入先出顺序进行发布和消费。适用于性能要求不高，消息顺        序要求严格的场景
        分区顺序：
            对于指定的一个Topic，所有消息根据sharding key进行区块分区。同一分区内的消息按照严格的顺序进行发布和消费。Sharding key是顺序消息中用来区分不同分区的关键字点。适用于性能要求高，以sharding key作为分区字段的场景

消息过滤：
    RocketMQ的消费者可以根据Tag进行消息过滤，也支持自定义属性过滤。消息过滤目前在Broker端实现，优点是减少了对于Consumer无用的网络传输，缺点是增加了Broker的负担

消息可靠性：
    RocketMQ支持消息的高科高，以下几种情况会影响消息的可靠性：
        1、Broker非正常关闭
        2、Broker异常Crash
        3、OS Crash
        4、机器断电，但是能立即回复供电
        5、机器无法开机
        6、磁盘设备损坏
    1、2、3、4这四种情况能保证数据不丢失，或只丢失少量数据，依赖刷盘方式是同步还是异步
    5、6两种情况属于单点故障，且无法恢复，一旦发生此单点上的消息全部丢失。RockerMQ在这两种情况下通过异步复制可保证99%的消息不丢失，但仍有极少量的消息可能丢失。可以通过同步双写完全避免单点丢失，但势必会影响性能，只适用于消息可靠性要求极高的场景，例如和钱有关的应用，RocketMQ3.0版本开始支持同步双写

至少一次：
    指每个消息必须投递一次。消费者先Pull消息到吧恩地，消费完成后才向

回溯消费：
    已经被消费的消息业务上需要重新消费。Broker在向Consumer投递消息成功后，消息仍然保留。RockerMQ提供一种按照时间维度来回退消费进度的机制，比如Consumer系统故障，需要对一小时前的消息重新消费，时间维度精确到毫秒

事务消息：
    是指本地事务和发送消息操作可以定义到全局事务中，要么同时成功，要么同时失败。RocketMQ的事务消息提供类似于X/Open XA的分布式事务功能，通过事务消息能达到分布式事务的最终一致

定时消息：
    延迟队列是指消息发送到broker后，不会立即被消费，等待特定时间投递给真正的topic。broker可以配置默认的messageDelayLevel。发送消息时也可以设置delayLevel等级：msg.setDelayLevel。level等于0就是非延迟消息，大于0小于maxLevel就是指定的等级，大于maxLevel就是maxLevel，也就是说超过maxLevel是没有意义的。延迟消息会暂存在名为SCHEDULE_TOPIC_XXXX的topic中，并根据delayTimeLevel存入特定的queue，既一个queue只存放相同的延迟消息，保证相同延迟的消息能够顺序消费。Broker会调度地消费SCHEDULE_TOPIC_XX，将消息写入真实的topic。
    系统会在第一次写入和调度写入真实topic时都会计数，因此发送数量和tps都会变高
    定时消息所支持所有的级别：1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h
消息重试：
    消费者消费消息失败后，提供一种充实机制，令消息再消费一次。
    RocketMQ会为每个消费组都设置一个topic为%RETRY% + consumerGroup的重试队列，用于暂存因为各种异常而导致消费者无法消费的消息。考虑到异常恢复需要时间，会为重试队列设置多个重试级别，每个重试级别都有与之对应的重新投递延时，重试次数越多投递延时越大。重试消息会先保存至topic名为SCHEDUEL_TOPIC_XXX的延时队列中，后台定时任务按照对应的时间进行延迟后重新保存到%RETRY% + consumerGroup的重试队列中

消息重投：
    生产者发送消息时，同步消息失败会重投，异步消息有重试，oneway没有任何保证。消息重投可以保证消息不丢失，但是可能会造成重复，消息重复在RocketMQ中是无法避免的问题。当出现消息量大、网络抖动，消息重复就会是大概率事件。RocketMQ有以下重投策略：
    retryTimesWhenSendFailed：同步发送失败重投次数，默认为2，因此生产者最多尝试发送retryTimesWhenS endFailed+1次，每次失败后都会尝试向其他broker发送。超过重投次数就会抛出异常，由客户端保证消息不丢失
    retryTimesWhenSendAsyncFailed：异步发送失败重试次数，异步重试不会选择其他broker，仅会在同一broker上做重试
    retryAnotherBrokerWhenNotStoreOK：消息刷盘(主或备)超时或slave不可用(返回状态不是DEND_OK)，是否尝试发送到其他broker，默认false

流量控制：
    因为broker处理能力达到瓶颈而进行生产者流控；因为消费能力达到瓶颈而进行消费者流控
    生产者流控：
        commitLog文件被锁时间超过osPageCacheBusyTimeOutMills时，参数默认为1000ms，返回流控。
        如果开启transientStorePoolEnable == true，且broker为异步刷盘的主机，且transientStorePool中资源    不足，拒绝当前send请求，返回流控。
        broker每隔10ms检查send请求队列头部请求的等待时间，如果超过waitTimeMillsInSendQueue，默认        200ms，拒绝当前send请求，返回流控。
        broker通过拒绝send请求方式实现流量控制，因为流控导致投递失败不会尝试消息重投
    消费者流控：
        消费者本地缓存消息数超过pullThresholdForQueue时，默认1000。
        消费者本地缓存消息大小超过pullThresholdSizeForQueue时，默认100MB。
        消费者本地缓存消息跨度超过consumeConcurrentlyMaxSpan时，默认2000。
        通过降低拉取频率实现流量控制

死信队列：
    死信队列用于处理无法被正常消费的消息。当一条消息达到最大失败重试次数后，如果依然消费失败则会被发送到死信队列中。在RocketMQ中可以通过使用console控制台对死信队列中的消息进行重发使得消费者再次对这些消息进行消费


架构设计：

    Producer：
        消息发布者，支持分布式集群。Producer通过MQ的负载均衡模块选择相应的Broker集群队列进行消    息投递，投递过程支持快速失败并且低延迟

    Consumer：
        消息消费的角色，支持分布式集群方式部署，支持push、pull两种模式。同时也支持集群和广播式的    消费

    NameServer：
        NameServer是一个Topic路由注册中心，类似于dubbo中的zookeeper，支持broker的动态注册和发现。主要包括两个功能：broker管理，接收broker集群的注册信息并保存下来作为路由信息的基本数据。然后提供心跳检测机制，检查broker是否存活；路由信息管理，每个NameServer将保存关于broker集群的路由信息和用于客户端查询的队列信息。
        消费者和生产者通过NameServer就可以知道整个Broker集群的路由信息，从而进行消息的投递和消费。NameServer通常也是集群的方式部署，各个实例间相互不进行信息通讯。每个NameServer都保存一份完整的路由信息。当某个NameServer因某种原因下线了，Broker仍然可以向其他NameServer同步其路由信息

    BrokerServer：
        主要负责消息的存储、投递和查询以及服务高可用报障，为了实现这些功能，broker包含了以下几个    重要子模块：
        remoting module：整个broker的实体，负责处理来自客户端的请求
        client manage：负责管理客户端和维护消费者的topic订阅信息
        store service：提供方便见到的api接口处理消息存储到物理硬盘的查询功能
        HA service：高可用服务，提供主从broker之间的数据同步功能
        index service：根据特定的message key对投递到broker的消息进行索引服务，提供消息的快速查询

消息刷盘
    同步刷盘：只有在消息真正持久化至磁盘后RocketMQ的Broker端才会真正返回给Producer端一个成功的ACK响应。同步刷盘对MQ消息可靠性来说是一种不错的保障，但是性能上会有较大影响，一般适用于金融业务应用该模式较多
    异步刷盘：能够充分利用OS的PageCache的优势，只要消息写入PageCache即可将成功的ACK返回给Producer端。消息刷盘采用后台异步线程提交的方式进行，降低了读写延迟，提高了MQ的性能和吞吐量

    RocketMQ的RPC通信采用netty组件作为底层通信库，同样遵循了Reactor多线程模型

    RocketMQ中的负载均衡在client端完成，主要可以分为提供短发送消息时的负载均衡和消费端订阅消息时的负载均衡

    消费者的push模式只是对pull模式的一种封装，其本质实现是在消息拉取线程在服务器拉取到一批消息后，再提交给消费线程，又继续向服务器再次尝试拉取消息。如果没有拉取到消息，延迟一下又继续拉取

消息标签的筛选支持：
    消息标签可以写明确的字符串表明会消费哪些标签，也可以写表达式来匹配消息属性
    生产者设置消息属性：
        msg.putUserProperty("a", String.valueOf(i))
    消费者用表达式匹配消息属性：
        1、通过SQL表达式来消费(就是数据库的那个SQL)
        public void subscribe(finalString topic, final MessageSelector messageSelector)
        2、MessageSelector的用法如下
        MessageSelector.bySql("b = 'abc' || a between 0 AND 3")
        >，>=，<，<=，BETWEEN，=，=，<>，INIS NOT NULL，AND，OR，NOT都支持
        数字直接用：123,1.647；字符用''：'aby'，NULL是特殊常量，布尔值用：TRUE,FALSE

消息的事务：
    事务消息的三种状态：
        TransactionStatus.CommitTransaction：提交事务，代表允许消费者消费
        TransactionStatus.RollbackTransaction：回滚事务，代表消息将被删除不允许被消费
        TransactionStatus.Unknown：中间状态，代表需要检查消息队列来确定状态

    事务生产者：：
        需要使用TransactionMQProducer类创建生产者，并指定唯一的ProducerGroup，事务提供者需要设置事务    监听器，也就是TransactionListener接口的实现类

    TransactionListener：
        这个接口有两个抽象方法：
            executeLocalTransaction(Message msg, Object arg)：
                这个方法用来执行本地事务，需要用上面的三个状态返回本地事务执行的结果，msg可以获取到事务id
            checkLocalTransaction(Message msg)：
                这个方法用来检查本地事务，需要用上面的三个状态返回本地事务检查的结果，只有执行事务时返回的                  状态为Unknown才会触发这个函数，默认单个消息检查次数为15次，如果超过15次Broker则会丢弃此消
              息，最大检查次数可以通过配置文件的transactionCheckMax参数来修改，默认情况下丢弃消息会打印错              误日志。用户可以通过重写AbstractTransactionalMessageCheckListener类来修改这个行为

    transactionCheckMax：通过修改配置文件中的这个变量可以修改事务消息的检查次数
    transactionTimeout：通过修改配置文件中的这个变量可以修改事务消息的检查间隔，发送消息时如果设置用户属性CHECK_IMMUNITY_TIME_IN_SECONDS的话也有同样的效果，并且用户属性里的优先级更高

    注意事项：
        1、事务消息不支持延迟消息和批量消息
        2、事务消息可能不止一次被检查或消费
        3、事务消息的生产者id不能与其他类型消息的生产者id共享。因为与其他消息不同，事务消息允许反向查询,        MQ服务器能通过他们的生产者id查询到消费者

日志：
    RocketMQ提供log4j或log4j2加logback日志框架作为应用配置

消息轨迹：

    消息轨迹记录的属性：
        producer端：生产实例信息、发送消息时间、消息是否发送成功、发送耗时
        consumer端：消费实例信息、投递事件、投递轮次、消息是否消费成功、消费耗时
        broker端：消息的topic、消息存储位置、消息的key、消息的tag

    DefaultMQProducer和DefaultMQPushConsumer构造器的第二个参数是是否开启消息轨迹，第三个参数是自己指定一个消息轨迹的topic，这个topic需要自己创建，否则会存储在一个叫RMQ_SYS_TRACE_TOPIC的系统级topic中


最佳实践：

    如果要保证消息全局顺序消费，那么只能把所有消息全都发送到同一个queue里面，不然RocketMQ只能保证分区顺序，每个queue就是一个分区，消费者也会同时轮询消费多个queue。由于每个消费者都会锁定一个queue，因此消息全局同步性能也会受到一定影响

生产者相关：
    keys的使用：
        每个消息再业务层的唯一标识码都要设置到keys字段：msg.setKeys(String orderId)，方便将来定位消息丢失    的问题。服务器会为每个消息创建哈希索引，应用可以通过topic、key来查询这条消息内容、以及消息被谁消费
    ，由于是哈希索引，应该尽可能报障key唯一

    日志的打印：
        消息发送成功或者失败都应该打印消息日志，务必要打印SendResult和key

    消息发送返回状态码：
        SEND_OK：消息发送成功，有时候发送成功也不一定可靠。要确保消息不丢失，还要启用同步Master服务器    或同步刷盘，既SYNC_MASTER或SYNC_FLUSH

        FLUSH_DISK_TIMEOUT：消息发送成功，但是服务器刷盘超时。此时消息已经进入服务器内存，这时只有服      务器宕机消息才会丢失。只有同步刷盘才会返回这个消息，默认是异步刷。如果broker服务器设置了刷盘方式为     同步，既：FlushDiskType=SYNC_FLUSH，当broker服务器未能在同步刷盘时间内(默认5s)完成刷盘，就会返       回该状态

        FLUSH_SLAVE_TIMEOUT：消息发送成功，但是服务器同步到Slave超时。此时消息已经进入了服务器内存，     只有服务器宕机消息才会丢失。如果broker服务器是同步master服务器(默认是异步服务器)，并且broker服务器    未在同步刷盘时间内(默认5s)完成主从同步，则返回该状态

        SLAVE_NOT_AVALILABLE：消息发送成功，但是无Slave可用。如果broker服务器的是同步Master，但没有    配置slave broker服务器，则返回该状态

    消息发送失败处理方式：
        producer的send方法本身内部有重试机制，重试逻辑如下：
            同步发送重试两次，异步发送不重试
            如果发送失败，则换到下一个broker。总耗时最多不超过sendMsgTimeout设置的值，默认10s
            如果本身向broker发送消息产生超时异常，就不会再重试
        如果要保证消息提供的可靠性，可以把发送失败的消息存储进DB，然后定时进行重试

    oneway发送：
        普通消息发送过程：
            1、客户端发请求到服务器
            2、服务器处理请求
            3、服务器向客户端发送响应
        而oneway是只发请求不等响应

消费者相关：
    消费过程幂等性：
        RocketMQ本身无法避免消息重复。如果对重复消费非常敏感，可以在业务层面进行去重处理，比如每个订单    只会处理一次，每消费到一个订单就去判断该订单是否已被消费，如果已消费就忽略。还要考虑原子性等问题
        msgId一定是唯一的，但是可能会存在相同的消息又两个不同的msgId，因为消费者重发或者客户端重发导致

    消费速度慢的解决方式：
        1、在同一个ConsumerGroup下增加Consumer的数量，注意如果超过订阅队列数的Consumer则会无效，每    个Consumer最少要占用一个队列
        2、提高单个Consumer的消费并行线程，可以通过修改consumerThreadMin、consumerThreadMax实现
        3、批量消费，通过设置consumer的consumerMessageBatchMaxSize来进行批量消费，默认是1，每次的       消费消息数小于等于改参数
        4、跳过非重要消息，比如msg.getQueueOffset()可以获取当前消息的指针，msg.getProperty(Message.PR     OPERTY_MAX_OFFSET)可以获得最后一个消息的指针，最后一个消息的指针-当前消息的指针可以获得剩余待消    费消息数量，可以通过这种方式判断，假如消息过多则跳过一些不重要的消息，也就是不处理直接返回成功
        5、优化消息的消费过程，比如尽量减少读DB的交互次数

    消费打印日志：
        建议在消费入口打印消息

    关于并发消费：
        并发消费不建议抛出异常，可以返回ConsumeConcurrentlyStatus.RECONSUME_LATER稍后消费代替异常

    关于消费监听器：
        如果是并发的消息监听器，可以返回RECONSUME_LATER来通知消费者稍后再重新消费，进而先消费其他消    息。如果是顺序的消息监听器，由于不能跳过消息，可以返回SUSPEND_CURRENT_QUEUE_A_MOMENT通知       消费者稍等片刻再继续消费。监听器可以通过consumer.registerMessageListener来使用
        消息会先进入消息监听器然后才会真正消费，因此不建议阻塞消息监听器，因为它会阻塞线程池，并最终可能    会终止消费

    关于线程数设置：
        消费者内部使用了ThreadPoolExecutor在内部对消息进行消费。所以可以通过设置setConsumeThreadMin    或setConsumeThreadMax来改变线程数

    关于消费位点：
        当建立一个新的消费者组时，需要决定是否消费已经存在于broker中的历史消息，CONSUME_FROM_LAST_     OFFSET将会忽略历史消息，并消费之后生产的消息。CONSUME_FROM_FIRST_OFFSET将会消费每个存在于br      oker中的消息。也可以使用CONSUME_FROM_TIMESTAMP来消费在指定时间直戳之后产生的消息。可以通过    在consumer.setConsumeFromWhere中进行设置，只有一个新的消费者组第一次进行消费时才有效

Broker：

    broker有三种角色，分别为：异步主机(ASYNC_MASTER)、同步主机(SYNC_MASTER)和从机(SLAVE)
      异步主机：主机写入成功就往客户端反馈写入成功
      同步主机：主机和从机都写入成功才会向客户端反馈写入成功
      从机：从机只能有一个主机，主机可以有多个从机

    broker刷盘类型有两种，分别是(同步刷新)SYNC_FLUSH和异步刷新(ASYNC_FLUSH)，同步刷新会损失很多性能，但也更可靠

  Broker配置：
    listenPort：服务器接受客户端连接的监听端口，默认值：10911
    nameSrvAddr：名字服务的地址，默认值：null
    brokerlP1：网卡的网络地址，默认值：当前broker监听的ip
    brokerlP2：存在主从broker时，如果在broker主节点上配置了brokerlP2属性，broker从节点会连接主节点配  置的  brokerlP2进行同步。也就是主节点用来进行同步的ip端口默认值：当前broker监听的ip
    brokerName：broker的名称，默认值：null
    brokerClusterName：本broker所属的cluser名称，默认值：DefaultCluster
    brokerId：如果为0表示master，其他正整数表示slave，默认值：0
    storePathCommitLog：存储commit log的路径，默认值：${HOME}/store/commitlog/
    storePathConsumerQueue：存储consumer queue的路径，默认值：${HOME}/store/consumerqueue/
    mappedFileSizeCommitLog：commit log的映射文件大小，默认值：1024 * 1024 * 1024 (1G)
    deleteWhen：在每天什么时间删除已超过文件保留时间的commit log，默认值：04
    fileReservedTime：以小时计算的文件保存时间，默认值72
    brokerRole：broker角色，SYNC_MASTER、ASYNC_MASTER、SLAVE，默认值：ASYNC_MASTER
    flushDiskType：刷盘模式，SYNC_FLUSH、ASYNC_FLUSH，同步刷盘下的broker保证在将消息刷盘后才回复  生产者发送成功，异步刷盘的broker则利用刷盘一组消息的模式，收到消息就回复发送成功，因此没有同步刷盘  安全，但是有更好的性能

  NameServer：
    做简单的路由管理，包括：brokers定期向每个服务器注册路由数据，名称服务器作为客户端，为生产者、消费  者、命令行客户端提供最新的路由信息

  客户端配置;
    客户端包括生产者和消费者

    客户端寻址方式：
        客户端先知道NamaServer，然后通过NameServer再找到Broker

    客户端配置NameServer地址的配置，多个namesrv地址用分号分隔，优先级由高到低：
        生产者或消费者实例.setNamesrvAddr("192.168.0.1:9876;192.168.0.2:9876")
        java启动参数指定：-Drocketmq.namesrv.addr=192.168.0.1:9876;192.168.0.2:9876
        环境变量指定：export NAMESRV_ADDR=192.168.0.1:9876;192.168.0.2:9876

    HTTP静态服务器寻址(默认)，如果没配置NameServer地址就会使用这个：
        客户端启动后会定时访问一个静态HTTP服务器：http://jmenv.tbsite.net:8080/rocketmq/nsaddr，这个URL会  返    回192.168.0.1:9876;192.168.0.2:9876，客户端每两分钟访问一次这个HTTP服务器，并更新NameServer地址  。URL    已经在代码中硬编码，可以通过修改hosts文件来改变要访问的服务器

    DefaultMQProducer、TransactionMQProducer、DefaultMQPushConsumer、DefaultMQPullConsumer都继承于ClientConfig类，这个类为客户端的公共配置类。里面的配置都是get、set形式，每个参数都可以用spring来配置，也可以在代码中配置，默认会去系统环境变量中获取，如果没有就用默认值

  客户端公共配置：
    namesrvAddr：NameServer地址列表，无默认值
    clientIP：客户端ip，某些机器会发生无法识别客户端ip的情况，因此要强制指定，默认值：本机ip
    instanceName：客户端实例名称，客户端创建的多个Producer、Consumer实际是共用一个内部实例(这个实例包含网  络连接、线程资源等)，默认值：DEFAULT
    clientCallbackExecutorThreads：通信层异步回调线程数，默认值：4
    pollNameServerInteval：轮询NameServer间隔时间，单位毫秒，默认值：30000
    heartbeatBrokerInterval：向broker发送心跳间隔时间，单位毫秒，默认值：30000
    persistConsumerOffserInterval：持久化Consumer消费进度间隔实际，单位毫秒，默认值：5000

  提供者配置：
    producerGroup：Producer组名，多个Producer如果属于同一个应用，发送相同的消息，则应该归于一组，默认值：  DEFAULT_PRODUCER
    createTopicKey：发送消息时，自动创建服务器不存在的topic，需要指定key，该key可用于配置发送消息所在topic的  默认路由，默认值：TBW102
    defaultTopicQueueNums：自动创建topic时，默认创建的队列数，默认值：4
    sendMsgTimeout：发送消息超时时间，单位毫秒，默认值：10000
    compressMsgBodyOverHowmuch：消息Body超过多大开始压缩（Consumer收到消息会自动解压缩），单位字节，  默认值：4096
    retryAnotherBrokerWhenNotStoreOK：如果发送消息返回sendResult，但是sendStatus!=SEND_OK，是否重试发送  ，默认值：FALSE
    retryTimesWhenSendFailed：如果消息发送失败，最大重试次数，该参数只对同步发送模式起作用，默认值：2
    maxMessageSize：客户端限制的消息大小，超过报错，同时服务端也会限制，所以需要跟服务端配合使用。，默认值：  4MB
    transactionCheckListener：事务消息回查监听器，如果发送事务消息，必须设置，默认值：无
    checkThreadPoolMinSize：Broker回查Producer事务状态时，线程池最小线程数，默认值：1
    checkThreadPoolMaxSize：Broker回查Producer事务状态时，线程池最大线程数，默认值：1
    checkRequestHoldMax：Broker回查Producer事务状态时，Producer本地缓冲请求队列大小，默认值：2000
    RPCHook：该参数是在Producer创建时传入的，包含消息发送前的预处理和消息响应后的处理两个接口，用户可以在第  一个接口中做一些安全控制或者其他操作，默认值：null

    PushConsumer配置：
    consumerGroup：Consumer组名，多个Consumer如果属于一个应用，订阅同样的消息，且消费逻辑一致，则应该将  它们归为同一组，默认值：DEFAULT_CONSUMER
    messageModel：消费模型支持集群消费和广播消费两种，默认值：CLUSTERING
    consumeFromWhere：Consumer启动后，默认从上次消费的位置开始消费，这包含两种情况：一种是上次消费的位置  未过期，则消费从上次中止的位置进行；一种是上次消费位置已经过期，则从当前队列第一条消息开始消费，默认值：无    CONSUME_FROM_LAST_OFFSET
    consumeTimestamp：只有当consumeFromWhere值为CONSUME_FROM_TIMESTAMP时才起作用。，默认值：半    个小时前
    allocateMessageQueueStrategy：Rebalance算法实现策略，默认值：AllocateMessageQueueAveragely
    subscription：订阅关系，默认值：无
    messageListener：消息监听器，默认值：无
    offsetStore：消费进度存储，默认值：无
    consumeThreadMin：消费线程池最小线程数，默认值：10
    consumeThreadMax：消费线程池最大线程数，默认值：20
    consumeConcurrentlyMaxSpan：单队列并行消费允许的最大跨度，默认值：2000
    pullThresholdForQueue：拉消息本地队列缓存消息最大数，默认值：1000
    pullInterval：拉消息间隔，由于是长轮询，所以为0，但是如果应用为了流控，也可以设置大于0的值，单位毫秒，默认    值：0
    consumeMessageBatchMaxSize：批量消费，一次消费多少条消息，默认值：1
    pullBatchSize：批量拉消息，一次最多拉多少条，默认值：32

  PullConsumer配置：
    consumerGroup：Consumer组名，多个Consumer如果属于一个应用，订阅同样的消息，且消费逻辑一致，则应该将  它们归为同一组，默认值：DEFAULT_CONSUMER
    brokerSuspendMaxTimeMillis：长轮询，Consumer拉消息请求在Broker挂起最长时间，单位毫秒，默认值：20000
    consumerTimeoutMillisWhenSuspend：长轮询，Consumer拉消息请求在Broker挂起超过指定时间，客户端认为超时  ，单位毫秒，默认值：30000
    consumerPullTimeoutMillis：非长轮询，拉消息超时时间，单位毫秒，默认值：10000
    messageModel：消息支持两种模式：集群消费和广播消费，默认值：BROADCASTING
    messageQueueListener：监听队列变化，默认值：无
    offsetStore：消费进度存储，默认值：无
    registerTopics：注册的topic集合，默认值：无
    allocateMessageQueueStrategy：Rebalance算法实现策略，默认值：AllocateMessageQueueAveragely

  message数据结构：
    Topic：必填，消息所属topic的名称，默认值：null
    Body：必填，消息体，默认值：null
    Tags：选填，消息标签，方便服务器过滤使用。目前只支持每个消息设置一个tag，默认值：null
    Keys：选填，代表这条消息的业务关键词，服务器会根据keys创建哈希索引，设置后，可以在Console系统根据Topic、  Keys来查询消息，由于是哈希索引，请尽可能保证key唯一，例如订单号，商品Id等。，默认值：null
    Flag：选填，完全由应用来设置，RocketMQ不做干预，默认值：0
    DelayTimeLevel：选填，消息延时级别，0表示不延时，大于0会延时特定的时间才会被消费，默认值：0
    WaitStoreMsgOK：选填，表示消息是否在服务器落盘后才返回应答。，默认值：TRUE









commitLog：
    rocket存储消息的文件，默认大小1g，默认路径${HOME}/store/commitlog/，消息存储时会顺序写入文件，当文件超过最大大小时会创建一个新文件，文件名是20位，文件名也记录了起始偏移量，第一个文件名是20位0，第二个文件名就是00000000001073741824(默认大小1g的情况下)，里面存储的消息数据包括消息大小、队列偏移量、topic、消息内容...等信息

踩坑：
    两个消费者使用相同的groupName和tag，不同的topic，它们就会互相消费对方topic的消息，也就是说只要groupName相同RocketMQ就会直接忽略topic的差异

    RocketMQ-console的消息详情里面，可以通过messageTrackList.trackType来看到当前消息的状态，比如CONSUMED代表已消费

    在RocketMQ服务器中，一个topic只会有一个消费者的tag，后来的tag会覆盖前面的，因此同一个topic有多个tag的时候，只有后面注册的那个消费者的tag会作为过滤条件，不匹配的直接丢弃。但是rocketmq又会给所有的消费者发消息，这时候不同的消费者会在客户端进行tag再次过滤，前面注册的消费者发现不匹配自己的tag，直接将消息丢弃，后面注册的消费者会发现tag能匹配自己因此会进行消费，但是服务器通过过滤的数据只有一部分会给到后注册的消费者，因此会出现前注册的消费者消息全部丢失，后注册的消费者消息部分丢失

    eventUtil存在的问是共用一个topic，区分不同的tag，这会导致前面注册的服务消息丢失，只有后面注册的服务消费者都能收到消息，并且只会收到部分消息

    因此如果要把消息发送给不同的服务，那么就要创建不同的消费者组，不同的topic，如果不想消息消失，最好一个topic下只有一个tag














