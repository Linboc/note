
    JUC就是java.util.concurrent，指的是java并发工具包，包括java.util.concurrent、java.util.concurrent.locks和java.util.concurrent.atomic

    wait和sleep的区别，它们都会阻塞线程，而wait就是放弃释放当前线程锁的资源，sleep则会继续维持着锁


线程的状态：

    Thread.State是一个枚举类，代表着线程的状态，状态如下：
	NEW：线程创建
	RUNNABLE：线程就绪
	BLOCKED：线程阻塞，正在等待获取锁
	WAITING：线程无期限阻塞，比如调用wait
	TIMED_WAITING：线程有期限阻塞，比如sleep或者wait(long)
	TERMINATED：线程结束

synchronized：
    synchronized在实例方法时，锁的是当前调用对象，在静态方法时，锁的是类。类和实例的锁是分开互不干涉的，在代码里加synchronized(obj)的锁的是obj这个对象，实例方法的锁可以看做synchronized(this)，静态方法的锁可以看做synchronized(当前类.class)，其实锁的都是对象，不过一个是实例对象，一个是Class对象。当一个线程试图访问同步方法时，它必须首先得到锁，退出代码块或者抛出异常都会必须释放锁

volatile：
    它是轻量级的同步机制，因为synchronized保证了可见性，禁止指令重排，保证原子性，而volatile不能保证原子性
    让修饰的变量具有可见性，也就是一个线程能立即看到另外一个线程修改的结果。让被修饰的变量不允许线程使用工作内存(每个线程都有自己的工作内存也就是CPU缓存)，每次都直接修改主内存(物理内存)。synchronized和lock也能保证可见性，释放锁时会将对变量的修改刷新到主存中


原子性：
    保证一系列操纵要么一起执行，要么都不执行。java中用synchronized和Lock保证

可见性：
    每个线程都有自己的工作内存，就是CPU的高速缓存。内存对变量的读写都会放在工作内存中，修改变量后不会马上把最新值放到主内存(物理内存中)，具体时间是不确定的，因此这时修改对其它线程是不可见的。java中使用volatile来保证每次对变量的修改都会刷新到缓存中，还有synchronized和lock也能保证可见性，释放锁时会将对变量的修改刷新到主存中

有序性：
    java允许编译器和处理器对指令进行重排，比如定义几个变量，然后用这几个进行一些操作，本来定义和操作是混着写的，指令重拍会在不影响最终结果的前提下可能会把定义的指令放在一起，操作的指令放在一起，具体原则搜索happens-before（这样可以提升CUP的执行性能，具体搜索流水线技术）

虚假唤醒：
    在使用wait配合notifyAll的时候，需要防止出现虚假唤醒，比如if判断某个线程进入wait状态，假如这是一个资源类，那么在状态不变的情况下后续的线程调用这里也会调wait，就算用了synchronized后续的线程依然会进来，因为有wait释放锁。
    这时候调了notifyAll，本意可能是想让其中一个线程去执行某个逻辑，可是如果有多个线程都在wait那里，那么就会全部wait的线程就会一股脑的执行这个逻辑。比如买票卖票，每次+1或-1，多线程情况下卖票到1了就会阻塞，多个线程都阻塞在一起，然后开始买票，买完票一调notifyAll，卖票线程所有线程都给放开了，第一个线程买了第二个线程依然去买，这就是虚假唤醒      这时候判断票就不应该用if，而是用while，让卖票线程被唤醒后再去执行一遍判断，防止前面的线程卖票后面的线程依然去卖。不用担心多个线程同时执行while，同时跳出循环，同时执行卖票，因为synchronizedd原因，只有唤醒的第一个线程才会获得锁，其它线程会等待锁，等第一个线程执行完回到wait的时候，其它线程依然无法通过while的判断，会继续wait


线程安全集合类：

Vector：
    ArrayList加synchronized版本

Collections.synchronizedXXX：
    各种转线程安全集合函数，其实就是在内部创建了一个对象，实现了相同的方法，然后在相同方法里在synchronized代码块里面调用传进去对象的方法

CopyOnWriteArrayList：
    在进行写入操作的时候，先用lock上个锁，然后创建一个新的数组对象，再给这个新的数组对象进行copy，add就是长度+1，remove就是长度-1，然后Arrays.copy，如果操作在数组中间的元素，就先copy前半部分，略过操作的那个元素再copy后半部分，新数组处理好之后，在setArray，让后面的调用者使用新数组，旧数组就废弃了，除了一些之前创建的迭代器可能会保存着快照(snapshot)对象

CopyOnWriteArraySet：
    内部使用了一个CopyOnWriteArrayList来实现相关功能，每次添加都遍历一遍数组来进行除重判断，如果已存在就添加失败，其他功能也使用了类似的机制

ConcurrentHashMap：
    1.7采用了分段锁机制，1.8采用了CAS(比较并替换，涉及到底层内存操作)+Synchronized

线程的创建方式：
    1、extends Thread：继承
    2、implments Runable：实现
    3、implments Callable<T>：实现+返回值，可往方法上级抛异常
	第三种直接用Callable是用不了的，要new FutureTask类，然后把Callable传进它的构造器里，再把FutureTask传进    Thread的构造器里，然后启动Thread，如果想要返回则则用FutureTask对象的get方法，它会一直阻塞到拿到返回值，并且    FutureTask对象只会执行call函数一次，返回值会缓存起来，也就是如果放进多个Thread对象里start，那么也只会执行一次      ，第一次之后的Thread发现能直接拿到返回值就不会去执行call函数

互斥锁：
    让资源在同一时间只有一个线程能访问，比如synchronized或lock

CAS(Compare-and-Swap：比较并替换)：
    CAS是一种算法，能让一个变量的修改值操作具有原子性，原理是：
	1、拿到旧值
	2、修改到新值
	3、比较当前内存中的值和旧值是否一样，如果不是就回到第一步，是就替换掉旧值，判断和替换是原子              性操作
    它有三个问题，循环时间开销可能会很大、只能同时保证一个变量的原子性操作、ABA问题
	1、循环时间是设计问题
	2、多操作原子性的问题可以通过互斥锁或者AtomicReference来解决
	3、ABA问题就是，怎么能保证在比较时拿到的值是否在修改期间被修改后又被改了回来。JUC的解决方式是，提供一个带    有标记的原子引用类AtomicStampedReference，通过控制变量的版本(其实就是时间戳)来解决ABA问题

AtomicReference：
    它和AtomicInteger非常类似，不同之处在于AtomicInteger是对整数的封装，而AtomicReference是对普通引用类型的封装，它能保证在修改对象引用时的线程安全。AtomicInteger是在对整数进行操作时保证操作的原子性，AtomicReference是在对引用类型进行替换时保证操作的原子性。核心有compareAndSet和getAndSet两个方法，分别是传入旧值和新值，如果原值等于旧值，就替换为新值，第二个是以原值的方式设置新值，并返回旧值
    AtomicInteger保证的是旧数字转为新数字的原子性，AmoticReference保证的是旧对象改为新对象的原子性

thread.interrupted()：
    线程中断，这仅仅会把打断标识位设置为true，而不会真的打断线程，还需要在程序中进行thread.isInterrupted()判断来做相应处理。如果线程正阻塞时被其它线程进行了中断，比如sleep、join、wait、join等，那么就会抛出InterruptedException异常，并且把interrupted重置为false。在synchronized获取锁时阻塞是不会被打断的

thread.join：
    在当前线程中调用其它线程的join方法时，就会阻塞到调用join的线程执行结束才会继续执行

JUC工具类：

CountDownLatch(倒计数锁)：
    倒计数锁，构造器需要传一个总计数，线程安全。主要使用两个函数，countDown：计数减一，await：在哪个线程使用就把当前线程阻塞到计数为零。一但countDown把计数减到0，就会把所有线程从执行await的地方唤醒

CyclicBarrier(计数锁)：
    计数锁，构造器需要传一个计数和一个Runable对象(可选，用来在计数满足时执行)，使用了ReentrantLock保证了计数时的线程安全。函数如下：
	getParties()：获得总计数
	getNumberWaiting()：获得当前计数
	isBroken()：是否计数完成
	await()：阻塞当前线程，并且计数+1
	reset()：重置计数，await()的地方会抛BrokenBarrierException异常
    当计数达到指定数目，则会让最后一个进行await的线程去执行Runable对象的run方法，然后唤醒所有通过await阻塞的线程

Semaphore(信号量)：
    用于多个共享资源在并发线程数下的控制(比如服务器只允许同时有100个请求访问)，构造器传个3代表同时允许3个线程获取资源，后面的其它线程再获取就会被阻塞。主要有如下方法：
	acquire：要么获取锁(信号量-1)，要么一直阻塞直到有线程释放信号量或超时，还能指定要获取多少信号量
	tryAcquire：尝试获取信号量，不阻塞，无法获取就返回false，还可以指定超时时间，超时结束前一直尝试获取
	release：释放锁(信号量+1)，然后唤醒等待的线程，还能指定释放多少信号量
	availablePermits：当前剩余可用信号量

ForkJoinPool(分支合并)：
    它也是ExecutorService的实现类，也类似于线程池，构造器的parallelism能指定并发数。不过作用是聚合执行任务，也就是把任务分解然后并发执行再进行结果合并。相关类是ForkJoinTask，这个类的核心方法是fork、join、get，它实现了FutureTask，讲的也很粗浅，要用再去查吧

ComplatableFuture(异步回调)：
    可以把它当工具类用，会在任务执行完后进行回调。比如runAsync或supplyAsync，分别代表了有返回值和没返回值的任务。在调用这两个函数后可以链式调用whenCpmplete，任务执行完后会调用这个函数里传的函数式接口，有两个参数，第一个代表了任务执行的结果，只有有返回值的任务有，第二个代表了任务抛出的异常，如果没有异常则为null。还能继续调exceptionally，这个只有出现异常才会生效，这个函数式接口需要传一个参数返回一个值，传的参数代表了执行出现的异常，返回的是出现异常的情况下需要返回什么结果，也可以最终用get函数来获取结果
    

lock：

    lock的功能可以代替synchronized，其中synchronized的加锁和解锁分别用lock和unlock代替，wait、notify、notifyAll则用lock.newCondition对象的await、signal、signalAll来代替

ReentrantLock：

    可重入锁，同一个ReentrantLock对象只有第一次进行lock的时候生效，后面的lock都会被阻塞，只有lock执行unlock才    会释放前面的锁，因此每次lock都对应一个unlock，前面的lock没有进行unlock，后面的lock就会一直被阻塞，并且释放锁的    顺序和调用lock的顺序一致。
    lock.newCondition()函数可以获得一个Condition对象，这个对象对应着Object类的几个方法:wait、notify、notifyAll，他们分别对应着Condition对象的await、signal、signalAll，作用是一致的，Object的方法对调用的对象与当前线程生效Condition的方法对它所属的lock和当前线程生效
    并且Lock还有一个优势，可以精准决定解哪个锁，只需要用一个lock创建多个condition对象，每个锁分别用一个，锁的时候用对应condition的await()，解锁的时候用要解锁的那个condition的signal()就行了，同一个condition还可以进行多次     await，然后使用signalAll()进行一次性全部唤醒，比wait和nodity灵活在自由控制解锁的线程，nodify的解锁是由操作系统决  定的。
    这跟new几个Object对象有什么区别，不同地方的加锁和解锁分别用这几个对象进行就可以了？因为Object的几个线程相关方法都需要使用synchronized锁住相关对象才能使用这些对象的线程方法，如果没锁定就用会抛出IllegalMonitorStateException异常，总不能每次阻塞或唤醒都要先给对应的对象加锁吧。虽然condition也要它所属的lock对象加锁，不然也会出现那个异常，但是多个condition对象只要用同一个把它new出来的lock进行锁定就行了

ReadWriteLock：

    这是一个接口，实现类是ReentrantReadWriteLock。这个类主要有两个锁，分别是readLock()和writeLock()，可以获取到读锁和写锁，然后分别用lock和unlock进行加锁和释放锁。其中写锁是排他的，也就是写锁lock之后，无论是读锁还是写锁进行lock都会进行阻塞，只有等写锁unlock之后才能再进入。而读锁是共享的，也就是读锁只要不被写锁干涉就可以随意加锁解锁，读锁进行lock的的作用是，在写锁lock之后能在读锁lock的地方进行阻塞


BlockingQueue(阻塞队列)：

    这是一个接口，当队列是空的，获取元素操作将会被阻塞，直到元素被添加；当队列是满的，添加元素操作将会被阻塞，直到元素被获取

    核心函数：
	插入：add(已满则抛异常)、offer(已满返回false)、put(已满则阻塞)、offer(e, time, unit)(offer等待至超时版本)
	移除：remove(没有则抛异常)、poll(没有则返回null)、take(没有则阻塞)、poll(time, unit)(poll等待至超时版本)
	检查(跟移除相同的是都返回第一个元素，但是检查后元素依然在)：element(没有则抛异常)、peek(没有则返回null)


ThreadPool(线程池)：

    主要特点是：线程复用、控制并发数、管理线程

  优点：
	1、降低资源消耗，通过重复利用已创建的线程降低线程创建和销毁造成的资源消耗
	2、提高响应速度，当任务到达时，任务可以不需要等待线程创建就能立即执行
	3、提高线程的可管理性，线程如果无线创建，不仅会消耗系统资源，还会降低系统稳定性，线程池可以进行统一的分配      、调优、监控

  线程池简介：
    线程池的最顶级接口是Executor，它有一个void execute(Runnable command);函数，不过一般用的接口都是ExcutorService。常用的几种线程池的创建都是使用Executors来创建的，实际上这个工具类都是用了new ThreadPoolExecutor()然后传不同的参数来控制线程池的特性，Executors常用函数：
	Executors.newFixedThreadPool(3)：创建固定容量的线程池
	Executors.newSingleThreadExecutor()：创建单容量的线程池
	Executors.newCachedThreadPool()：创建自动扩充的线程池

  Executors一般不使用，而是通过new ThreadPoolExecutor的方式去创建，因为这样能让写的人更加明确线程池的运行规则。比如FixedThreadPool和SingleThreadExecutor的阻塞队列长度是Integer.MAX_VALUE，CachedThreadPoll和ScheduledThreadPool的最大允许创建线程数为Integer.MAX_VALUE，这些都会导致OOM（内存泄漏）

  ThreadPoolExecutor的构造器参数：
	corePoolSize：常驻核心线程数(最小线程数)
	maximumPoolSize：能够同时容纳的最大线程数，必须大于0（队列已满的情况下才会在这里创建新的非核心线程）
	keepAliveTime：常驻核心线程数之外的线程存活时间，也就是线程池空闲时间达到这个数，就销毁线程到核心池的数量
	unit：keepAliveTim的单位，是个TimeUnit类型
	workQueue：工作队列，是一个阻塞队列，存放Runable类型的任务
	threadFactory：线程创建工厂，一般用默认的
	handler：拒绝策略，当队列满了，并且工作线程数也达到maximumPoolSize(每新加一个线程就可以马上消耗一个阻塞队        列里的任务)时如何拒绝加进来的Runable任务

    所以一个线程池能同时存储的最大任务量应该是，maximumPoolSize + workQueue.size()，同时能执行的最大任务量应该是     maximumPoolSize，maximumPoolSize的容量计算是包含了corePoolSize的，因此必须必corePoolSize大

  线程池工作流程：
    1、创建线程池等待工作任务
    2、来了一个新任务之后：
	1、如果corePoolSize没满则创建线程去执行
	2、如果corePoolSize满了则放进workQueue里
	3、如果workQueue满了则创建属于maximumPoolSize范畴的线程，然后从workQueue中拿任务，然后把新的任务放进队列里
	4、如果maximumPoolSize也满了，则执行拒绝策略
    3、一个任务执行完后，从workQueue中取出下一个任务来执行
    4、一个线程空闲时间超过keepAliveTime时，如果当前线程数大于corePoolSize，这个空闲线程就会被销毁
    5、当线程池的所有任务完成后，经过一定的空闲时间，最终线程池只会保留corePoolSize数量的线程

    addWorker(null, false)相当于尝试创建一个新的非核心线程，只是没有任务可运行，会在从阻塞队列获取任务那里阻塞住








多线程使用诀窍：
    1、使用线程来操作资源类，资源类自己内聚实现线程安全
    2、判断(假如可以操作就继续，否则就阻塞)、干活(执行业务操作)、通知(唤醒其它线程)
    3、多线程交互环境下，要防止多线程的虚假唤醒，判断只用while，不用if
    4、根据标识位来判断不同的线程该执行还是阻塞等待唤醒










